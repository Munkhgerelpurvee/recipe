(()=>{var e={797:e=>{var t="undefined"!=typeof process&&process.pid?process.pid.toString(36):"";function n(){var e=Date.now(),t=n.last||e;return n.last=e>t?e:t+1}e.exports=e.exports.default=function(e,r){return(e||"")+""+t+n().toString(36)+(r||"")},e.exports.process=function(e,r){return(e||"")+t+n().toString(36)+(r||"")},e.exports.time=function(e,t){return(e||"")+n().toString(36)+(t||"")}}},t={};function n(r){var s=t[r];if(void 0!==s)return s.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e={};function t(e,t){return function(){return e.apply(t,arguments)}}n.r(e),n.d(e,{hasBrowserEnv:()=>de,hasStandardBrowserEnv:()=>pe,hasStandardBrowserWebWorkerEnv:()=>he,navigator:()=>fe,origin:()=>me});const{toString:r}=Object.prototype,{getPrototypeOf:s}=Object,i=(o=Object.create(null),e=>{const t=r.call(e);return o[t]||(o[t]=t.slice(8,-1).toLowerCase())});var o;const a=e=>(e=e.toLowerCase(),t=>i(t)===e),c=e=>t=>typeof t===e,{isArray:l}=Array,u=c("undefined"),d=a("ArrayBuffer"),f=c("string"),p=c("function"),h=c("number"),m=e=>null!==e&&"object"==typeof e,g=e=>{if("object"!==i(e))return!1;const t=s(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},b=a("Date"),y=a("File"),w=a("Blob"),_=a("FileList"),v=a("URLSearchParams"),[E,S,R,O]=["ReadableStream","Request","Response","Headers"].map(a);function T(e,t,{allOwnKeys:n=!1}={}){if(null==e)return;let r,s;if("object"!=typeof e&&(e=[e]),l(e))for(r=0,s=e.length;r<s;r++)t.call(null,e[r],r,e);else{const s=n?Object.getOwnPropertyNames(e):Object.keys(e),i=s.length;let o;for(r=0;r<i;r++)o=s[r],t.call(null,e[o],o,e)}}function k(e,t){t=t.toLowerCase();const n=Object.keys(e);let r,s=n.length;for(;s-- >0;)if(r=n[s],t===r.toLowerCase())return r;return null}const A="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,L=e=>!u(e)&&e!==A,x=(j="undefined"!=typeof Uint8Array&&s(Uint8Array),e=>j&&e instanceof j);var j;const C=a("HTMLFormElement"),N=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),P=a("RegExp"),B=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),r={};T(n,((n,s)=>{let i;!1!==(i=t(n,s,e))&&(r[s]=i||n)})),Object.defineProperties(e,r)},F="abcdefghijklmnopqrstuvwxyz",D="0123456789",U={DIGIT:D,ALPHA:F,ALPHA_DIGIT:F+F.toUpperCase()+D},q=a("AsyncFunction"),M=(I="function"==typeof setImmediate,$=p(A.postMessage),I?setImmediate:$?(H=`axios@${Math.random()}`,z=[],A.addEventListener("message",(({source:e,data:t})=>{e===A&&t===H&&z.length&&z.shift()()}),!1),e=>{z.push(e),A.postMessage(H,"*")}):e=>setTimeout(e));var I,$,H,z;const J="undefined"!=typeof queueMicrotask?queueMicrotask.bind(A):"undefined"!=typeof process&&process.nextTick||M,W={isArray:l,isArrayBuffer:d,isBuffer:function(e){return null!==e&&!u(e)&&null!==e.constructor&&!u(e.constructor)&&p(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||p(e.append)&&("formdata"===(t=i(e))||"object"===t&&p(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&d(e.buffer),t},isString:f,isNumber:h,isBoolean:e=>!0===e||!1===e,isObject:m,isPlainObject:g,isReadableStream:E,isRequest:S,isResponse:R,isHeaders:O,isUndefined:u,isDate:b,isFile:y,isBlob:w,isRegExp:P,isFunction:p,isStream:e=>m(e)&&p(e.pipe),isURLSearchParams:v,isTypedArray:x,isFileList:_,forEach:T,merge:function e(){const{caseless:t}=L(this)&&this||{},n={},r=(r,s)=>{const i=t&&k(n,s)||s;g(n[i])&&g(r)?n[i]=e(n[i],r):g(r)?n[i]=e({},r):l(r)?n[i]=r.slice():n[i]=r};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&T(arguments[e],r);return n},extend:(e,n,r,{allOwnKeys:s}={})=>(T(n,((n,s)=>{r&&p(n)?e[s]=t(n,r):e[s]=n}),{allOwnKeys:s}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,n,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:(e,t,n,r)=>{let i,o,a;const c={};if(t=t||{},null==e)return t;do{for(i=Object.getOwnPropertyNames(e),o=i.length;o-- >0;)a=i[o],r&&!r(a,e,t)||c[a]||(t[a]=e[a],c[a]=!0);e=!1!==n&&s(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:i,kindOfTest:a,endsWith:(e,t,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;const r=e.indexOf(t,n);return-1!==r&&r===n},toArray:e=>{if(!e)return null;if(l(e))return e;let t=e.length;if(!h(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},forEachEntry:(e,t)=>{const n=(e&&e[Symbol.iterator]).call(e);let r;for(;(r=n.next())&&!r.done;){const n=r.value;t.call(e,n[0],n[1])}},matchAll:(e,t)=>{let n;const r=[];for(;null!==(n=e.exec(t));)r.push(n);return r},isHTMLForm:C,hasOwnProperty:N,hasOwnProp:N,reduceDescriptors:B,freezeMethods:e=>{B(e,((t,n)=>{if(p(e)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const r=e[n];p(r)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))}))},toObjectSet:(e,t)=>{const n={},r=e=>{e.forEach((e=>{n[e]=!0}))};return l(e)?r(e):r(String(e).split(t)),n},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(e,t)=>null!=e&&Number.isFinite(e=+e)?e:t,findKey:k,global:A,isContextDefined:L,ALPHABET:U,generateString:(e=16,t=U.ALPHA_DIGIT)=>{let n="";const{length:r}=t;for(;e--;)n+=t[Math.random()*r|0];return n},isSpecCompliantForm:function(e){return!!(e&&p(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const t=new Array(10),n=(e,r)=>{if(m(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[r]=e;const s=l(e)?[]:{};return T(e,((e,t)=>{const i=n(e,r+1);!u(i)&&(s[t]=i)})),t[r]=void 0,s}}return e};return n(e,0)},isAsyncFn:q,isThenable:e=>e&&(m(e)||p(e))&&p(e.then)&&p(e.catch),setImmediate:M,asap:J};function K(e,t,n,r,s){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),s&&(this.response=s,this.status=s.status?s.status:null)}W.inherits(K,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:W.toJSONObject(this.config),code:this.code,status:this.status}}});const V=K.prototype,G={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{G[e]={value:e}})),Object.defineProperties(K,G),Object.defineProperty(V,"isAxiosError",{value:!0}),K.from=(e,t,n,r,s,i)=>{const o=Object.create(V);return W.toFlatObject(e,o,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),K.call(o,e.message,t,n,r,s),o.cause=e,o.name=e.name,i&&Object.assign(o,i),o};const X=K;function Q(e){return W.isPlainObject(e)||W.isArray(e)}function Z(e){return W.endsWith(e,"[]")?e.slice(0,-2):e}function Y(e,t,n){return e?e.concat(t).map((function(e,t){return e=Z(e),!n&&t?"["+e+"]":e})).join(n?".":""):t}const ee=W.toFlatObject(W,{},null,(function(e){return/^is[A-Z]/.test(e)})),te=function(e,t,n){if(!W.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const r=(n=W.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!W.isUndefined(t[e])}))).metaTokens,s=n.visitor||l,i=n.dots,o=n.indexes,a=(n.Blob||"undefined"!=typeof Blob&&Blob)&&W.isSpecCompliantForm(t);if(!W.isFunction(s))throw new TypeError("visitor must be a function");function c(e){if(null===e)return"";if(W.isDate(e))return e.toISOString();if(!a&&W.isBlob(e))throw new X("Blob is not supported. Use a Buffer instead.");return W.isArrayBuffer(e)||W.isTypedArray(e)?a&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function l(e,n,s){let a=e;if(e&&!s&&"object"==typeof e)if(W.endsWith(n,"{}"))n=r?n:n.slice(0,-2),e=JSON.stringify(e);else if(W.isArray(e)&&function(e){return W.isArray(e)&&!e.some(Q)}(e)||(W.isFileList(e)||W.endsWith(n,"[]"))&&(a=W.toArray(e)))return n=Z(n),a.forEach((function(e,r){!W.isUndefined(e)&&null!==e&&t.append(!0===o?Y([n],r,i):null===o?n:n+"[]",c(e))})),!1;return!!Q(e)||(t.append(Y(s,n,i),c(e)),!1)}const u=[],d=Object.assign(ee,{defaultVisitor:l,convertValue:c,isVisitable:Q});if(!W.isObject(e))throw new TypeError("data must be an object");return function e(n,r){if(!W.isUndefined(n)){if(-1!==u.indexOf(n))throw Error("Circular reference detected in "+r.join("."));u.push(n),W.forEach(n,(function(n,i){!0===(!(W.isUndefined(n)||null===n)&&s.call(t,n,W.isString(i)?i.trim():i,r,d))&&e(n,r?r.concat(i):[i])})),u.pop()}}(e),t};function ne(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function re(e,t){this._pairs=[],e&&te(e,this,t)}const se=re.prototype;se.append=function(e,t){this._pairs.push([e,t])},se.toString=function(e){const t=e?function(t){return e.call(this,t,ne)}:ne;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};const ie=re;function oe(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function ae(e,t,n){if(!t)return e;const r=n&&n.encode||oe;W.isFunction(n)&&(n={serialize:n});const s=n&&n.serialize;let i;if(i=s?s(t,n):W.isURLSearchParams(t)?t.toString():new ie(t,n).toString(r),i){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}const ce=class{constructor(){this.handlers=[]}use(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){W.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},le={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},ue={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:ie,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},protocols:["http","https","file","blob","url","data"]},de="undefined"!=typeof window&&"undefined"!=typeof document,fe="object"==typeof navigator&&navigator||void 0,pe=de&&(!fe||["ReactNative","NativeScript","NS"].indexOf(fe.product)<0),he="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,me=de&&window.location.href||"http://localhost",ge={...e,...ue},be=function(e){function t(e,n,r,s){let i=e[s++];if("__proto__"===i)return!0;const o=Number.isFinite(+i),a=s>=e.length;return i=!i&&W.isArray(r)?r.length:i,a?(W.hasOwnProp(r,i)?r[i]=[r[i],n]:r[i]=n,!o):(r[i]&&W.isObject(r[i])||(r[i]=[]),t(e,n,r[i],s)&&W.isArray(r[i])&&(r[i]=function(e){const t={},n=Object.keys(e);let r;const s=n.length;let i;for(r=0;r<s;r++)i=n[r],t[i]=e[i];return t}(r[i])),!o)}if(W.isFormData(e)&&W.isFunction(e.entries)){const n={};return W.forEachEntry(e,((e,r)=>{t(function(e){return W.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),r,n,0)})),n}return null},ye={transitional:le,adapter:["xhr","http","fetch"],transformRequest:[function(e,t){const n=t.getContentType()||"",r=n.indexOf("application/json")>-1,s=W.isObject(e);if(s&&W.isHTMLForm(e)&&(e=new FormData(e)),W.isFormData(e))return r?JSON.stringify(be(e)):e;if(W.isArrayBuffer(e)||W.isBuffer(e)||W.isStream(e)||W.isFile(e)||W.isBlob(e)||W.isReadableStream(e))return e;if(W.isArrayBufferView(e))return e.buffer;if(W.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let i;if(s){if(n.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return te(e,new ge.classes.URLSearchParams,Object.assign({visitor:function(e,t,n,r){return ge.isNode&&W.isBuffer(e)?(this.append(t,e.toString("base64")),!1):r.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((i=W.isFileList(e))||n.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return te(i?{"files[]":e}:e,t&&new t,this.formSerializer)}}return s||r?(t.setContentType("application/json",!1),function(e){if(W.isString(e))try{return(0,JSON.parse)(e),W.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||ye.transitional,n=t&&t.forcedJSONParsing,r="json"===this.responseType;if(W.isResponse(e)||W.isReadableStream(e))return e;if(e&&W.isString(e)&&(n&&!this.responseType||r)){const n=!(t&&t.silentJSONParsing)&&r;try{return JSON.parse(e)}catch(e){if(n){if("SyntaxError"===e.name)throw X.from(e,X.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:ge.classes.FormData,Blob:ge.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};W.forEach(["delete","get","head","post","put","patch"],(e=>{ye.headers[e]={}}));const we=ye,_e=W.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),ve=Symbol("internals");function Ee(e){return e&&String(e).trim().toLowerCase()}function Se(e){return!1===e||null==e?e:W.isArray(e)?e.map(Se):String(e)}function Re(e,t,n,r,s){return W.isFunction(r)?r.call(this,t,n):(s&&(t=n),W.isString(t)?W.isString(r)?-1!==t.indexOf(r):W.isRegExp(r)?r.test(t):void 0:void 0)}class Oe{constructor(e){e&&this.set(e)}set(e,t,n){const r=this;function s(e,t,n){const s=Ee(t);if(!s)throw new Error("header name must be a non-empty string");const i=W.findKey(r,s);(!i||void 0===r[i]||!0===n||void 0===n&&!1!==r[i])&&(r[i||t]=Se(e))}const i=(e,t)=>W.forEach(e,((e,n)=>s(e,n,t)));if(W.isPlainObject(e)||e instanceof this.constructor)i(e,t);else if(W.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim()))i((e=>{const t={};let n,r,s;return e&&e.split("\n").forEach((function(e){s=e.indexOf(":"),n=e.substring(0,s).trim().toLowerCase(),r=e.substring(s+1).trim(),!n||t[n]&&_e[n]||("set-cookie"===n?t[n]?t[n].push(r):t[n]=[r]:t[n]=t[n]?t[n]+", "+r:r)})),t})(e),t);else if(W.isHeaders(e))for(const[t,r]of e.entries())s(r,t,n);else null!=e&&s(t,e,n);return this}get(e,t){if(e=Ee(e)){const n=W.findKey(this,e);if(n){const e=this[n];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(e);)t[r[1]]=r[2];return t}(e);if(W.isFunction(t))return t.call(this,e,n);if(W.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=Ee(e)){const n=W.findKey(this,e);return!(!n||void 0===this[n]||t&&!Re(0,this[n],n,t))}return!1}delete(e,t){const n=this;let r=!1;function s(e){if(e=Ee(e)){const s=W.findKey(n,e);!s||t&&!Re(0,n[s],s,t)||(delete n[s],r=!0)}}return W.isArray(e)?e.forEach(s):s(e),r}clear(e){const t=Object.keys(this);let n=t.length,r=!1;for(;n--;){const s=t[n];e&&!Re(0,this[s],s,e,!0)||(delete this[s],r=!0)}return r}normalize(e){const t=this,n={};return W.forEach(this,((r,s)=>{const i=W.findKey(n,s);if(i)return t[i]=Se(r),void delete t[s];const o=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,n)=>t.toUpperCase()+n))}(s):String(s).trim();o!==s&&delete t[s],t[o]=Se(r),n[o]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return W.forEach(this,((n,r)=>{null!=n&&!1!==n&&(t[r]=e&&W.isArray(n)?n.join(", "):n)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const n=new this(e);return t.forEach((e=>n.set(e))),n}static accessor(e){const t=(this[ve]=this[ve]={accessors:{}}).accessors,n=this.prototype;function r(e){const r=Ee(e);t[r]||(function(e,t){const n=W.toCamelCase(" "+t);["get","set","has"].forEach((r=>{Object.defineProperty(e,r+n,{value:function(e,n,s){return this[r].call(this,t,e,n,s)},configurable:!0})}))}(n,e),t[r]=!0)}return W.isArray(e)?e.forEach(r):r(e),this}}Oe.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),W.reduceDescriptors(Oe.prototype,(({value:e},t)=>{let n=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(e){this[n]=e}}})),W.freezeMethods(Oe);const Te=Oe;function ke(e,t){const n=this||we,r=t||n,s=Te.from(r.headers);let i=r.data;return W.forEach(e,(function(e){i=e.call(n,i,s.normalize(),t?t.status:void 0)})),s.normalize(),i}function Ae(e){return!(!e||!e.__CANCEL__)}function Le(e,t,n){X.call(this,null==e?"canceled":e,X.ERR_CANCELED,t,n),this.name="CanceledError"}W.inherits(Le,X,{__CANCEL__:!0});const xe=Le;function je(e,t,n){const r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(new X("Request failed with status code "+n.status,[X.ERR_BAD_REQUEST,X.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}const Ce=(e,t,n=3)=>{let r=0;const s=function(e,t){e=e||10;const n=new Array(e),r=new Array(e);let s,i=0,o=0;return t=void 0!==t?t:1e3,function(a){const c=Date.now(),l=r[o];s||(s=c),n[i]=a,r[i]=c;let u=o,d=0;for(;u!==i;)d+=n[u++],u%=e;if(i=(i+1)%e,i===o&&(o=(o+1)%e),c-s<t)return;const f=l&&c-l;return f?Math.round(1e3*d/f):void 0}}(50,250);return function(e,t){let n,r,s=0,i=1e3/t;const o=(t,i=Date.now())=>{s=i,n=null,r&&(clearTimeout(r),r=null),e.apply(null,t)};return[(...e)=>{const t=Date.now(),a=t-s;a>=i?o(e,t):(n=e,r||(r=setTimeout((()=>{r=null,o(n)}),i-a)))},()=>n&&o(n)]}((n=>{const i=n.loaded,o=n.lengthComputable?n.total:void 0,a=i-r,c=s(a);r=i,e({loaded:i,total:o,progress:o?i/o:void 0,bytes:a,rate:c||void 0,estimated:c&&o&&i<=o?(o-i)/c:void 0,event:n,lengthComputable:null!=o,[t?"download":"upload"]:!0})}),n)},Ne=(e,t)=>{const n=null!=e;return[r=>t[0]({lengthComputable:n,total:e,loaded:r}),t[1]]},Pe=e=>(...t)=>W.asap((()=>e(...t))),Be=ge.hasStandardBrowserEnv?((e,t)=>n=>(n=new URL(n,ge.origin),e.protocol===n.protocol&&e.host===n.host&&(t||e.port===n.port)))(new URL(ge.origin),ge.navigator&&/(msie|trident)/i.test(ge.navigator.userAgent)):()=>!0,Fe=ge.hasStandardBrowserEnv?{write(e,t,n,r,s,i){const o=[e+"="+encodeURIComponent(t)];W.isNumber(n)&&o.push("expires="+new Date(n).toGMTString()),W.isString(r)&&o.push("path="+r),W.isString(s)&&o.push("domain="+s),!0===i&&o.push("secure"),document.cookie=o.join("; ")},read(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read:()=>null,remove(){}};function De(e,t){return e&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)?function(e,t){return t?e.replace(/\/?\/$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}const Ue=e=>e instanceof Te?{...e}:e;function qe(e,t){t=t||{};const n={};function r(e,t,n,r){return W.isPlainObject(e)&&W.isPlainObject(t)?W.merge.call({caseless:r},e,t):W.isPlainObject(t)?W.merge({},t):W.isArray(t)?t.slice():t}function s(e,t,n,s){return W.isUndefined(t)?W.isUndefined(e)?void 0:r(void 0,e,0,s):r(e,t,0,s)}function i(e,t){if(!W.isUndefined(t))return r(void 0,t)}function o(e,t){return W.isUndefined(t)?W.isUndefined(e)?void 0:r(void 0,e):r(void 0,t)}function a(n,s,i){return i in t?r(n,s):i in e?r(void 0,n):void 0}const c={url:i,method:i,data:i,baseURL:o,transformRequest:o,transformResponse:o,paramsSerializer:o,timeout:o,timeoutMessage:o,withCredentials:o,withXSRFToken:o,adapter:o,responseType:o,xsrfCookieName:o,xsrfHeaderName:o,onUploadProgress:o,onDownloadProgress:o,decompress:o,maxContentLength:o,maxBodyLength:o,beforeRedirect:o,transport:o,httpAgent:o,httpsAgent:o,cancelToken:o,socketPath:o,responseEncoding:o,validateStatus:a,headers:(e,t,n)=>s(Ue(e),Ue(t),0,!0)};return W.forEach(Object.keys(Object.assign({},e,t)),(function(r){const i=c[r]||s,o=i(e[r],t[r],r);W.isUndefined(o)&&i!==a||(n[r]=o)})),n}const Me=e=>{const t=qe({},e);let n,{data:r,withXSRFToken:s,xsrfHeaderName:i,xsrfCookieName:o,headers:a,auth:c}=t;if(t.headers=a=Te.from(a),t.url=ae(De(t.baseURL,t.url),e.params,e.paramsSerializer),c&&a.set("Authorization","Basic "+btoa((c.username||"")+":"+(c.password?unescape(encodeURIComponent(c.password)):""))),W.isFormData(r))if(ge.hasStandardBrowserEnv||ge.hasStandardBrowserWebWorkerEnv)a.setContentType(void 0);else if(!1!==(n=a.getContentType())){const[e,...t]=n?n.split(";").map((e=>e.trim())).filter(Boolean):[];a.setContentType([e||"multipart/form-data",...t].join("; "))}if(ge.hasStandardBrowserEnv&&(s&&W.isFunction(s)&&(s=s(t)),s||!1!==s&&Be(t.url))){const e=i&&o&&Fe.read(o);e&&a.set(i,e)}return t},Ie="undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,n){const r=Me(e);let s=r.data;const i=Te.from(r.headers).normalize();let o,a,c,l,u,{responseType:d,onUploadProgress:f,onDownloadProgress:p}=r;function h(){l&&l(),u&&u(),r.cancelToken&&r.cancelToken.unsubscribe(o),r.signal&&r.signal.removeEventListener("abort",o)}let m=new XMLHttpRequest;function g(){if(!m)return;const r=Te.from("getAllResponseHeaders"in m&&m.getAllResponseHeaders());je((function(e){t(e),h()}),(function(e){n(e),h()}),{data:d&&"text"!==d&&"json"!==d?m.response:m.responseText,status:m.status,statusText:m.statusText,headers:r,config:e,request:m}),m=null}m.open(r.method.toUpperCase(),r.url,!0),m.timeout=r.timeout,"onloadend"in m?m.onloadend=g:m.onreadystatechange=function(){m&&4===m.readyState&&(0!==m.status||m.responseURL&&0===m.responseURL.indexOf("file:"))&&setTimeout(g)},m.onabort=function(){m&&(n(new X("Request aborted",X.ECONNABORTED,e,m)),m=null)},m.onerror=function(){n(new X("Network Error",X.ERR_NETWORK,e,m)),m=null},m.ontimeout=function(){let t=r.timeout?"timeout of "+r.timeout+"ms exceeded":"timeout exceeded";const s=r.transitional||le;r.timeoutErrorMessage&&(t=r.timeoutErrorMessage),n(new X(t,s.clarifyTimeoutError?X.ETIMEDOUT:X.ECONNABORTED,e,m)),m=null},void 0===s&&i.setContentType(null),"setRequestHeader"in m&&W.forEach(i.toJSON(),(function(e,t){m.setRequestHeader(t,e)})),W.isUndefined(r.withCredentials)||(m.withCredentials=!!r.withCredentials),d&&"json"!==d&&(m.responseType=r.responseType),p&&([c,u]=Ce(p,!0),m.addEventListener("progress",c)),f&&m.upload&&([a,l]=Ce(f),m.upload.addEventListener("progress",a),m.upload.addEventListener("loadend",l)),(r.cancelToken||r.signal)&&(o=t=>{m&&(n(!t||t.type?new xe(null,e,m):t),m.abort(),m=null)},r.cancelToken&&r.cancelToken.subscribe(o),r.signal&&(r.signal.aborted?o():r.signal.addEventListener("abort",o)));const b=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(r.url);b&&-1===ge.protocols.indexOf(b)?n(new X("Unsupported protocol "+b+":",X.ERR_BAD_REQUEST,e)):m.send(s||null)}))},$e=(e,t)=>{const{length:n}=e=e?e.filter(Boolean):[];if(t||n){let n,r=new AbortController;const s=function(e){if(!n){n=!0,o();const t=e instanceof Error?e:this.reason;r.abort(t instanceof X?t:new xe(t instanceof Error?t.message:t))}};let i=t&&setTimeout((()=>{i=null,s(new X(`timeout ${t} of ms exceeded`,X.ETIMEDOUT))}),t);const o=()=>{e&&(i&&clearTimeout(i),i=null,e.forEach((e=>{e.unsubscribe?e.unsubscribe(s):e.removeEventListener("abort",s)})),e=null)};e.forEach((e=>e.addEventListener("abort",s)));const{signal:a}=r;return a.unsubscribe=()=>W.asap(o),a}},He=function*(e,t){let n=e.byteLength;if(!t||n<t)return void(yield e);let r,s=0;for(;s<n;)r=s+t,yield e.slice(s,r),s=r},ze=(e,t,n,r)=>{const s=async function*(e,t){for await(const n of async function*(e){if(e[Symbol.asyncIterator])return void(yield*e);const t=e.getReader();try{for(;;){const{done:e,value:n}=await t.read();if(e)break;yield n}}finally{await t.cancel()}}(e))yield*He(n,t)}(e,t);let i,o=0,a=e=>{i||(i=!0,r&&r(e))};return new ReadableStream({async pull(e){try{const{done:t,value:r}=await s.next();if(t)return a(),void e.close();let i=r.byteLength;if(n){let e=o+=i;n(e)}e.enqueue(new Uint8Array(r))}catch(e){throw a(e),e}},cancel:e=>(a(e),s.return())},{highWaterMark:2})},Je="function"==typeof fetch&&"function"==typeof Request&&"function"==typeof Response,We=Je&&"function"==typeof ReadableStream,Ke=Je&&("function"==typeof TextEncoder?(Ve=new TextEncoder,e=>Ve.encode(e)):async e=>new Uint8Array(await new Response(e).arrayBuffer()));var Ve;const Ge=(e,...t)=>{try{return!!e(...t)}catch(e){return!1}},Xe=We&&Ge((()=>{let e=!1;const t=new Request(ge.origin,{body:new ReadableStream,method:"POST",get duplex(){return e=!0,"half"}}).headers.has("Content-Type");return e&&!t})),Qe=We&&Ge((()=>W.isReadableStream(new Response("").body))),Ze={stream:Qe&&(e=>e.body)};var Ye;Je&&(Ye=new Response,["text","arrayBuffer","blob","formData","stream"].forEach((e=>{!Ze[e]&&(Ze[e]=W.isFunction(Ye[e])?t=>t[e]():(t,n)=>{throw new X(`Response type '${e}' is not supported`,X.ERR_NOT_SUPPORT,n)})})));const et={http:null,xhr:Ie,fetch:Je&&(async e=>{let{url:t,method:n,data:r,signal:s,cancelToken:i,timeout:o,onDownloadProgress:a,onUploadProgress:c,responseType:l,headers:u,withCredentials:d="same-origin",fetchOptions:f}=Me(e);l=l?(l+"").toLowerCase():"text";let p,h=$e([s,i&&i.toAbortSignal()],o);const m=h&&h.unsubscribe&&(()=>{h.unsubscribe()});let g;try{if(c&&Xe&&"get"!==n&&"head"!==n&&0!==(g=await(async(e,t)=>{const n=W.toFiniteNumber(e.getContentLength());return null==n?(async e=>{if(null==e)return 0;if(W.isBlob(e))return e.size;if(W.isSpecCompliantForm(e)){const t=new Request(ge.origin,{method:"POST",body:e});return(await t.arrayBuffer()).byteLength}return W.isArrayBufferView(e)||W.isArrayBuffer(e)?e.byteLength:(W.isURLSearchParams(e)&&(e+=""),W.isString(e)?(await Ke(e)).byteLength:void 0)})(t):n})(u,r))){let e,n=new Request(t,{method:"POST",body:r,duplex:"half"});if(W.isFormData(r)&&(e=n.headers.get("content-type"))&&u.setContentType(e),n.body){const[e,t]=Ne(g,Ce(Pe(c)));r=ze(n.body,65536,e,t)}}W.isString(d)||(d=d?"include":"omit");const s="credentials"in Request.prototype;p=new Request(t,{...f,signal:h,method:n.toUpperCase(),headers:u.normalize().toJSON(),body:r,duplex:"half",credentials:s?d:void 0});let i=await fetch(p);const o=Qe&&("stream"===l||"response"===l);if(Qe&&(a||o&&m)){const e={};["status","statusText","headers"].forEach((t=>{e[t]=i[t]}));const t=W.toFiniteNumber(i.headers.get("content-length")),[n,r]=a&&Ne(t,Ce(Pe(a),!0))||[];i=new Response(ze(i.body,65536,n,(()=>{r&&r(),m&&m()})),e)}l=l||"text";let b=await Ze[W.findKey(Ze,l)||"text"](i,e);return!o&&m&&m(),await new Promise(((t,n)=>{je(t,n,{data:b,headers:Te.from(i.headers),status:i.status,statusText:i.statusText,config:e,request:p})}))}catch(t){if(m&&m(),t&&"TypeError"===t.name&&/fetch/i.test(t.message))throw Object.assign(new X("Network Error",X.ERR_NETWORK,e,p),{cause:t.cause||t});throw X.from(t,t&&t.code,e,p)}})};W.forEach(et,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));const tt=e=>`- ${e}`,nt=e=>W.isFunction(e)||null===e||!1===e,rt=e=>{e=W.isArray(e)?e:[e];const{length:t}=e;let n,r;const s={};for(let i=0;i<t;i++){let t;if(n=e[i],r=n,!nt(n)&&(r=et[(t=String(n)).toLowerCase()],void 0===r))throw new X(`Unknown adapter '${t}'`);if(r)break;s[t||"#"+i]=r}if(!r){const e=Object.entries(s).map((([e,t])=>`adapter ${e} `+(!1===t?"is not supported by the environment":"is not available in the build")));let n=t?e.length>1?"since :\n"+e.map(tt).join("\n"):" "+tt(e[0]):"as no adapter specified";throw new X("There is no suitable adapter to dispatch the request "+n,"ERR_NOT_SUPPORT")}return r};function st(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new xe(null,e)}function it(e){return st(e),e.headers=Te.from(e.headers),e.data=ke.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),rt(e.adapter||we.adapter)(e).then((function(t){return st(e),t.data=ke.call(e,e.transformResponse,t),t.headers=Te.from(t.headers),t}),(function(t){return Ae(t)||(st(e),t&&t.response&&(t.response.data=ke.call(e,e.transformResponse,t.response),t.response.headers=Te.from(t.response.headers))),Promise.reject(t)}))}const ot={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{ot[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));const at={};ot.transitional=function(e,t,n){function r(e,t){return"[Axios v1.7.9] Transitional option '"+e+"'"+t+(n?". "+n:"")}return(n,s,i)=>{if(!1===e)throw new X(r(s," has been removed"+(t?" in "+t:"")),X.ERR_DEPRECATED);return t&&!at[s]&&(at[s]=!0,console.warn(r(s," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,s,i)}},ot.spelling=function(e){return(t,n)=>(console.warn(`${n} is likely a misspelling of ${e}`),!0)};const ct={assertOptions:function(e,t,n){if("object"!=typeof e)throw new X("options must be an object",X.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let s=r.length;for(;s-- >0;){const i=r[s],o=t[i];if(o){const t=e[i],n=void 0===t||o(t,i,e);if(!0!==n)throw new X("option "+i+" must be "+n,X.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new X("Unknown option "+i,X.ERR_BAD_OPTION)}},validators:ot},lt=ct.validators;class ut{constructor(e){this.defaults=e,this.interceptors={request:new ce,response:new ce}}async request(e,t){try{return await this._request(e,t)}catch(e){if(e instanceof Error){let t={};Error.captureStackTrace?Error.captureStackTrace(t):t=new Error;const n=t.stack?t.stack.replace(/^.+\n/,""):"";try{e.stack?n&&!String(e.stack).endsWith(n.replace(/^.+\n.+\n/,""))&&(e.stack+="\n"+n):e.stack=n}catch(e){}}throw e}}_request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=qe(this.defaults,t);const{transitional:n,paramsSerializer:r,headers:s}=t;void 0!==n&&ct.assertOptions(n,{silentJSONParsing:lt.transitional(lt.boolean),forcedJSONParsing:lt.transitional(lt.boolean),clarifyTimeoutError:lt.transitional(lt.boolean)},!1),null!=r&&(W.isFunction(r)?t.paramsSerializer={serialize:r}:ct.assertOptions(r,{encode:lt.function,serialize:lt.function},!0)),ct.assertOptions(t,{baseUrl:lt.spelling("baseURL"),withXsrfToken:lt.spelling("withXSRFToken")},!0),t.method=(t.method||this.defaults.method||"get").toLowerCase();let i=s&&W.merge(s.common,s[t.method]);s&&W.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete s[e]})),t.headers=Te.concat(i,s);const o=[];let a=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(a=a&&e.synchronous,o.unshift(e.fulfilled,e.rejected))}));const c=[];let l;this.interceptors.response.forEach((function(e){c.push(e.fulfilled,e.rejected)}));let u,d=0;if(!a){const e=[it.bind(this),void 0];for(e.unshift.apply(e,o),e.push.apply(e,c),u=e.length,l=Promise.resolve(t);d<u;)l=l.then(e[d++],e[d++]);return l}u=o.length;let f=t;for(d=0;d<u;){const e=o[d++],t=o[d++];try{f=e(f)}catch(e){t.call(this,e);break}}try{l=it.call(this,f)}catch(e){return Promise.reject(e)}for(d=0,u=c.length;d<u;)l=l.then(c[d++],c[d++]);return l}getUri(e){return ae(De((e=qe(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}W.forEach(["delete","get","head","options"],(function(e){ut.prototype[e]=function(t,n){return this.request(qe(n||{},{method:e,url:t,data:(n||{}).data}))}})),W.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,s){return this.request(qe(s||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}ut.prototype[e]=t(),ut.prototype[e+"Form"]=t(!0)}));const dt=ut;class ft{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const n=this;this.promise.then((e=>{if(!n._listeners)return;let t=n._listeners.length;for(;t-- >0;)n._listeners[t](e);n._listeners=null})),this.promise.then=e=>{let t;const r=new Promise((e=>{n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e,r,s){n.reason||(n.reason=new xe(e,r,s),t(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}toAbortSignal(){const e=new AbortController,t=t=>{e.abort(t)};return this.subscribe(t),e.signal.unsubscribe=()=>this.unsubscribe(t),e.signal}static source(){let e;return{token:new ft((function(t){e=t})),cancel:e}}}const pt=ft,ht={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(ht).forEach((([e,t])=>{ht[t]=e}));const mt=ht,gt=function e(n){const r=new dt(n),s=t(dt.prototype.request,r);return W.extend(s,dt.prototype,r,{allOwnKeys:!0}),W.extend(s,r,null,{allOwnKeys:!0}),s.create=function(t){return e(qe(n,t))},s}(we);gt.Axios=dt,gt.CanceledError=xe,gt.CancelToken=pt,gt.isCancel=Ae,gt.VERSION="1.7.9",gt.toFormData=te,gt.AxiosError=X,gt.Cancel=gt.CanceledError,gt.all=function(e){return Promise.all(e)},gt.spread=function(e){return function(t){return e.apply(null,t)}},gt.isAxiosError=function(e){return W.isObject(e)&&!0===e.isAxiosError},gt.mergeConfig=qe,gt.AxiosHeaders=Te,gt.formToJSON=e=>be(W.isHTMLForm(e)?new FormData(e):e),gt.getAdapter=rt,gt.HttpStatusCode=mt,gt.default=gt;const bt=gt;class yt{constructor(e){this.query=e}async doSearch(e){try{let e=await bt("https://forkify-api.herokuapp.com/api/search?q="+this.query);return this.result=e.data.recipes,this.result}catch(e){console.log("Асуудал гарлаа : "+e)}}}const wt={searchForm:document.querySelector(".search"),searchInput:document.querySelector(".search__field"),searchResultList:document.querySelector(".results__list"),searchResultDiv:document.querySelector(".results"),pageButtons:document.querySelector(".results__pages"),recipeDiv:document.querySelector(".recipe"),shoppingBasket:document.querySelector(".shopping__list"),likesMune:document.querySelector(".likes__field"),likesListMune:document.querySelector(".likes__list")},_t="loader",vt=e=>{const t=`\n   <div class="${_t}">\n                    <svg>\n                        <use href="img/icons.svg#icon-cw"</use>\n                    </svg>\n                </div>\n                `;e.insertAdjacentHTML("afterbegin",t)},Et=()=>{const e=document.querySelector(`.${_t}`);e&&e.parentElement.removeChild(e)},St=()=>{wt.searchResultList.innerHTML="",wt.pageButtons.innerHTML=""},Rt=(e,t=1,n=10)=>{const r=(t-1)*n,s=t*n;e.slice(r,s).forEach((e=>(e=>{const t=`\n       <li>\n                    <a class="results__link" href="#${e.recipe_id}">\n                        <figure class="results__fig">\n                            <img src="${e.image_url}" alt="Test">\n                        </figure>\n                        <div class="results__data">\n                            <h4 class="results__name">${e.title}</h4>\n                            <p class="results__author">${e.publisher}</p>\n                        </div>\n                    </a>\n                </li>\n    `;wt.searchResultList.insertAdjacentHTML("beforeend",t)})(e)));const i=Math.ceil(e.length/n);Tt(t,i)},Ot=(e,t,n)=>`\n     <button class="btn-inline results__btn--${t}" data-goto = ${e}>\n     <span>Хуудас ${e}</span>\n                    <svg class="search__icon">\n                        <use href="img/icons.svg#icon-triangle-${n}"></use>\n                    </svg>\n     </button>\n`,Tt=(e,t)=>{let n;1===e&&t>1?n=Ot(2,"next","right"):e<t?(n=Ot(e-1,"prev","left"),n+=Ot(e+1,"next","right")):e===t&&(n=Ot(e-1,"prev","left")),wt.pageButtons.insertAdjacentHTML("afterbegin",n)};class kt{constructor(e){this.id=e}async getRecipe(){const e=await bt("https://forkify-api.herokuapp.com/api/get?rId="+this.id);this.image_url=e.data.recipe.image_url,this.ingredients=e.data.recipe.ingredients,this.publisher=e.data.recipe.publisher,this.publisher_url=e.data.recipe.publisher_url,this.recipe_id=e.data.recipe.recipe_id,this.title=e.data.recipe.title,this.social_rank=e.data.recipe.social_rank,this.source_url=e.data.recipe.source_url}calcTime(){this.time=5*this.ingredients.length}calcHuniiToo(){this.huniiToo=4}}var At=n(797),Lt=n.n(At);class xt{constructor(){this.items=[]}deleteItem(e){const t=this.items.findIndex((t=>t.id===e));this.items.splice(t,1)}addItem(e){let t={id:Lt()(),item:e};return this.items.push(t),t}}class jt{constructor(){this.readDataFromLocalStorage(),this.likes||(this.likes=[])}addLike(e,t,n,r){const s={id:e,title:t,publisher:n,img:r};return this.likes.push(s),this.savedataToLocalStorage(),s}deleteLike(e){const t=this.likes.findIndex((t=>t.id===e));this.likes.splice(t,1),this.savedataToLocalStorage()}isLiked(e){return-1!==this.likes.findIndex((t=>t.id===e))}getNumberOfLikes(){return this.likes.length}savedataToLocalStorage(){localStorage.setItem("likes",JSON.stringify(this.likes))}readDataFromLocalStorage(){this.likes=JSON.parse(localStorage.getItem("likes"))}}const Ct=e=>{const t=e?"icon-heart":"icon-heart-outlined";document.querySelector(".recipe__love use").setAttribute("href",`\n    img/icons.svg#${t}\n    `)},Nt=e=>{wt.likesMune.style.visibility=e>0?"visible":"hidden"},Pt=e=>{const t=`\n <li>\n                    <a class="likes__link" href="#${e.id}">\n                        <figure class="likes__fig">\n                            <img src="${e.img}" alt="Test">\n                        </figure>\n                        <div class="likes__data">\n                            <h4 class="likes__name">${e.title}</h4>\n                            <p class="likes__author">${e.publisher}</p>\n                        </div>\n                    </a>\n                </li>\n`,n=document.createElement("div");n.innerHTML=t;const r=n.firstElementChild;wt.likesListMune.insertAdjacentElement("beforeend",r)},Bt={};wt.searchForm.addEventListener("submit",(e=>{e.preventDefault(),(async()=>{const e=wt.searchInput.value;e&&(Bt.search=new yt(e),wt.searchInput.value="",St(),vt(wt.searchResultDiv),await Bt.search.doSearch(),Et(),void 0===Bt.search.result?alert("Хайлтаар ийм илэрц алга!"):Rt(Bt.search.result))})()})),wt.pageButtons.addEventListener("click",(e=>{const t=e.target.closest(".btn-inline");if(t){const e=parseInt(t.dataset.goto,10);St(),Rt(Bt.search.result,e)}}));const Ft=async()=>{const e=window.location.hash.replace("#","");e&&(Bt.recipe=new kt(e),wt.recipeDiv.innerHTML="",vt(wt.recipeDiv),(e=>{Array.from(document.querySelectorAll(".results__link")).forEach((e=>e.classList.remove("results__link--active")));const t=document.querySelector(`.results__link[href*="${e}"]`);t&&t.classList.add("results__link--active")})(e),await Bt.recipe.getRecipe(),Et(),Bt.recipe.calcTime(),Bt.recipe.calcHuniiToo(),((e,t)=>{const n=`\n\n <figure class="recipe__fig">\n                <img src="${e.image_url}" alt="${e.title}" class="recipe__img">\n                <h1 class="recipe__title">\n                    <span>${e.title}</span>\n                </h1>\n            </figure>\n            <div class="recipe__details">\n                <div class="recipe__info">\n                    <svg class="recipe__info-icon">\n                        <use href="img/icons.svg#icon-stopwatch"></use>\n                    </svg>\n                    <span class="recipe__info-data recipe__info-data--minutes">${e.time}</span>\n                    <span class="recipe__info-text"> минут </span>\n                </div>\n                <div class="recipe__info">\n                    <svg class="recipe__info-icon">\n                        <use href="img/icons.svg#icon-man"></use>\n                    </svg>\n                    <span class="recipe__info-data recipe__info-data--people">${e.huniiToo}</span>\n                    <span class="recipe__info-text"> хүний орц</span>\n\n                    <div class="recipe__info-buttons">\n                        <button class="btn-tiny">\n                            <svg>\n                                <use href="img/icons.svg#icon-circle-with-minus"></use>\n                            </svg>\n                        </button>\n                        <button class="btn-tiny">\n                            <svg>\n                                <use href="img/icons.svg#icon-circle-with-plus"></use>\n                            </svg>\n                        </button>\n                    </div>\n\n                </div>\n                <button class="recipe__love">\n                    <svg class="header__likes">\n                        <use href="img/icons.svg#icon-heart${t?"":"-outlined"}"></use>\n                    </svg>\n                </button>\n            </div>\n\n\n\n            <div class="recipe__ingredients">\n                <ul class="recipe__ingredient-list">\n                ${e.ingredients.map((e=>`\n     <li class="recipe__item">\n                        <svg class="recipe__icon">\n                            <use href="img/icons.svg#icon-check"></use>\n                        </svg>\n                       \n                        <div class="recipe__ingredient">\n            \n                            ${e}\n                        </div>\n                    </li>\n    \n    `)).join("")}\n\n            \n                </ul>\n\n                <button class="btn-small recipe__btn">\n                    <svg class="search__icon">\n                        <use href="img/icons.svg#icon-shopping-cart"></use>\n                    </svg>\n                    <span>САГСАНД ХИЙХ</span>\n                </button>\n            </div>\n\n            <div class="recipe__directions">\n                <h2 class="heading-2">Хэрхэн бэлтгэх вэ</h2>\n                <p class="recipe__directions-text">\n                    Жорыг бэлтгэж оруулсан\n                    <span class="recipe__by">${e.publisher}</span>. Манай вэб сайтаас жорын зааврыг авна уу\n                </p>\n                <a class="btn-small recipe__btn" href="${e.source_url}" target="_blank">\n                    <span>ЗААВАР ҮЗЭХ</span>\n                    <svg class="search__icon">\n                        <use href="img/icons.svg#icon-triangle-right"></use>\n                    </svg>\n\n                </a>\n            </div>\n`;wt.recipeDiv.insertAdjacentHTML("afterBegin",n)})(Bt.recipe,Bt.likes.isLiked(e)))};["hashchange","load"].forEach((e=>window.addEventListener(e,Ft))),window.addEventListener("load",(e=>{Bt.likes||(Bt.likes=new jt),Nt(Bt.likes.getNumberOfLikes()),Bt.likes.likes.forEach((e=>Pt(e)))}));wt.recipeDiv.addEventListener("click",(e=>{e.target.matches(".recipe__btn, .recipe__btn * ")?(Bt.basket=new xt,window.tt=Bt.basket,wt.shoppingBasket.innerHTML="",Bt.recipe.ingredients.forEach((e=>{(e=>{const t=`\n          <li class="shopping__item" data-itemId = ${e.id}>\n                    <p class="shopping__description">${e.item}</p>\n                    <button class="shopping__delete btn-tiny">\n                        <svg>\n                            <use href="img/icons.svg#icon-circle-with-cross"></use>\n                        </svg>\n                    </button>\n            </li>  \n\n\n\n   `,n=document.createElement("div");n.innerHTML=t;const r=n.firstElementChild;wt.shoppingBasket.insertAdjacentElement("beforeend",r)})(Bt.basket.addItem(e))}))):e.target.matches(".recipe__love, .recipe__love *")&&(()=>{Bt.likes||(Bt.likes=new jt);const e=Bt.recipe.id;if(Bt.likes.isLiked(e))Bt.likes.deleteLike(e),(e=>{const t=document.querySelector(`.likes__link[href*="${e}"]`).parentElement;t&&t.parentElement.removeChild(t)})(e),Ct(!1);else{const t=Bt.likes.addLike(e,Bt.recipe.tiitle,Bt.recipe.publisher,Bt.recipe.image_url);Pt(t),Ct(!0)}Nt(Bt.likes.getNumberOfLikes())})()})),wt.shoppingBasket.addEventListener("click",(e=>{const t=e.target.closest(".shopping__item").dataset.itemid;Bt.basket.deleteItem(t),(e=>{const t=document.querySelector(`[data-itemid='${e}']`);t.parentElement.removeChild(t)})(t)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QVN1YyxjQUFjLGlCQUFpQmxkLE9BU25EcWdCLEVBQUtwQyxjQUFjQyxZQUFZbUMsRUFBSSxFRitObEMsQ0FBc0JyZ0IsRUFBRyxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVjaXBlLy4vbm9kZV9tb2R1bGVzL3VuaXFpZC9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWNpcGUvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vcmVjaXBlL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3JlY2lwZS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vcmVjaXBlL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vcmVjaXBlL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vcmVjaXBlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly9yZWNpcGUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3NFcnJvci5qcyIsIndlYnBhY2s6Ly9yZWNpcGUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly9yZWNpcGUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvQXhpb3NVUkxTZWFyY2hQYXJhbXMuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovL3JlY2lwZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy90cmFuc2l0aW9uYWwuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9icm93c2VyL2luZGV4LmpzIiwid2VicGFjazovL3JlY2lwZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9jbGFzc2VzL1VSTFNlYXJjaFBhcmFtcy5qcyIsIndlYnBhY2s6Ly9yZWNpcGUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvY2xhc3Nlcy9Gb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly9yZWNpcGUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvY2xhc3Nlcy9CbG9iLmpzIiwid2VicGFjazovL3JlY2lwZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vY29tbW9uL3V0aWxzLmpzIiwid2VicGFjazovL3JlY2lwZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVjaXBlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Zvcm1EYXRhVG9KU09OLmpzIiwid2VicGFjazovL3JlY2lwZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVjaXBlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3RvVVJMRW5jb2RlZEZvcm0uanMiLCJ3ZWJwYWNrOi8vcmVjaXBlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly9yZWNpcGUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3NIZWFkZXJzLmpzIiwid2VicGFjazovL3JlY2lwZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwid2VicGFjazovL3JlY2lwZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovL3JlY2lwZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIndlYnBhY2s6Ly9yZWNpcGUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3BlZWRvbWV0ZXIuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3Byb2dyZXNzRXZlbnRSZWR1Y2VyLmpzIiwid2VicGFjazovL3JlY2lwZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy90aHJvdHRsZS5qcyIsIndlYnBhY2s6Ly9yZWNpcGUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwid2VicGFjazovL3JlY2lwZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovL3JlY2lwZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwid2VicGFjazovL3JlY2lwZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwid2VicGFjazovL3JlY2lwZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly9yZWNpcGUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3Jlc29sdmVDb25maWcuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlUHJvdG9jb2wuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbXBvc2VTaWduYWxzLmpzIiwid2VicGFjazovL3JlY2lwZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy90cmFja1N0cmVhbS5qcyIsIndlYnBhY2s6Ly9yZWNpcGUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL2ZldGNoLmpzIiwid2VicGFjazovL3JlY2lwZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMvYWRhcHRlcnMuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL251bGwuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly9yZWNpcGUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2Vudi9kYXRhLmpzIiwid2VicGFjazovL3JlY2lwZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy92YWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovL3JlY2lwZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovL3JlY2lwZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9IdHRwU3RhdHVzQ29kZS5qcyIsIndlYnBhY2s6Ly9yZWNpcGUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovL3JlY2lwZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyIsIndlYnBhY2s6Ly9yZWNpcGUvLi9zcmMvanMvbW9kZWwvU2VhcmNoLmpzIiwid2VicGFjazovL3JlY2lwZS8uL3NyYy9qcy92aWV3L2Jhc2UuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlLy4vc3JjL2pzL3ZpZXcvc2VhcmNoVmlldy5qcyIsIndlYnBhY2s6Ly9yZWNpcGUvLi9zcmMvanMvbW9kZWwvUmVjaXBlLmpzIiwid2VicGFjazovL3JlY2lwZS8uL3NyYy9qcy9tb2RlbC9CYXNrZXQuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlLy4vc3JjL2pzL21vZGVsL0xpa2UuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlLy4vc3JjL2pzL3ZpZXcvbGlrZXNWaWV3LmpzIiwid2VicGFjazovL3JlY2lwZS8uL3NyYy9qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWNpcGUvLi9zcmMvanMvdmlldy9yZWNpcGVWaWV3LmpzIiwid2VicGFjazovL3JlY2lwZS8uL3NyYy9qcy92aWV3L2Jhc2tldFZpZXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogXG4oVGhlIE1JVCBMaWNlbnNlKVxuQ29weXJpZ2h0IChjKSAyMDE0LTIwMjEgSGFsw6FzeiDDgWTDoW0gPGFkYW1AYWltZm9ybS5jb20+XG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbiovXG5cbi8vICBVbmlxdWUgSGV4YXRyaWRlY2ltYWwgSUQgR2VuZXJhdG9yXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLy8gIERlcGVuZGVuY2llc1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG52YXIgcGlkID0gdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MucGlkID8gcHJvY2Vzcy5waWQudG9TdHJpbmcoMzYpIDogJycgO1xudmFyIGFkZHJlc3MgPSAnJztcbmlmKHR5cGVvZiBfX3dlYnBhY2tfcmVxdWlyZV9fICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiByZXF1aXJlICE9PSAndW5kZWZpbmVkJyl7XG4gICAgdmFyIG1hYyA9ICcnLCBvcyA9IHJlcXVpcmUoJ29zJyk7IFxuICAgIGlmKG9zLm5ldHdvcmtJbnRlcmZhY2VzKSB2YXIgbmV0d29ya0ludGVyZmFjZXMgPSBvcy5uZXR3b3JrSW50ZXJmYWNlcygpO1xuICAgIGlmKG5ldHdvcmtJbnRlcmZhY2VzKXtcbiAgICAgICAgbG9vcDpcbiAgICAgICAgZm9yKGxldCBpbnRlcmZhY2Vfa2V5IGluIG5ldHdvcmtJbnRlcmZhY2VzKXtcbiAgICAgICAgICAgIGNvbnN0IG5ldHdvcmtJbnRlcmZhY2UgPSBuZXR3b3JrSW50ZXJmYWNlc1tpbnRlcmZhY2Vfa2V5XTtcbiAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IG5ldHdvcmtJbnRlcmZhY2UubGVuZ3RoO1xuICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICBpZihuZXR3b3JrSW50ZXJmYWNlW2ldICE9PSB1bmRlZmluZWQgJiYgbmV0d29ya0ludGVyZmFjZVtpXS5tYWMgJiYgbmV0d29ya0ludGVyZmFjZVtpXS5tYWMgIT0gJzAwOjAwOjAwOjAwOjAwOjAwJyl7XG4gICAgICAgICAgICAgICAgICAgIG1hYyA9IG5ldHdvcmtJbnRlcmZhY2VbaV0ubWFjOyBicmVhayBsb29wO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhZGRyZXNzID0gbWFjID8gcGFyc2VJbnQobWFjLnJlcGxhY2UoL1xcOnxcXEQrL2dpLCAnJykpLnRvU3RyaW5nKDM2KSA6ICcnIDtcbiAgICB9XG59IFxuXG4vLyAgRXhwb3J0c1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5tb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbihwcmVmaXgsIHN1ZmZpeCl7IHJldHVybiAocHJlZml4ID8gcHJlZml4IDogJycpICsgYWRkcmVzcyArIHBpZCArIG5vdygpLnRvU3RyaW5nKDM2KSArIChzdWZmaXggPyBzdWZmaXggOiAnJyk7IH1cbm1vZHVsZS5leHBvcnRzLnByb2Nlc3MgPSBmdW5jdGlvbihwcmVmaXgsIHN1ZmZpeCl7IHJldHVybiAocHJlZml4ID8gcHJlZml4IDogJycpICsgcGlkICsgbm93KCkudG9TdHJpbmcoMzYpICsgKHN1ZmZpeCA/IHN1ZmZpeCA6ICcnKTsgfVxubW9kdWxlLmV4cG9ydHMudGltZSAgICA9IGZ1bmN0aW9uKHByZWZpeCwgc3VmZml4KXsgcmV0dXJuIChwcmVmaXggPyBwcmVmaXggOiAnJykgKyBub3coKS50b1N0cmluZygzNikgKyAoc3VmZml4ID8gc3VmZml4IDogJycpOyB9XG5cbi8vICBIZWxwZXJzXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmZ1bmN0aW9uIG5vdygpe1xuICAgIHZhciB0aW1lID0gRGF0ZS5ub3coKTtcbiAgICB2YXIgbGFzdCA9IG5vdy5sYXN0IHx8IHRpbWU7XG4gICAgcmV0dXJuIG5vdy5sYXN0ID0gdGltZSA+IGxhc3QgPyB0aW1lIDogbGFzdCArIDE7XG59XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmd1bWVudHMpO1xuICB9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgYmluZCBmcm9tICcuL2hlbHBlcnMvYmluZC5qcyc7XG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbmNvbnN0IHt0b1N0cmluZ30gPSBPYmplY3QucHJvdG90eXBlO1xuY29uc3Qge2dldFByb3RvdHlwZU9mfSA9IE9iamVjdDtcblxuY29uc3Qga2luZE9mID0gKGNhY2hlID0+IHRoaW5nID0+IHtcbiAgICBjb25zdCBzdHIgPSB0b1N0cmluZy5jYWxsKHRoaW5nKTtcbiAgICByZXR1cm4gY2FjaGVbc3RyXSB8fCAoY2FjaGVbc3RyXSA9IHN0ci5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKSk7XG59KShPYmplY3QuY3JlYXRlKG51bGwpKTtcblxuY29uc3Qga2luZE9mVGVzdCA9ICh0eXBlKSA9PiB7XG4gIHR5cGUgPSB0eXBlLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiAodGhpbmcpID0+IGtpbmRPZih0aGluZykgPT09IHR5cGVcbn1cblxuY29uc3QgdHlwZU9mVGVzdCA9IHR5cGUgPT4gdGhpbmcgPT4gdHlwZW9mIHRoaW5nID09PSB0eXBlO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3Qge2lzQXJyYXl9ID0gQXJyYXk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNVbmRlZmluZWQgPSB0eXBlT2ZUZXN0KCd1bmRlZmluZWQnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsKSAmJiB2YWwuY29uc3RydWN0b3IgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbC5jb25zdHJ1Y3RvcilcbiAgICAmJiBpc0Z1bmN0aW9uKHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcikgJiYgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNBcnJheUJ1ZmZlciA9IGtpbmRPZlRlc3QoJ0FycmF5QnVmZmVyJyk7XG5cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICBsZXQgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmIChpc0FycmF5QnVmZmVyKHZhbC5idWZmZXIpKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzU3RyaW5nID0gdHlwZU9mVGVzdCgnc3RyaW5nJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGdW5jdGlvbiA9IHR5cGVPZlRlc3QoJ2Z1bmN0aW9uJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNOdW1iZXIgPSB0eXBlT2ZUZXN0KCdudW1iZXInKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHRoaW5nIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNPYmplY3QgPSAodGhpbmcpID0+IHRoaW5nICE9PSBudWxsICYmIHR5cGVvZiB0aGluZyA9PT0gJ29iamVjdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCb29sZWFuXG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCb29sZWFuLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNCb29sZWFuID0gdGhpbmcgPT4gdGhpbmcgPT09IHRydWUgfHwgdGhpbmcgPT09IGZhbHNlO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzUGxhaW5PYmplY3QgPSAodmFsKSA9PiB7XG4gIGlmIChraW5kT2YodmFsKSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBwcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZih2YWwpO1xuICByZXR1cm4gKHByb3RvdHlwZSA9PT0gbnVsbCB8fCBwcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGUgfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvdHlwZSkgPT09IG51bGwpICYmICEoU3ltYm9sLnRvU3RyaW5nVGFnIGluIHZhbCkgJiYgIShTeW1ib2wuaXRlcmF0b3IgaW4gdmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRGF0ZSA9IGtpbmRPZlRlc3QoJ0RhdGUnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRmlsZSA9IGtpbmRPZlRlc3QoJ0ZpbGUnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQmxvYiA9IGtpbmRPZlRlc3QoJ0Jsb2InKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVMaXN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0ZpbGVMaXN0ID0ga2luZE9mVGVzdCgnRmlsZUxpc3QnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1N0cmVhbSA9ICh2YWwpID0+IGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRm9ybURhdGEgPSAodGhpbmcpID0+IHtcbiAgbGV0IGtpbmQ7XG4gIHJldHVybiB0aGluZyAmJiAoXG4gICAgKHR5cGVvZiBGb3JtRGF0YSA9PT0gJ2Z1bmN0aW9uJyAmJiB0aGluZyBpbnN0YW5jZW9mIEZvcm1EYXRhKSB8fCAoXG4gICAgICBpc0Z1bmN0aW9uKHRoaW5nLmFwcGVuZCkgJiYgKFxuICAgICAgICAoa2luZCA9IGtpbmRPZih0aGluZykpID09PSAnZm9ybWRhdGEnIHx8XG4gICAgICAgIC8vIGRldGVjdCBmb3JtLWRhdGEgaW5zdGFuY2VcbiAgICAgICAgKGtpbmQgPT09ICdvYmplY3QnICYmIGlzRnVuY3Rpb24odGhpbmcudG9TdHJpbmcpICYmIHRoaW5nLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IEZvcm1EYXRhXScpXG4gICAgICApXG4gICAgKVxuICApXG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1VSTFNlYXJjaFBhcmFtcyA9IGtpbmRPZlRlc3QoJ1VSTFNlYXJjaFBhcmFtcycpO1xuXG5jb25zdCBbaXNSZWFkYWJsZVN0cmVhbSwgaXNSZXF1ZXN0LCBpc1Jlc3BvbnNlLCBpc0hlYWRlcnNdID0gWydSZWFkYWJsZVN0cmVhbScsICdSZXF1ZXN0JywgJ1Jlc3BvbnNlJywgJ0hlYWRlcnMnXS5tYXAoa2luZE9mVGVzdCk7XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmNvbnN0IHRyaW0gPSAoc3RyKSA9PiBzdHIudHJpbSA/XG4gIHN0ci50cmltKCkgOiBzdHIucmVwbGFjZSgvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csICcnKTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FsbE93bktleXMgPSBmYWxzZV1cbiAqIEByZXR1cm5zIHthbnl9XG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbiwge2FsbE93bktleXMgPSBmYWxzZX0gPSB7fSkge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBpO1xuICBsZXQgbDtcblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAoaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgY29uc3Qga2V5cyA9IGFsbE93bktleXMgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopIDogT2JqZWN0LmtleXMob2JqKTtcbiAgICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgICBsZXQga2V5O1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kS2V5KG9iaiwga2V5KSB7XG4gIGtleSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgbGV0IF9rZXk7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgX2tleSA9IGtleXNbaV07XG4gICAgaWYgKGtleSA9PT0gX2tleS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICByZXR1cm4gX2tleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmNvbnN0IF9nbG9iYWwgPSAoKCkgPT4ge1xuICAvKmVzbGludCBuby11bmRlZjowKi9cbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSBcInVuZGVmaW5lZFwiKSByZXR1cm4gZ2xvYmFsVGhpcztcbiAgcmV0dXJuIHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbClcbn0pKCk7XG5cbmNvbnN0IGlzQ29udGV4dERlZmluZWQgPSAoY29udGV4dCkgPT4gIWlzVW5kZWZpbmVkKGNvbnRleHQpICYmIGNvbnRleHQgIT09IF9nbG9iYWw7XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgY29uc3Qge2Nhc2VsZXNzfSA9IGlzQ29udGV4dERlZmluZWQodGhpcykgJiYgdGhpcyB8fCB7fTtcbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIGNvbnN0IGFzc2lnblZhbHVlID0gKHZhbCwga2V5KSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0S2V5ID0gY2FzZWxlc3MgJiYgZmluZEtleShyZXN1bHQsIGtleSkgfHwga2V5O1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHJlc3VsdFt0YXJnZXRLZXldKSAmJiBpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gbWVyZ2UocmVzdWx0W3RhcmdldEtleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gbWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gdmFsLnNsaWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGFyZ3VtZW50c1tpXSAmJiBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFthbGxPd25LZXlzXVxuICogQHJldHVybnMge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5jb25zdCBleHRlbmQgPSAoYSwgYiwgdGhpc0FyZywge2FsbE93bktleXN9PSB7fSkgPT4ge1xuICBmb3JFYWNoKGIsICh2YWwsIGtleSkgPT4ge1xuICAgIGlmICh0aGlzQXJnICYmIGlzRnVuY3Rpb24odmFsKSkge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9LCB7YWxsT3duS2V5c30pO1xuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYnl0ZSBvcmRlciBtYXJrZXIuIFRoaXMgY2F0Y2hlcyBFRiBCQiBCRiAodGhlIFVURi04IEJPTSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCB3aXRoIEJPTVxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGNvbnRlbnQgdmFsdWUgd2l0aG91dCBCT01cbiAqL1xuY29uc3Qgc3RyaXBCT00gPSAoY29udGVudCkgPT4ge1xuICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn1cblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge29iamVjdH0gW3Byb3BzXVxuICogQHBhcmFtIHtvYmplY3R9IFtkZXNjcmlwdG9yc11cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuY29uc3QgaW5oZXJpdHMgPSAoY29uc3RydWN0b3IsIHN1cGVyQ29uc3RydWN0b3IsIHByb3BzLCBkZXNjcmlwdG9ycykgPT4ge1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ29uc3RydWN0b3IucHJvdG90eXBlLCBkZXNjcmlwdG9ycyk7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29uc3RydWN0b3IsICdzdXBlcicsIHtcbiAgICB2YWx1ZTogc3VwZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGVcbiAgfSk7XG4gIHByb3BzICYmIE9iamVjdC5hc3NpZ24oY29uc3RydWN0b3IucHJvdG90eXBlLCBwcm9wcyk7XG59XG5cbi8qKlxuICogUmVzb2x2ZSBvYmplY3Qgd2l0aCBkZWVwIHByb3RvdHlwZSBjaGFpbiB0byBhIGZsYXQgb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlT2JqIHNvdXJjZSBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBbZGVzdE9ial1cbiAqIEBwYXJhbSB7RnVuY3Rpb258Qm9vbGVhbn0gW2ZpbHRlcl1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcm9wRmlsdGVyXVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbmNvbnN0IHRvRmxhdE9iamVjdCA9IChzb3VyY2VPYmosIGRlc3RPYmosIGZpbHRlciwgcHJvcEZpbHRlcikgPT4ge1xuICBsZXQgcHJvcHM7XG4gIGxldCBpO1xuICBsZXQgcHJvcDtcbiAgY29uc3QgbWVyZ2VkID0ge307XG5cbiAgZGVzdE9iaiA9IGRlc3RPYmogfHwge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICBpZiAoc291cmNlT2JqID09IG51bGwpIHJldHVybiBkZXN0T2JqO1xuXG4gIGRvIHtcbiAgICBwcm9wcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZU9iaik7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgcHJvcCA9IHByb3BzW2ldO1xuICAgICAgaWYgKCghcHJvcEZpbHRlciB8fCBwcm9wRmlsdGVyKHByb3AsIHNvdXJjZU9iaiwgZGVzdE9iaikpICYmICFtZXJnZWRbcHJvcF0pIHtcbiAgICAgICAgZGVzdE9ialtwcm9wXSA9IHNvdXJjZU9ialtwcm9wXTtcbiAgICAgICAgbWVyZ2VkW3Byb3BdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc291cmNlT2JqID0gZmlsdGVyICE9PSBmYWxzZSAmJiBnZXRQcm90b3R5cGVPZihzb3VyY2VPYmopO1xuICB9IHdoaWxlIChzb3VyY2VPYmogJiYgKCFmaWx0ZXIgfHwgZmlsdGVyKHNvdXJjZU9iaiwgZGVzdE9iaikpICYmIHNvdXJjZU9iaiAhPT0gT2JqZWN0LnByb3RvdHlwZSk7XG5cbiAgcmV0dXJuIGRlc3RPYmo7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgc3RyaW5nIGVuZHMgd2l0aCB0aGUgY2hhcmFjdGVycyBvZiBhIHNwZWNpZmllZCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VhcmNoU3RyaW5nXG4gKiBAcGFyYW0ge051bWJlcn0gW3Bvc2l0aW9uPSAwXVxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5jb25zdCBlbmRzV2l0aCA9IChzdHIsIHNlYXJjaFN0cmluZywgcG9zaXRpb24pID0+IHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkIHx8IHBvc2l0aW9uID4gc3RyLmxlbmd0aCkge1xuICAgIHBvc2l0aW9uID0gc3RyLmxlbmd0aDtcbiAgfVxuICBwb3NpdGlvbiAtPSBzZWFyY2hTdHJpbmcubGVuZ3RoO1xuICBjb25zdCBsYXN0SW5kZXggPSBzdHIuaW5kZXhPZihzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKTtcbiAgcmV0dXJuIGxhc3RJbmRleCAhPT0gLTEgJiYgbGFzdEluZGV4ID09PSBwb3NpdGlvbjtcbn1cblxuXG4vKipcbiAqIFJldHVybnMgbmV3IGFycmF5IGZyb20gYXJyYXkgbGlrZSBvYmplY3Qgb3IgbnVsbCBpZiBmYWlsZWRcbiAqXG4gKiBAcGFyYW0geyp9IFt0aGluZ11cbiAqXG4gKiBAcmV0dXJucyB7P0FycmF5fVxuICovXG5jb25zdCB0b0FycmF5ID0gKHRoaW5nKSA9PiB7XG4gIGlmICghdGhpbmcpIHJldHVybiBudWxsO1xuICBpZiAoaXNBcnJheSh0aGluZykpIHJldHVybiB0aGluZztcbiAgbGV0IGkgPSB0aGluZy5sZW5ndGg7XG4gIGlmICghaXNOdW1iZXIoaSkpIHJldHVybiBudWxsO1xuICBjb25zdCBhcnIgPSBuZXcgQXJyYXkoaSk7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgYXJyW2ldID0gdGhpbmdbaV07XG4gIH1cbiAgcmV0dXJuIGFycjtcbn1cblxuLyoqXG4gKiBDaGVja2luZyBpZiB0aGUgVWludDhBcnJheSBleGlzdHMgYW5kIGlmIGl0IGRvZXMsIGl0IHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiB0aGVcbiAqIHRoaW5nIHBhc3NlZCBpbiBpcyBhbiBpbnN0YW5jZSBvZiBVaW50OEFycmF5XG4gKlxuICogQHBhcmFtIHtUeXBlZEFycmF5fVxuICpcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbmNvbnN0IGlzVHlwZWRBcnJheSA9IChUeXBlZEFycmF5ID0+IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuIHRoaW5nID0+IHtcbiAgICByZXR1cm4gVHlwZWRBcnJheSAmJiB0aGluZyBpbnN0YW5jZW9mIFR5cGVkQXJyYXk7XG4gIH07XG59KSh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2V0UHJvdG90eXBlT2YoVWludDhBcnJheSkpO1xuXG4vKipcbiAqIEZvciBlYWNoIGVudHJ5IGluIHRoZSBvYmplY3QsIGNhbGwgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIGtleSBhbmQgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtPYmplY3Q8YW55LCBhbnk+fSBvYmogLSBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggZW50cnkuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmNvbnN0IGZvckVhY2hFbnRyeSA9IChvYmosIGZuKSA9PiB7XG4gIGNvbnN0IGdlbmVyYXRvciA9IG9iaiAmJiBvYmpbU3ltYm9sLml0ZXJhdG9yXTtcblxuICBjb25zdCBpdGVyYXRvciA9IGdlbmVyYXRvci5jYWxsKG9iaik7XG5cbiAgbGV0IHJlc3VsdDtcblxuICB3aGlsZSAoKHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKSkgJiYgIXJlc3VsdC5kb25lKSB7XG4gICAgY29uc3QgcGFpciA9IHJlc3VsdC52YWx1ZTtcbiAgICBmbi5jYWxsKG9iaiwgcGFpclswXSwgcGFpclsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBhbmQgYSBzdHJpbmcsIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIGFsbCB0aGUgbWF0Y2hlc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWdFeHAgLSBUaGUgcmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIGFnYWluc3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gVGhlIHN0cmluZyB0byBzZWFyY2guXG4gKlxuICogQHJldHVybnMge0FycmF5PGJvb2xlYW4+fVxuICovXG5jb25zdCBtYXRjaEFsbCA9IChyZWdFeHAsIHN0cikgPT4ge1xuICBsZXQgbWF0Y2hlcztcbiAgY29uc3QgYXJyID0gW107XG5cbiAgd2hpbGUgKChtYXRjaGVzID0gcmVnRXhwLmV4ZWMoc3RyKSkgIT09IG51bGwpIHtcbiAgICBhcnIucHVzaChtYXRjaGVzKTtcbiAgfVxuXG4gIHJldHVybiBhcnI7XG59XG5cbi8qIENoZWNraW5nIGlmIHRoZSBraW5kT2ZUZXN0IGZ1bmN0aW9uIHJldHVybnMgdHJ1ZSB3aGVuIHBhc3NlZCBhbiBIVE1MRm9ybUVsZW1lbnQuICovXG5jb25zdCBpc0hUTUxGb3JtID0ga2luZE9mVGVzdCgnSFRNTEZvcm1FbGVtZW50Jyk7XG5cbmNvbnN0IHRvQ2FtZWxDYXNlID0gc3RyID0+IHtcbiAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1stX1xcc10oW2EtelxcZF0pKFxcdyopL2csXG4gICAgZnVuY3Rpb24gcmVwbGFjZXIobSwgcDEsIHAyKSB7XG4gICAgICByZXR1cm4gcDEudG9VcHBlckNhc2UoKSArIHAyO1xuICAgIH1cbiAgKTtcbn07XG5cbi8qIENyZWF0aW5nIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGNoZWNrIGlmIGFuIG9iamVjdCBoYXMgYSBwcm9wZXJ0eS4gKi9cbmNvbnN0IGhhc093blByb3BlcnR5ID0gKCh7aGFzT3duUHJvcGVydHl9KSA9PiAob2JqLCBwcm9wKSA9PiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpKE9iamVjdC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgUmVnRXhwIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBSZWdFeHAgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNSZWdFeHAgPSBraW5kT2ZUZXN0KCdSZWdFeHAnKTtcblxuY29uc3QgcmVkdWNlRGVzY3JpcHRvcnMgPSAob2JqLCByZWR1Y2VyKSA9PiB7XG4gIGNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqKTtcbiAgY29uc3QgcmVkdWNlZERlc2NyaXB0b3JzID0ge307XG5cbiAgZm9yRWFjaChkZXNjcmlwdG9ycywgKGRlc2NyaXB0b3IsIG5hbWUpID0+IHtcbiAgICBsZXQgcmV0O1xuICAgIGlmICgocmV0ID0gcmVkdWNlcihkZXNjcmlwdG9yLCBuYW1lLCBvYmopKSAhPT0gZmFsc2UpIHtcbiAgICAgIHJlZHVjZWREZXNjcmlwdG9yc1tuYW1lXSA9IHJldCB8fCBkZXNjcmlwdG9yO1xuICAgIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMob2JqLCByZWR1Y2VkRGVzY3JpcHRvcnMpO1xufVxuXG4vKipcbiAqIE1ha2VzIGFsbCBtZXRob2RzIHJlYWQtb25seVxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICovXG5cbmNvbnN0IGZyZWV6ZU1ldGhvZHMgPSAob2JqKSA9PiB7XG4gIHJlZHVjZURlc2NyaXB0b3JzKG9iaiwgKGRlc2NyaXB0b3IsIG5hbWUpID0+IHtcbiAgICAvLyBza2lwIHJlc3RyaWN0ZWQgcHJvcHMgaW4gc3RyaWN0IG1vZGVcbiAgICBpZiAoaXNGdW5jdGlvbihvYmopICYmIFsnYXJndW1lbnRzJywgJ2NhbGxlcicsICdjYWxsZWUnXS5pbmRleE9mKG5hbWUpICE9PSAtMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbHVlID0gb2JqW25hbWVdO1xuXG4gICAgaWYgKCFpc0Z1bmN0aW9uKHZhbHVlKSkgcmV0dXJuO1xuXG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZmFsc2U7XG5cbiAgICBpZiAoJ3dyaXRhYmxlJyBpbiBkZXNjcmlwdG9yKSB7XG4gICAgICBkZXNjcmlwdG9yLndyaXRhYmxlID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFkZXNjcmlwdG9yLnNldCkge1xuICAgICAgZGVzY3JpcHRvci5zZXQgPSAoKSA9PiB7XG4gICAgICAgIHRocm93IEVycm9yKCdDYW4gbm90IHJld3JpdGUgcmVhZC1vbmx5IG1ldGhvZCBcXCcnICsgbmFtZSArICdcXCcnKTtcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbn1cblxuY29uc3QgdG9PYmplY3RTZXQgPSAoYXJyYXlPclN0cmluZywgZGVsaW1pdGVyKSA9PiB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuXG4gIGNvbnN0IGRlZmluZSA9IChhcnIpID0+IHtcbiAgICBhcnIuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICBvYmpbdmFsdWVdID0gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIGlzQXJyYXkoYXJyYXlPclN0cmluZykgPyBkZWZpbmUoYXJyYXlPclN0cmluZykgOiBkZWZpbmUoU3RyaW5nKGFycmF5T3JTdHJpbmcpLnNwbGl0KGRlbGltaXRlcikpO1xuXG4gIHJldHVybiBvYmo7XG59XG5cbmNvbnN0IG5vb3AgPSAoKSA9PiB7fVxuXG5jb25zdCB0b0Zpbml0ZU51bWJlciA9ICh2YWx1ZSwgZGVmYXVsdFZhbHVlKSA9PiB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIE51bWJlci5pc0Zpbml0ZSh2YWx1ZSA9ICt2YWx1ZSkgPyB2YWx1ZSA6IGRlZmF1bHRWYWx1ZTtcbn1cblxuY29uc3QgQUxQSEEgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonXG5cbmNvbnN0IERJR0lUID0gJzAxMjM0NTY3ODknO1xuXG5jb25zdCBBTFBIQUJFVCA9IHtcbiAgRElHSVQsXG4gIEFMUEhBLFxuICBBTFBIQV9ESUdJVDogQUxQSEEgKyBBTFBIQS50b1VwcGVyQ2FzZSgpICsgRElHSVRcbn1cblxuY29uc3QgZ2VuZXJhdGVTdHJpbmcgPSAoc2l6ZSA9IDE2LCBhbHBoYWJldCA9IEFMUEhBQkVULkFMUEhBX0RJR0lUKSA9PiB7XG4gIGxldCBzdHIgPSAnJztcbiAgY29uc3Qge2xlbmd0aH0gPSBhbHBoYWJldDtcbiAgd2hpbGUgKHNpemUtLSkge1xuICAgIHN0ciArPSBhbHBoYWJldFtNYXRoLnJhbmRvbSgpICogbGVuZ3RofDBdXG4gIH1cblxuICByZXR1cm4gc3RyO1xufVxuXG4vKipcbiAqIElmIHRoZSB0aGluZyBpcyBhIEZvcm1EYXRhIG9iamVjdCwgcmV0dXJuIHRydWUsIG90aGVyd2lzZSByZXR1cm4gZmFsc2UuXG4gKlxuICogQHBhcmFtIHt1bmtub3dufSB0aGluZyAtIFRoZSB0aGluZyB0byBjaGVjay5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNTcGVjQ29tcGxpYW50Rm9ybSh0aGluZykge1xuICByZXR1cm4gISEodGhpbmcgJiYgaXNGdW5jdGlvbih0aGluZy5hcHBlbmQpICYmIHRoaW5nW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdGb3JtRGF0YScgJiYgdGhpbmdbU3ltYm9sLml0ZXJhdG9yXSk7XG59XG5cbmNvbnN0IHRvSlNPTk9iamVjdCA9IChvYmopID0+IHtcbiAgY29uc3Qgc3RhY2sgPSBuZXcgQXJyYXkoMTApO1xuXG4gIGNvbnN0IHZpc2l0ID0gKHNvdXJjZSwgaSkgPT4ge1xuXG4gICAgaWYgKGlzT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIGlmIChzdGFjay5pbmRleE9mKHNvdXJjZSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmKCEoJ3RvSlNPTicgaW4gc291cmNlKSkge1xuICAgICAgICBzdGFja1tpXSA9IHNvdXJjZTtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gaXNBcnJheShzb3VyY2UpID8gW10gOiB7fTtcblxuICAgICAgICBmb3JFYWNoKHNvdXJjZSwgKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICBjb25zdCByZWR1Y2VkVmFsdWUgPSB2aXNpdCh2YWx1ZSwgaSArIDEpO1xuICAgICAgICAgICFpc1VuZGVmaW5lZChyZWR1Y2VkVmFsdWUpICYmICh0YXJnZXRba2V5XSA9IHJlZHVjZWRWYWx1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHN0YWNrW2ldID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIHJldHVybiB2aXNpdChvYmosIDApO1xufVxuXG5jb25zdCBpc0FzeW5jRm4gPSBraW5kT2ZUZXN0KCdBc3luY0Z1bmN0aW9uJyk7XG5cbmNvbnN0IGlzVGhlbmFibGUgPSAodGhpbmcpID0+XG4gIHRoaW5nICYmIChpc09iamVjdCh0aGluZykgfHwgaXNGdW5jdGlvbih0aGluZykpICYmIGlzRnVuY3Rpb24odGhpbmcudGhlbikgJiYgaXNGdW5jdGlvbih0aGluZy5jYXRjaCk7XG5cbi8vIG9yaWdpbmFsIGNvZGVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EaWdpdGFsQnJhaW5KUy9BeGlvc1Byb21pc2UvYmxvYi8xNmRlYWIxMzcxMGVjMDk3Nzk5MjIxMzFmM2ZhNTk1NDMyMGY4M2FiL2xpYi91dGlscy5qcyNMMTEtTDM0XG5cbmNvbnN0IF9zZXRJbW1lZGlhdGUgPSAoKHNldEltbWVkaWF0ZVN1cHBvcnRlZCwgcG9zdE1lc3NhZ2VTdXBwb3J0ZWQpID0+IHtcbiAgaWYgKHNldEltbWVkaWF0ZVN1cHBvcnRlZCkge1xuICAgIHJldHVybiBzZXRJbW1lZGlhdGU7XG4gIH1cblxuICByZXR1cm4gcG9zdE1lc3NhZ2VTdXBwb3J0ZWQgPyAoKHRva2VuLCBjYWxsYmFja3MpID0+IHtcbiAgICBfZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsICh7c291cmNlLCBkYXRhfSkgPT4ge1xuICAgICAgaWYgKHNvdXJjZSA9PT0gX2dsb2JhbCAmJiBkYXRhID09PSB0b2tlbikge1xuICAgICAgICBjYWxsYmFja3MubGVuZ3RoICYmIGNhbGxiYWNrcy5zaGlmdCgpKCk7XG4gICAgICB9XG4gICAgfSwgZmFsc2UpO1xuXG4gICAgcmV0dXJuIChjYikgPT4ge1xuICAgICAgY2FsbGJhY2tzLnB1c2goY2IpO1xuICAgICAgX2dsb2JhbC5wb3N0TWVzc2FnZSh0b2tlbiwgXCIqXCIpO1xuICAgIH1cbiAgfSkoYGF4aW9zQCR7TWF0aC5yYW5kb20oKX1gLCBbXSkgOiAoY2IpID0+IHNldFRpbWVvdXQoY2IpO1xufSkoXG4gIHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09ICdmdW5jdGlvbicsXG4gIGlzRnVuY3Rpb24oX2dsb2JhbC5wb3N0TWVzc2FnZSlcbik7XG5cbmNvbnN0IGFzYXAgPSB0eXBlb2YgcXVldWVNaWNyb3Rhc2sgIT09ICd1bmRlZmluZWQnID9cbiAgcXVldWVNaWNyb3Rhc2suYmluZChfZ2xvYmFsKSA6ICggdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MubmV4dFRpY2sgfHwgX3NldEltbWVkaWF0ZSk7XG5cbi8vICoqKioqKioqKioqKioqKioqKioqKlxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmcsXG4gIGlzTnVtYmVyLFxuICBpc0Jvb2xlYW4sXG4gIGlzT2JqZWN0LFxuICBpc1BsYWluT2JqZWN0LFxuICBpc1JlYWRhYmxlU3RyZWFtLFxuICBpc1JlcXVlc3QsXG4gIGlzUmVzcG9uc2UsXG4gIGlzSGVhZGVycyxcbiAgaXNVbmRlZmluZWQsXG4gIGlzRGF0ZSxcbiAgaXNGaWxlLFxuICBpc0Jsb2IsXG4gIGlzUmVnRXhwLFxuICBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzVHlwZWRBcnJheSxcbiAgaXNGaWxlTGlzdCxcbiAgZm9yRWFjaCxcbiAgbWVyZ2UsXG4gIGV4dGVuZCxcbiAgdHJpbSxcbiAgc3RyaXBCT00sXG4gIGluaGVyaXRzLFxuICB0b0ZsYXRPYmplY3QsXG4gIGtpbmRPZixcbiAga2luZE9mVGVzdCxcbiAgZW5kc1dpdGgsXG4gIHRvQXJyYXksXG4gIGZvckVhY2hFbnRyeSxcbiAgbWF0Y2hBbGwsXG4gIGlzSFRNTEZvcm0sXG4gIGhhc093blByb3BlcnR5LFxuICBoYXNPd25Qcm9wOiBoYXNPd25Qcm9wZXJ0eSwgLy8gYW4gYWxpYXMgdG8gYXZvaWQgRVNMaW50IG5vLXByb3RvdHlwZS1idWlsdGlucyBkZXRlY3Rpb25cbiAgcmVkdWNlRGVzY3JpcHRvcnMsXG4gIGZyZWV6ZU1ldGhvZHMsXG4gIHRvT2JqZWN0U2V0LFxuICB0b0NhbWVsQ2FzZSxcbiAgbm9vcCxcbiAgdG9GaW5pdGVOdW1iZXIsXG4gIGZpbmRLZXksXG4gIGdsb2JhbDogX2dsb2JhbCxcbiAgaXNDb250ZXh0RGVmaW5lZCxcbiAgQUxQSEFCRVQsXG4gIGdlbmVyYXRlU3RyaW5nLFxuICBpc1NwZWNDb21wbGlhbnRGb3JtLFxuICB0b0pTT05PYmplY3QsXG4gIGlzQXN5bmNGbixcbiAgaXNUaGVuYWJsZSxcbiAgc2V0SW1tZWRpYXRlOiBfc2V0SW1tZWRpYXRlLFxuICBhc2FwXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZ10gVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xuZnVuY3Rpb24gQXhpb3NFcnJvcihtZXNzYWdlLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIEVycm9yLmNhbGwodGhpcyk7XG5cbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zdGFjayA9IChuZXcgRXJyb3IoKSkuc3RhY2s7XG4gIH1cblxuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICB0aGlzLm5hbWUgPSAnQXhpb3NFcnJvcic7XG4gIGNvZGUgJiYgKHRoaXMuY29kZSA9IGNvZGUpO1xuICBjb25maWcgJiYgKHRoaXMuY29uZmlnID0gY29uZmlnKTtcbiAgcmVxdWVzdCAmJiAodGhpcy5yZXF1ZXN0ID0gcmVxdWVzdCk7XG4gIGlmIChyZXNwb25zZSkge1xuICAgIHRoaXMucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICB0aGlzLnN0YXR1cyA9IHJlc3BvbnNlLnN0YXR1cyA/IHJlc3BvbnNlLnN0YXR1cyA6IG51bGw7XG4gIH1cbn1cblxudXRpbHMuaW5oZXJpdHMoQXhpb3NFcnJvciwgRXJyb3IsIHtcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdXRpbHMudG9KU09OT2JqZWN0KHRoaXMuY29uZmlnKSxcbiAgICAgIGNvZGU6IHRoaXMuY29kZSxcbiAgICAgIHN0YXR1czogdGhpcy5zdGF0dXNcbiAgICB9O1xuICB9XG59KTtcblxuY29uc3QgcHJvdG90eXBlID0gQXhpb3NFcnJvci5wcm90b3R5cGU7XG5jb25zdCBkZXNjcmlwdG9ycyA9IHt9O1xuXG5bXG4gICdFUlJfQkFEX09QVElPTl9WQUxVRScsXG4gICdFUlJfQkFEX09QVElPTicsXG4gICdFQ09OTkFCT1JURUQnLFxuICAnRVRJTUVET1VUJyxcbiAgJ0VSUl9ORVRXT1JLJyxcbiAgJ0VSUl9GUl9UT09fTUFOWV9SRURJUkVDVFMnLFxuICAnRVJSX0RFUFJFQ0FURUQnLFxuICAnRVJSX0JBRF9SRVNQT05TRScsXG4gICdFUlJfQkFEX1JFUVVFU1QnLFxuICAnRVJSX0NBTkNFTEVEJyxcbiAgJ0VSUl9OT1RfU1VQUE9SVCcsXG4gICdFUlJfSU5WQUxJRF9VUkwnXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXS5mb3JFYWNoKGNvZGUgPT4ge1xuICBkZXNjcmlwdG9yc1tjb2RlXSA9IHt2YWx1ZTogY29kZX07XG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQXhpb3NFcnJvciwgZGVzY3JpcHRvcnMpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvdHlwZSwgJ2lzQXhpb3NFcnJvcicsIHt2YWx1ZTogdHJ1ZX0pO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuQXhpb3NFcnJvci5mcm9tID0gKGVycm9yLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlLCBjdXN0b21Qcm9wcykgPT4ge1xuICBjb25zdCBheGlvc0Vycm9yID0gT2JqZWN0LmNyZWF0ZShwcm90b3R5cGUpO1xuXG4gIHV0aWxzLnRvRmxhdE9iamVjdChlcnJvciwgYXhpb3NFcnJvciwgZnVuY3Rpb24gZmlsdGVyKG9iaikge1xuICAgIHJldHVybiBvYmogIT09IEVycm9yLnByb3RvdHlwZTtcbiAgfSwgcHJvcCA9PiB7XG4gICAgcmV0dXJuIHByb3AgIT09ICdpc0F4aW9zRXJyb3InO1xuICB9KTtcblxuICBBeGlvc0Vycm9yLmNhbGwoYXhpb3NFcnJvciwgZXJyb3IubWVzc2FnZSwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSk7XG5cbiAgYXhpb3NFcnJvci5jYXVzZSA9IGVycm9yO1xuXG4gIGF4aW9zRXJyb3IubmFtZSA9IGVycm9yLm5hbWU7XG5cbiAgY3VzdG9tUHJvcHMgJiYgT2JqZWN0LmFzc2lnbihheGlvc0Vycm9yLCBjdXN0b21Qcm9wcyk7XG5cbiAgcmV0dXJuIGF4aW9zRXJyb3I7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvc0Vycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbi8vIHRlbXBvcmFyeSBob3RmaXggdG8gYXZvaWQgY2lyY3VsYXIgcmVmZXJlbmNlcyB1bnRpbCBBeGlvc1VSTFNlYXJjaFBhcmFtcyBpcyByZWZhY3RvcmVkXG5pbXBvcnQgUGxhdGZvcm1Gb3JtRGF0YSBmcm9tICcuLi9wbGF0Zm9ybS9ub2RlL2NsYXNzZXMvRm9ybURhdGEuanMnO1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGdpdmVuIHRoaW5nIGlzIGEgYXJyYXkgb3IganMgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0aGluZyAtIFRoZSBvYmplY3Qgb3IgYXJyYXkgdG8gYmUgdmlzaXRlZC5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNWaXNpdGFibGUodGhpbmcpIHtcbiAgcmV0dXJuIHV0aWxzLmlzUGxhaW5PYmplY3QodGhpbmcpIHx8IHV0aWxzLmlzQXJyYXkodGhpbmcpO1xufVxuXG4vKipcbiAqIEl0IHJlbW92ZXMgdGhlIGJyYWNrZXRzIGZyb20gdGhlIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUga2V5IG9mIHRoZSBwYXJhbWV0ZXIuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gdGhlIGtleSB3aXRob3V0IHRoZSBicmFja2V0cy5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQnJhY2tldHMoa2V5KSB7XG4gIHJldHVybiB1dGlscy5lbmRzV2l0aChrZXksICdbXScpID8ga2V5LnNsaWNlKDAsIC0yKSA6IGtleTtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHBhdGgsIGEga2V5LCBhbmQgYSBib29sZWFuLCBhbmQgcmV0dXJucyBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gVGhlIHBhdGggdG8gdGhlIGN1cnJlbnQga2V5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIFRoZSBrZXkgb2YgdGhlIGN1cnJlbnQgb2JqZWN0IGJlaW5nIGl0ZXJhdGVkIG92ZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gZG90cyAtIElmIHRydWUsIHRoZSBrZXkgd2lsbCBiZSByZW5kZXJlZCB3aXRoIGRvdHMgaW5zdGVhZCBvZiBicmFja2V0cy5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgcGF0aCB0byB0aGUgY3VycmVudCBrZXkuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlcktleShwYXRoLCBrZXksIGRvdHMpIHtcbiAgaWYgKCFwYXRoKSByZXR1cm4ga2V5O1xuICByZXR1cm4gcGF0aC5jb25jYXQoa2V5KS5tYXAoZnVuY3Rpb24gZWFjaCh0b2tlbiwgaSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHRva2VuID0gcmVtb3ZlQnJhY2tldHModG9rZW4pO1xuICAgIHJldHVybiAhZG90cyAmJiBpID8gJ1snICsgdG9rZW4gKyAnXScgOiB0b2tlbjtcbiAgfSkuam9pbihkb3RzID8gJy4nIDogJycpO1xufVxuXG4vKipcbiAqIElmIHRoZSBhcnJheSBpcyBhbiBhcnJheSBhbmQgbm9uZSBvZiBpdHMgZWxlbWVudHMgYXJlIHZpc2l0YWJsZSwgdGhlbiBpdCdzIGEgZmxhdCBhcnJheS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PGFueT59IGFyciAtIFRoZSBhcnJheSB0byBjaGVja1xuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0ZsYXRBcnJheShhcnIpIHtcbiAgcmV0dXJuIHV0aWxzLmlzQXJyYXkoYXJyKSAmJiAhYXJyLnNvbWUoaXNWaXNpdGFibGUpO1xufVxuXG5jb25zdCBwcmVkaWNhdGVzID0gdXRpbHMudG9GbGF0T2JqZWN0KHV0aWxzLCB7fSwgbnVsbCwgZnVuY3Rpb24gZmlsdGVyKHByb3ApIHtcbiAgcmV0dXJuIC9eaXNbQS1aXS8udGVzdChwcm9wKTtcbn0pO1xuXG4vKipcbiAqIENvbnZlcnQgYSBkYXRhIG9iamVjdCB0byBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7P09iamVjdH0gW2Zvcm1EYXRhXVxuICogQHBhcmFtIHs/T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLnZpc2l0b3JdXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLm1ldGFUb2tlbnMgPSB0cnVlXVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5kb3RzID0gZmFsc2VdXG4gKiBAcGFyYW0gez9Cb29sZWFufSBbb3B0aW9ucy5pbmRleGVzID0gZmFsc2VdXG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqKi9cblxuLyoqXG4gKiBJdCBjb252ZXJ0cyBhbiBvYmplY3QgaW50byBhIEZvcm1EYXRhIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PGFueSwgYW55Pn0gb2JqIC0gVGhlIG9iamVjdCB0byBjb252ZXJ0IHRvIGZvcm0gZGF0YS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtRGF0YSAtIFRoZSBGb3JtRGF0YSBvYmplY3QgdG8gYXBwZW5kIHRvLlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBvcHRpb25zXG4gKlxuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gdG9Gb3JtRGF0YShvYmosIGZvcm1EYXRhLCBvcHRpb25zKSB7XG4gIGlmICghdXRpbHMuaXNPYmplY3Qob2JqKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RhcmdldCBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGZvcm1EYXRhID0gZm9ybURhdGEgfHwgbmV3IChQbGF0Zm9ybUZvcm1EYXRhIHx8IEZvcm1EYXRhKSgpO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBvcHRpb25zID0gdXRpbHMudG9GbGF0T2JqZWN0KG9wdGlvbnMsIHtcbiAgICBtZXRhVG9rZW5zOiB0cnVlLFxuICAgIGRvdHM6IGZhbHNlLFxuICAgIGluZGV4ZXM6IGZhbHNlXG4gIH0sIGZhbHNlLCBmdW5jdGlvbiBkZWZpbmVkKG9wdGlvbiwgc291cmNlKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gICAgcmV0dXJuICF1dGlscy5pc1VuZGVmaW5lZChzb3VyY2Vbb3B0aW9uXSk7XG4gIH0pO1xuXG4gIGNvbnN0IG1ldGFUb2tlbnMgPSBvcHRpb25zLm1ldGFUb2tlbnM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuICBjb25zdCB2aXNpdG9yID0gb3B0aW9ucy52aXNpdG9yIHx8IGRlZmF1bHRWaXNpdG9yO1xuICBjb25zdCBkb3RzID0gb3B0aW9ucy5kb3RzO1xuICBjb25zdCBpbmRleGVzID0gb3B0aW9ucy5pbmRleGVzO1xuICBjb25zdCBfQmxvYiA9IG9wdGlvbnMuQmxvYiB8fCB0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgJiYgQmxvYjtcbiAgY29uc3QgdXNlQmxvYiA9IF9CbG9iICYmIHV0aWxzLmlzU3BlY0NvbXBsaWFudEZvcm0oZm9ybURhdGEpO1xuXG4gIGlmICghdXRpbHMuaXNGdW5jdGlvbih2aXNpdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3Zpc2l0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cblxuICBmdW5jdGlvbiBjb252ZXJ0VmFsdWUodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHJldHVybiAnJztcblxuICAgIGlmICh1dGlscy5pc0RhdGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWUudG9JU09TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBpZiAoIXVzZUJsb2IgJiYgdXRpbHMuaXNCbG9iKHZhbHVlKSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ0Jsb2IgaXMgbm90IHN1cHBvcnRlZC4gVXNlIGEgQnVmZmVyIGluc3RlYWQuJyk7XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXIodmFsdWUpIHx8IHV0aWxzLmlzVHlwZWRBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB1c2VCbG9iICYmIHR5cGVvZiBCbG9iID09PSAnZnVuY3Rpb24nID8gbmV3IEJsb2IoW3ZhbHVlXSkgOiBCdWZmZXIuZnJvbSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgdmlzaXRvci5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IGtleVxuICAgKiBAcGFyYW0ge0FycmF5PFN0cmluZ3xOdW1iZXI+fSBwYXRoXG4gICAqIEB0aGlzIHtGb3JtRGF0YX1cbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHJldHVybiB0cnVlIHRvIHZpc2l0IHRoZSBlYWNoIHByb3Agb2YgdGhlIHZhbHVlIHJlY3Vyc2l2ZWx5XG4gICAqL1xuICBmdW5jdGlvbiBkZWZhdWx0VmlzaXRvcih2YWx1ZSwga2V5LCBwYXRoKSB7XG4gICAgbGV0IGFyciA9IHZhbHVlO1xuXG4gICAgaWYgKHZhbHVlICYmICFwYXRoICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmICh1dGlscy5lbmRzV2l0aChrZXksICd7fScpKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBrZXkgPSBtZXRhVG9rZW5zID8ga2V5IDoga2V5LnNsaWNlKDAsIC0yKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgKHV0aWxzLmlzQXJyYXkodmFsdWUpICYmIGlzRmxhdEFycmF5KHZhbHVlKSkgfHxcbiAgICAgICAgKCh1dGlscy5pc0ZpbGVMaXN0KHZhbHVlKSB8fCB1dGlscy5lbmRzV2l0aChrZXksICdbXScpKSAmJiAoYXJyID0gdXRpbHMudG9BcnJheSh2YWx1ZSkpXG4gICAgICAgICkpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIGtleSA9IHJlbW92ZUJyYWNrZXRzKGtleSk7XG5cbiAgICAgICAgYXJyLmZvckVhY2goZnVuY3Rpb24gZWFjaChlbCwgaW5kZXgpIHtcbiAgICAgICAgICAhKHV0aWxzLmlzVW5kZWZpbmVkKGVsKSB8fCBlbCA9PT0gbnVsbCkgJiYgZm9ybURhdGEuYXBwZW5kKFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgICAgICAgICBpbmRleGVzID09PSB0cnVlID8gcmVuZGVyS2V5KFtrZXldLCBpbmRleCwgZG90cykgOiAoaW5kZXhlcyA9PT0gbnVsbCA/IGtleSA6IGtleSArICdbXScpLFxuICAgICAgICAgICAgY29udmVydFZhbHVlKGVsKVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzVmlzaXRhYmxlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZm9ybURhdGEuYXBwZW5kKHJlbmRlcktleShwYXRoLCBrZXksIGRvdHMpLCBjb252ZXJ0VmFsdWUodmFsdWUpKTtcblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHN0YWNrID0gW107XG5cbiAgY29uc3QgZXhwb3NlZEhlbHBlcnMgPSBPYmplY3QuYXNzaWduKHByZWRpY2F0ZXMsIHtcbiAgICBkZWZhdWx0VmlzaXRvcixcbiAgICBjb252ZXJ0VmFsdWUsXG4gICAgaXNWaXNpdGFibGVcbiAgfSk7XG5cbiAgZnVuY3Rpb24gYnVpbGQodmFsdWUsIHBhdGgpIHtcbiAgICBpZiAodXRpbHMuaXNVbmRlZmluZWQodmFsdWUpKSByZXR1cm47XG5cbiAgICBpZiAoc3RhY2suaW5kZXhPZih2YWx1ZSkgIT09IC0xKSB7XG4gICAgICB0aHJvdyBFcnJvcignQ2lyY3VsYXIgcmVmZXJlbmNlIGRldGVjdGVkIGluICcgKyBwYXRoLmpvaW4oJy4nKSk7XG4gICAgfVxuXG4gICAgc3RhY2sucHVzaCh2YWx1ZSk7XG5cbiAgICB1dGlscy5mb3JFYWNoKHZhbHVlLCBmdW5jdGlvbiBlYWNoKGVsLCBrZXkpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9ICEodXRpbHMuaXNVbmRlZmluZWQoZWwpIHx8IGVsID09PSBudWxsKSAmJiB2aXNpdG9yLmNhbGwoXG4gICAgICAgIGZvcm1EYXRhLCBlbCwgdXRpbHMuaXNTdHJpbmcoa2V5KSA/IGtleS50cmltKCkgOiBrZXksIHBhdGgsIGV4cG9zZWRIZWxwZXJzXG4gICAgICApO1xuXG4gICAgICBpZiAocmVzdWx0ID09PSB0cnVlKSB7XG4gICAgICAgIGJ1aWxkKGVsLCBwYXRoID8gcGF0aC5jb25jYXQoa2V5KSA6IFtrZXldKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHN0YWNrLnBvcCgpO1xuICB9XG5cbiAgaWYgKCF1dGlscy5pc09iamVjdChvYmopKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZGF0YSBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG5cbiAgYnVpbGQob2JqKTtcblxuICByZXR1cm4gZm9ybURhdGE7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRvRm9ybURhdGE7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB0b0Zvcm1EYXRhIGZyb20gJy4vdG9Gb3JtRGF0YS5qcyc7XG5cbi8qKlxuICogSXQgZW5jb2RlcyBhIHN0cmluZyBieSByZXBsYWNpbmcgYWxsIGNoYXJhY3RlcnMgdGhhdCBhcmUgbm90IGluIHRoZSB1bnJlc2VydmVkIHNldCB3aXRoXG4gKiB0aGVpciBwZXJjZW50LWVuY29kZWQgZXF1aXZhbGVudHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gVGhlIHN0cmluZyB0byBlbmNvZGUuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGVuY29kZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBlbmNvZGUoc3RyKSB7XG4gIGNvbnN0IGNoYXJNYXAgPSB7XG4gICAgJyEnOiAnJTIxJyxcbiAgICBcIidcIjogJyUyNycsXG4gICAgJygnOiAnJTI4JyxcbiAgICAnKSc6ICclMjknLFxuICAgICd+JzogJyU3RScsXG4gICAgJyUyMCc6ICcrJyxcbiAgICAnJTAwJzogJ1xceDAwJ1xuICB9O1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cikucmVwbGFjZSgvWyEnKCl+XXwlMjB8JTAwL2csIGZ1bmN0aW9uIHJlcGxhY2VyKG1hdGNoKSB7XG4gICAgcmV0dXJuIGNoYXJNYXBbbWF0Y2hdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHBhcmFtcyBvYmplY3QgYW5kIGNvbnZlcnRzIGl0IHRvIGEgRm9ybURhdGEgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBwYXJhbXMgLSBUaGUgcGFyYW1ldGVycyB0byBiZSBjb252ZXJ0ZWQgdG8gYSBGb3JtRGF0YSBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIGFueT59IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBvYmplY3QgcGFzc2VkIHRvIHRoZSBBeGlvcyBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gQXhpb3NVUkxTZWFyY2hQYXJhbXMocGFyYW1zLCBvcHRpb25zKSB7XG4gIHRoaXMuX3BhaXJzID0gW107XG5cbiAgcGFyYW1zICYmIHRvRm9ybURhdGEocGFyYW1zLCB0aGlzLCBvcHRpb25zKTtcbn1cblxuY29uc3QgcHJvdG90eXBlID0gQXhpb3NVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlO1xuXG5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24gYXBwZW5kKG5hbWUsIHZhbHVlKSB7XG4gIHRoaXMuX3BhaXJzLnB1c2goW25hbWUsIHZhbHVlXSk7XG59O1xuXG5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhlbmNvZGVyKSB7XG4gIGNvbnN0IF9lbmNvZGUgPSBlbmNvZGVyID8gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZW5jb2Rlci5jYWxsKHRoaXMsIHZhbHVlLCBlbmNvZGUpO1xuICB9IDogZW5jb2RlO1xuXG4gIHJldHVybiB0aGlzLl9wYWlycy5tYXAoZnVuY3Rpb24gZWFjaChwYWlyKSB7XG4gICAgcmV0dXJuIF9lbmNvZGUocGFpclswXSkgKyAnPScgKyBfZW5jb2RlKHBhaXJbMV0pO1xuICB9LCAnJykuam9pbignJicpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3NVUkxTZWFyY2hQYXJhbXM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NVUkxTZWFyY2hQYXJhbXMgZnJvbSAnLi4vaGVscGVycy9BeGlvc1VSTFNlYXJjaFBhcmFtcy5qcyc7XG5cbi8qKlxuICogSXQgcmVwbGFjZXMgYWxsIGluc3RhbmNlcyBvZiB0aGUgY2hhcmFjdGVycyBgOmAsIGAkYCwgYCxgLCBgK2AsIGBbYCwgYW5kIGBdYCB3aXRoIHRoZWlyXG4gKiBVUkkgZW5jb2RlZCBjb3VudGVycGFydHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsIFRoZSB2YWx1ZSB0byBiZSBlbmNvZGVkLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBlbmNvZGVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHBhcmFtIHs/KG9iamVjdHxGdW5jdGlvbil9IG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgb3B0aW9ucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIFxuICBjb25zdCBfZW5jb2RlID0gb3B0aW9ucyAmJiBvcHRpb25zLmVuY29kZSB8fCBlbmNvZGU7XG5cbiAgaWYgKHV0aWxzLmlzRnVuY3Rpb24ob3B0aW9ucykpIHtcbiAgICBvcHRpb25zID0ge1xuICAgICAgc2VyaWFsaXplOiBvcHRpb25zXG4gICAgfTtcbiAgfSBcblxuICBjb25zdCBzZXJpYWxpemVGbiA9IG9wdGlvbnMgJiYgb3B0aW9ucy5zZXJpYWxpemU7XG5cbiAgbGV0IHNlcmlhbGl6ZWRQYXJhbXM7XG5cbiAgaWYgKHNlcmlhbGl6ZUZuKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHNlcmlhbGl6ZUZuKHBhcmFtcywgb3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykgP1xuICAgICAgcGFyYW1zLnRvU3RyaW5nKCkgOlxuICAgICAgbmV3IEF4aW9zVVJMU2VhcmNoUGFyYW1zKHBhcmFtcywgb3B0aW9ucykudG9TdHJpbmcoX2VuY29kZSk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIGNvbnN0IGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZihcIiNcIik7XG5cbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuXG5jbGFzcyBJbnRlcmNlcHRvck1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmhhbmRsZXJzID0gW107XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gICAqXG4gICAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAgICovXG4gIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkLCBvcHRpb25zKSB7XG4gICAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICAgIGZ1bGZpbGxlZCxcbiAgICAgIHJlamVjdGVkLFxuICAgICAgc3luY2hyb25vdXM6IG9wdGlvbnMgPyBvcHRpb25zLnN5bmNocm9ub3VzIDogZmFsc2UsXG4gICAgICBydW5XaGVuOiBvcHRpb25zID8gb3B0aW9ucy5ydW5XaGVuIDogbnVsbFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAgICpcbiAgICogQHJldHVybnMge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgaW50ZXJjZXB0b3Igd2FzIHJlbW92ZWQsIGBmYWxzZWAgb3RoZXJ3aXNlXG4gICAqL1xuICBlamVjdChpZCkge1xuICAgIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciBhbGwgaW50ZXJjZXB0b3JzIGZyb20gdGhlIHN0YWNrXG4gICAqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgY2xlYXIoKSB7XG4gICAgaWYgKHRoaXMuaGFuZGxlcnMpIHtcbiAgICAgIHRoaXMuaGFuZGxlcnMgPSBbXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAgICpcbiAgICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAgICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gICAqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgZm9yRWFjaChmbikge1xuICAgIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgICAgZm4oaCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHNpbGVudEpTT05QYXJzaW5nOiB0cnVlLFxuICBmb3JjZWRKU09OUGFyc2luZzogdHJ1ZSxcbiAgY2xhcmlmeVRpbWVvdXRFcnJvcjogZmFsc2Vcbn07XG4iLCJpbXBvcnQgVVJMU2VhcmNoUGFyYW1zIGZyb20gJy4vY2xhc3Nlcy9VUkxTZWFyY2hQYXJhbXMuanMnXG5pbXBvcnQgRm9ybURhdGEgZnJvbSAnLi9jbGFzc2VzL0Zvcm1EYXRhLmpzJ1xuaW1wb3J0IEJsb2IgZnJvbSAnLi9jbGFzc2VzL0Jsb2IuanMnXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaXNCcm93c2VyOiB0cnVlLFxuICBjbGFzc2VzOiB7XG4gICAgVVJMU2VhcmNoUGFyYW1zLFxuICAgIEZvcm1EYXRhLFxuICAgIEJsb2JcbiAgfSxcbiAgcHJvdG9jb2xzOiBbJ2h0dHAnLCAnaHR0cHMnLCAnZmlsZScsICdibG9iJywgJ3VybCcsICdkYXRhJ11cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBeGlvc1VSTFNlYXJjaFBhcmFtcyBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL0F4aW9zVVJMU2VhcmNoUGFyYW1zLmpzJztcbmV4cG9ydCBkZWZhdWx0IHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnID8gVVJMU2VhcmNoUGFyYW1zIDogQXhpb3NVUkxTZWFyY2hQYXJhbXM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcgPyBGb3JtRGF0YSA6IG51bGw7XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0IGRlZmF1bHQgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnID8gQmxvYiA6IG51bGxcbiIsImNvbnN0IGhhc0Jyb3dzZXJFbnYgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xuXG5jb25zdCBfbmF2aWdhdG9yID0gdHlwZW9mIG5hdmlnYXRvciA9PT0gJ29iamVjdCcgJiYgbmF2aWdhdG9yIHx8IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKiBuYXRpdmVzY3JpcHRcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnTmF0aXZlU2NyaXB0JyBvciAnTlMnXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmNvbnN0IGhhc1N0YW5kYXJkQnJvd3NlckVudiA9IGhhc0Jyb3dzZXJFbnYgJiZcbiAgKCFfbmF2aWdhdG9yIHx8IFsnUmVhY3ROYXRpdmUnLCAnTmF0aXZlU2NyaXB0JywgJ05TJ10uaW5kZXhPZihfbmF2aWdhdG9yLnByb2R1Y3QpIDwgMCk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIHdlYldvcmtlciBlbnZpcm9ubWVudFxuICpcbiAqIEFsdGhvdWdoIHRoZSBgaXNTdGFuZGFyZEJyb3dzZXJFbnZgIG1ldGhvZCBpbmRpY2F0ZXMgdGhhdFxuICogYGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyYCwgdGhlIFdlYldvcmtlciB3aWxsIHN0aWxsIGJlXG4gKiBmaWx0ZXJlZCBvdXQgZHVlIHRvIGl0cyBqdWRnbWVudCBzdGFuZGFyZFxuICogYHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdgLlxuICogVGhpcyBsZWFkcyB0byBhIHByb2JsZW0gd2hlbiBheGlvcyBwb3N0IGBGb3JtRGF0YWAgaW4gd2ViV29ya2VyXG4gKi9cbmNvbnN0IGhhc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudiA9ICgoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSAmJlxuICAgIHR5cGVvZiBzZWxmLmltcG9ydFNjcmlwdHMgPT09ICdmdW5jdGlvbidcbiAgKTtcbn0pKCk7XG5cbmNvbnN0IG9yaWdpbiA9IGhhc0Jyb3dzZXJFbnYgJiYgd2luZG93LmxvY2F0aW9uLmhyZWYgfHwgJ2h0dHA6Ly9sb2NhbGhvc3QnO1xuXG5leHBvcnQge1xuICBoYXNCcm93c2VyRW52LFxuICBoYXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYsXG4gIGhhc1N0YW5kYXJkQnJvd3NlckVudixcbiAgX25hdmlnYXRvciBhcyBuYXZpZ2F0b3IsXG4gIG9yaWdpblxufVxuIiwiaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4vbm9kZS9pbmRleC5qcyc7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL2NvbW1vbi91dGlscy5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgLi4udXRpbHMsXG4gIC4uLnBsYXRmb3JtXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5cbi8qKlxuICogSXQgdGFrZXMgYSBzdHJpbmcgbGlrZSBgZm9vW3hdW3ldW3pdYCBhbmQgcmV0dXJucyBhbiBhcnJheSBsaWtlIGBbJ2ZvbycsICd4JywgJ3knLCAneiddXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICpcbiAqIEByZXR1cm5zIEFuIGFycmF5IG9mIHN0cmluZ3MuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlUHJvcFBhdGgobmFtZSkge1xuICAvLyBmb29beF1beV1bel1cbiAgLy8gZm9vLngueS56XG4gIC8vIGZvby14LXktelxuICAvLyBmb28geCB5IHpcbiAgcmV0dXJuIHV0aWxzLm1hdGNoQWxsKC9cXHcrfFxcWyhcXHcqKV0vZywgbmFtZSkubWFwKG1hdGNoID0+IHtcbiAgICByZXR1cm4gbWF0Y2hbMF0gPT09ICdbXScgPyAnJyA6IG1hdGNoWzFdIHx8IG1hdGNoWzBdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGFuIGFycmF5IHRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PGFueT59IGFyciAtIFRoZSBhcnJheSB0byBjb252ZXJ0IHRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcmV0dXJucyBBbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzIGFuZCB2YWx1ZXMgYXMgdGhlIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheVRvT2JqZWN0KGFycikge1xuICBjb25zdCBvYmogPSB7fTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGFycik7XG4gIGxldCBpO1xuICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgbGV0IGtleTtcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICBvYmpba2V5XSA9IGFycltrZXldO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBGb3JtRGF0YSBvYmplY3QgYW5kIHJldHVybnMgYSBKYXZhU2NyaXB0IG9iamVjdFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtRGF0YSBUaGUgRm9ybURhdGEgb2JqZWN0IHRvIGNvbnZlcnQgdG8gSlNPTi5cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0PHN0cmluZywgYW55PiB8IG51bGx9IFRoZSBjb252ZXJ0ZWQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBmb3JtRGF0YVRvSlNPTihmb3JtRGF0YSkge1xuICBmdW5jdGlvbiBidWlsZFBhdGgocGF0aCwgdmFsdWUsIHRhcmdldCwgaW5kZXgpIHtcbiAgICBsZXQgbmFtZSA9IHBhdGhbaW5kZXgrK107XG5cbiAgICBpZiAobmFtZSA9PT0gJ19fcHJvdG9fXycpIHJldHVybiB0cnVlO1xuXG4gICAgY29uc3QgaXNOdW1lcmljS2V5ID0gTnVtYmVyLmlzRmluaXRlKCtuYW1lKTtcbiAgICBjb25zdCBpc0xhc3QgPSBpbmRleCA+PSBwYXRoLmxlbmd0aDtcbiAgICBuYW1lID0gIW5hbWUgJiYgdXRpbHMuaXNBcnJheSh0YXJnZXQpID8gdGFyZ2V0Lmxlbmd0aCA6IG5hbWU7XG5cbiAgICBpZiAoaXNMYXN0KSB7XG4gICAgICBpZiAodXRpbHMuaGFzT3duUHJvcCh0YXJnZXQsIG5hbWUpKSB7XG4gICAgICAgIHRhcmdldFtuYW1lXSA9IFt0YXJnZXRbbmFtZV0sIHZhbHVlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFtuYW1lXSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gIWlzTnVtZXJpY0tleTtcbiAgICB9XG5cbiAgICBpZiAoIXRhcmdldFtuYW1lXSB8fCAhdXRpbHMuaXNPYmplY3QodGFyZ2V0W25hbWVdKSkge1xuICAgICAgdGFyZ2V0W25hbWVdID0gW107XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0gYnVpbGRQYXRoKHBhdGgsIHZhbHVlLCB0YXJnZXRbbmFtZV0sIGluZGV4KTtcblxuICAgIGlmIChyZXN1bHQgJiYgdXRpbHMuaXNBcnJheSh0YXJnZXRbbmFtZV0pKSB7XG4gICAgICB0YXJnZXRbbmFtZV0gPSBhcnJheVRvT2JqZWN0KHRhcmdldFtuYW1lXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICFpc051bWVyaWNLZXk7XG4gIH1cblxuICBpZiAodXRpbHMuaXNGb3JtRGF0YShmb3JtRGF0YSkgJiYgdXRpbHMuaXNGdW5jdGlvbihmb3JtRGF0YS5lbnRyaWVzKSkge1xuICAgIGNvbnN0IG9iaiA9IHt9O1xuXG4gICAgdXRpbHMuZm9yRWFjaEVudHJ5KGZvcm1EYXRhLCAobmFtZSwgdmFsdWUpID0+IHtcbiAgICAgIGJ1aWxkUGF0aChwYXJzZVByb3BQYXRoKG5hbWUpLCB2YWx1ZSwgb2JqLCAwKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZm9ybURhdGFUb0pTT047XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IHRyYW5zaXRpb25hbERlZmF1bHRzIGZyb20gJy4vdHJhbnNpdGlvbmFsLmpzJztcbmltcG9ydCB0b0Zvcm1EYXRhIGZyb20gJy4uL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyc7XG5pbXBvcnQgdG9VUkxFbmNvZGVkRm9ybSBmcm9tICcuLi9oZWxwZXJzL3RvVVJMRW5jb2RlZEZvcm0uanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcbmltcG9ydCBmb3JtRGF0YVRvSlNPTiBmcm9tICcuLi9oZWxwZXJzL2Zvcm1EYXRhVG9KU09OLmpzJztcblxuLyoqXG4gKiBJdCB0YWtlcyBhIHN0cmluZywgdHJpZXMgdG8gcGFyc2UgaXQsIGFuZCBpZiBpdCBmYWlscywgaXQgcmV0dXJucyB0aGUgc3RyaW5naWZpZWQgdmVyc2lvblxuICogb2YgdGhlIGlucHV0XG4gKlxuICogQHBhcmFtIHthbnl9IHJhd1ZhbHVlIC0gVGhlIHZhbHVlIHRvIGJlIHN0cmluZ2lmaWVkLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcGFyc2VyIC0gQSBmdW5jdGlvbiB0aGF0IHBhcnNlcyBhIHN0cmluZyBpbnRvIGEgSmF2YVNjcmlwdCBvYmplY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlbmNvZGVyIC0gQSBmdW5jdGlvbiB0aGF0IHRha2VzIGEgdmFsdWUgYW5kIHJldHVybnMgYSBzdHJpbmcuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gQSBzdHJpbmdpZmllZCB2ZXJzaW9uIG9mIHRoZSByYXdWYWx1ZS5cbiAqL1xuZnVuY3Rpb24gc3RyaW5naWZ5U2FmZWx5KHJhd1ZhbHVlLCBwYXJzZXIsIGVuY29kZXIpIHtcbiAgaWYgKHV0aWxzLmlzU3RyaW5nKHJhd1ZhbHVlKSkge1xuICAgIHRyeSB7XG4gICAgICAocGFyc2VyIHx8IEpTT04ucGFyc2UpKHJhd1ZhbHVlKTtcbiAgICAgIHJldHVybiB1dGlscy50cmltKHJhd1ZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoZS5uYW1lICE9PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChlbmNvZGVyIHx8IEpTT04uc3RyaW5naWZ5KShyYXdWYWx1ZSk7XG59XG5cbmNvbnN0IGRlZmF1bHRzID0ge1xuXG4gIHRyYW5zaXRpb25hbDogdHJhbnNpdGlvbmFsRGVmYXVsdHMsXG5cbiAgYWRhcHRlcjogWyd4aHInLCAnaHR0cCcsICdmZXRjaCddLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBjb25zdCBjb250ZW50VHlwZSA9IGhlYWRlcnMuZ2V0Q29udGVudFR5cGUoKSB8fCAnJztcbiAgICBjb25zdCBoYXNKU09OQ29udGVudFR5cGUgPSBjb250ZW50VHlwZS5pbmRleE9mKCdhcHBsaWNhdGlvbi9qc29uJykgPiAtMTtcbiAgICBjb25zdCBpc09iamVjdFBheWxvYWQgPSB1dGlscy5pc09iamVjdChkYXRhKTtcblxuICAgIGlmIChpc09iamVjdFBheWxvYWQgJiYgdXRpbHMuaXNIVE1MRm9ybShkYXRhKSkge1xuICAgICAgZGF0YSA9IG5ldyBGb3JtRGF0YShkYXRhKTtcbiAgICB9XG5cbiAgICBjb25zdCBpc0Zvcm1EYXRhID0gdXRpbHMuaXNGb3JtRGF0YShkYXRhKTtcblxuICAgIGlmIChpc0Zvcm1EYXRhKSB7XG4gICAgICByZXR1cm4gaGFzSlNPTkNvbnRlbnRUeXBlID8gSlNPTi5zdHJpbmdpZnkoZm9ybURhdGFUb0pTT04oZGF0YSkpIDogZGF0YTtcbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNSZWFkYWJsZVN0cmVhbShkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIGhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04JywgZmFsc2UpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBsZXQgaXNGaWxlTGlzdDtcblxuICAgIGlmIChpc09iamVjdFBheWxvYWQpIHtcbiAgICAgIGlmIChjb250ZW50VHlwZS5pbmRleE9mKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnKSA+IC0xKSB7XG4gICAgICAgIHJldHVybiB0b1VSTEVuY29kZWRGb3JtKGRhdGEsIHRoaXMuZm9ybVNlcmlhbGl6ZXIpLnRvU3RyaW5nKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICgoaXNGaWxlTGlzdCA9IHV0aWxzLmlzRmlsZUxpc3QoZGF0YSkpIHx8IGNvbnRlbnRUeXBlLmluZGV4T2YoJ211bHRpcGFydC9mb3JtLWRhdGEnKSA+IC0xKSB7XG4gICAgICAgIGNvbnN0IF9Gb3JtRGF0YSA9IHRoaXMuZW52ICYmIHRoaXMuZW52LkZvcm1EYXRhO1xuXG4gICAgICAgIHJldHVybiB0b0Zvcm1EYXRhKFxuICAgICAgICAgIGlzRmlsZUxpc3QgPyB7J2ZpbGVzW10nOiBkYXRhfSA6IGRhdGEsXG4gICAgICAgICAgX0Zvcm1EYXRhICYmIG5ldyBfRm9ybURhdGEoKSxcbiAgICAgICAgICB0aGlzLmZvcm1TZXJpYWxpemVyXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzT2JqZWN0UGF5bG9hZCB8fCBoYXNKU09OQ29udGVudFR5cGUgKSB7XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi9qc29uJywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHN0cmluZ2lmeVNhZmVseShkYXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgY29uc3QgdHJhbnNpdGlvbmFsID0gdGhpcy50cmFuc2l0aW9uYWwgfHwgZGVmYXVsdHMudHJhbnNpdGlvbmFsO1xuICAgIGNvbnN0IGZvcmNlZEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5mb3JjZWRKU09OUGFyc2luZztcbiAgICBjb25zdCBKU09OUmVxdWVzdGVkID0gdGhpcy5yZXNwb25zZVR5cGUgPT09ICdqc29uJztcblxuICAgIGlmICh1dGlscy5pc1Jlc3BvbnNlKGRhdGEpIHx8IHV0aWxzLmlzUmVhZGFibGVTdHJlYW0oZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIGlmIChkYXRhICYmIHV0aWxzLmlzU3RyaW5nKGRhdGEpICYmICgoZm9yY2VkSlNPTlBhcnNpbmcgJiYgIXRoaXMucmVzcG9uc2VUeXBlKSB8fCBKU09OUmVxdWVzdGVkKSkge1xuICAgICAgY29uc3Qgc2lsZW50SlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLnNpbGVudEpTT05QYXJzaW5nO1xuICAgICAgY29uc3Qgc3RyaWN0SlNPTlBhcnNpbmcgPSAhc2lsZW50SlNPTlBhcnNpbmcgJiYgSlNPTlJlcXVlc3RlZDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChzdHJpY3RKU09OUGFyc2luZykge1xuICAgICAgICAgIGlmIChlLm5hbWUgPT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgICAgIHRocm93IEF4aW9zRXJyb3IuZnJvbShlLCBBeGlvc0Vycm9yLkVSUl9CQURfUkVTUE9OU0UsIHRoaXMsIG51bGwsIHRoaXMucmVzcG9uc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuICBtYXhCb2R5TGVuZ3RoOiAtMSxcblxuICBlbnY6IHtcbiAgICBGb3JtRGF0YTogcGxhdGZvcm0uY2xhc3Nlcy5Gb3JtRGF0YSxcbiAgICBCbG9iOiBwbGF0Zm9ybS5jbGFzc2VzLkJsb2JcbiAgfSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9LFxuXG4gIGhlYWRlcnM6IHtcbiAgICBjb21tb246IHtcbiAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJyxcbiAgICAgICdDb250ZW50LVR5cGUnOiB1bmRlZmluZWRcbiAgICB9XG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgKG1ldGhvZCkgPT4ge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCB0b0Zvcm1EYXRhIGZyb20gJy4vdG9Gb3JtRGF0YS5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b1VSTEVuY29kZWRGb3JtKGRhdGEsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRvRm9ybURhdGEoZGF0YSwgbmV3IHBsYXRmb3JtLmNsYXNzZXMuVVJMU2VhcmNoUGFyYW1zKCksIE9iamVjdC5hc3NpZ24oe1xuICAgIHZpc2l0b3I6IGZ1bmN0aW9uKHZhbHVlLCBrZXksIHBhdGgsIGhlbHBlcnMpIHtcbiAgICAgIGlmIChwbGF0Zm9ybS5pc05vZGUgJiYgdXRpbHMuaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKGtleSwgdmFsdWUudG9TdHJpbmcoJ2Jhc2U2NCcpKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaGVscGVycy5kZWZhdWx0VmlzaXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfSwgb3B0aW9ucykpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5cbi8vIFJhd0F4aW9zSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbmNvbnN0IGlnbm9yZUR1cGxpY2F0ZU9mID0gdXRpbHMudG9PYmplY3RTZXQoW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl0pO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcmF3SGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKlxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xuZXhwb3J0IGRlZmF1bHQgcmF3SGVhZGVycyA9PiB7XG4gIGNvbnN0IHBhcnNlZCA9IHt9O1xuICBsZXQga2V5O1xuICBsZXQgdmFsO1xuICBsZXQgaTtcblxuICByYXdIZWFkZXJzICYmIHJhd0hlYWRlcnMuc3BsaXQoJ1xcbicpLmZvckVhY2goZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gbGluZS5zdWJzdHJpbmcoMCwgaSkudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gbGluZS5zdWJzdHJpbmcoaSArIDEpLnRyaW0oKTtcblxuICAgIGlmICgha2V5IHx8IChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZltrZXldKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgaWYgKHBhcnNlZFtrZXldKSB7XG4gICAgICAgIHBhcnNlZFtrZXldLnB1c2godmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gW3ZhbF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBwYXJzZUhlYWRlcnMgZnJvbSAnLi4vaGVscGVycy9wYXJzZUhlYWRlcnMuanMnO1xuXG5jb25zdCAkaW50ZXJuYWxzID0gU3ltYm9sKCdpbnRlcm5hbHMnKTtcblxuZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyKGhlYWRlcikge1xuICByZXR1cm4gaGVhZGVyICYmIFN0cmluZyhoZWFkZXIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IGZhbHNlIHx8IHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gdXRpbHMuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5tYXAobm9ybWFsaXplVmFsdWUpIDogU3RyaW5nKHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUb2tlbnMoc3RyKSB7XG4gIGNvbnN0IHRva2VucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGNvbnN0IHRva2Vuc1JFID0gLyhbXlxccyw7PV0rKVxccyooPzo9XFxzKihbXiw7XSspKT8vZztcbiAgbGV0IG1hdGNoO1xuXG4gIHdoaWxlICgobWF0Y2ggPSB0b2tlbnNSRS5leGVjKHN0cikpKSB7XG4gICAgdG9rZW5zW21hdGNoWzFdXSA9IG1hdGNoWzJdO1xuICB9XG5cbiAgcmV0dXJuIHRva2Vucztcbn1cblxuY29uc3QgaXNWYWxpZEhlYWRlck5hbWUgPSAoc3RyKSA9PiAvXlstX2EtekEtWjAtOV5gfH4sISMkJSYnKisuXSskLy50ZXN0KHN0ci50cmltKCkpO1xuXG5mdW5jdGlvbiBtYXRjaEhlYWRlclZhbHVlKGNvbnRleHQsIHZhbHVlLCBoZWFkZXIsIGZpbHRlciwgaXNIZWFkZXJOYW1lRmlsdGVyKSB7XG4gIGlmICh1dGlscy5pc0Z1bmN0aW9uKGZpbHRlcikpIHtcbiAgICByZXR1cm4gZmlsdGVyLmNhbGwodGhpcywgdmFsdWUsIGhlYWRlcik7XG4gIH1cblxuICBpZiAoaXNIZWFkZXJOYW1lRmlsdGVyKSB7XG4gICAgdmFsdWUgPSBoZWFkZXI7XG4gIH1cblxuICBpZiAoIXV0aWxzLmlzU3RyaW5nKHZhbHVlKSkgcmV0dXJuO1xuXG4gIGlmICh1dGlscy5pc1N0cmluZyhmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIHZhbHVlLmluZGV4T2YoZmlsdGVyKSAhPT0gLTE7XG4gIH1cblxuICBpZiAodXRpbHMuaXNSZWdFeHAoZmlsdGVyKSkge1xuICAgIHJldHVybiBmaWx0ZXIudGVzdCh2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZm9ybWF0SGVhZGVyKGhlYWRlcikge1xuICByZXR1cm4gaGVhZGVyLnRyaW0oKVxuICAgIC50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLyhbYS16XFxkXSkoXFx3KikvZywgKHcsIGNoYXIsIHN0cikgPT4ge1xuICAgICAgcmV0dXJuIGNoYXIudG9VcHBlckNhc2UoKSArIHN0cjtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gYnVpbGRBY2Nlc3NvcnMob2JqLCBoZWFkZXIpIHtcbiAgY29uc3QgYWNjZXNzb3JOYW1lID0gdXRpbHMudG9DYW1lbENhc2UoJyAnICsgaGVhZGVyKTtcblxuICBbJ2dldCcsICdzZXQnLCAnaGFzJ10uZm9yRWFjaChtZXRob2ROYW1lID0+IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBtZXRob2ROYW1lICsgYWNjZXNzb3JOYW1lLCB7XG4gICAgICB2YWx1ZTogZnVuY3Rpb24oYXJnMSwgYXJnMiwgYXJnMykge1xuICAgICAgICByZXR1cm4gdGhpc1ttZXRob2ROYW1lXS5jYWxsKHRoaXMsIGhlYWRlciwgYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgICB9LFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0pO1xufVxuXG5jbGFzcyBBeGlvc0hlYWRlcnMge1xuICBjb25zdHJ1Y3RvcihoZWFkZXJzKSB7XG4gICAgaGVhZGVycyAmJiB0aGlzLnNldChoZWFkZXJzKTtcbiAgfVxuXG4gIHNldChoZWFkZXIsIHZhbHVlT3JSZXdyaXRlLCByZXdyaXRlKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICBmdW5jdGlvbiBzZXRIZWFkZXIoX3ZhbHVlLCBfaGVhZGVyLCBfcmV3cml0ZSkge1xuICAgICAgY29uc3QgbEhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKCFsSGVhZGVyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaGVhZGVyIG5hbWUgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcnKTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleShzZWxmLCBsSGVhZGVyKTtcblxuICAgICAgaWYoIWtleSB8fCBzZWxmW2tleV0gPT09IHVuZGVmaW5lZCB8fCBfcmV3cml0ZSA9PT0gdHJ1ZSB8fCAoX3Jld3JpdGUgPT09IHVuZGVmaW5lZCAmJiBzZWxmW2tleV0gIT09IGZhbHNlKSkge1xuICAgICAgICBzZWxmW2tleSB8fCBfaGVhZGVyXSA9IG5vcm1hbGl6ZVZhbHVlKF92YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgc2V0SGVhZGVycyA9IChoZWFkZXJzLCBfcmV3cml0ZSkgPT5cbiAgICAgIHV0aWxzLmZvckVhY2goaGVhZGVycywgKF92YWx1ZSwgX2hlYWRlcikgPT4gc2V0SGVhZGVyKF92YWx1ZSwgX2hlYWRlciwgX3Jld3JpdGUpKTtcblxuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KGhlYWRlcikgfHwgaGVhZGVyIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3Rvcikge1xuICAgICAgc2V0SGVhZGVycyhoZWFkZXIsIHZhbHVlT3JSZXdyaXRlKVxuICAgIH0gZWxzZSBpZih1dGlscy5pc1N0cmluZyhoZWFkZXIpICYmIChoZWFkZXIgPSBoZWFkZXIudHJpbSgpKSAmJiAhaXNWYWxpZEhlYWRlck5hbWUoaGVhZGVyKSkge1xuICAgICAgc2V0SGVhZGVycyhwYXJzZUhlYWRlcnMoaGVhZGVyKSwgdmFsdWVPclJld3JpdGUpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNIZWFkZXJzKGhlYWRlcikpIHtcbiAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGhlYWRlci5lbnRyaWVzKCkpIHtcbiAgICAgICAgc2V0SGVhZGVyKHZhbHVlLCBrZXksIHJld3JpdGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBoZWFkZXIgIT0gbnVsbCAmJiBzZXRIZWFkZXIodmFsdWVPclJld3JpdGUsIGhlYWRlciwgcmV3cml0ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBnZXQoaGVhZGVyLCBwYXJzZXIpIHtcbiAgICBoZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoaGVhZGVyKTtcblxuICAgIGlmIChoZWFkZXIpIHtcbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkodGhpcywgaGVhZGVyKTtcblxuICAgICAgaWYgKGtleSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXNba2V5XTtcblxuICAgICAgICBpZiAoIXBhcnNlcikge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJzZXIgPT09IHRydWUpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VUb2tlbnModmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzRnVuY3Rpb24ocGFyc2VyKSkge1xuICAgICAgICAgIHJldHVybiBwYXJzZXIuY2FsbCh0aGlzLCB2YWx1ZSwga2V5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1JlZ0V4cChwYXJzZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlci5leGVjKHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BhcnNlciBtdXN0IGJlIGJvb2xlYW58cmVnZXhwfGZ1bmN0aW9uJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaGFzKGhlYWRlciwgbWF0Y2hlcikge1xuICAgIGhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihoZWFkZXIpO1xuXG4gICAgaWYgKGhlYWRlcikge1xuICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleSh0aGlzLCBoZWFkZXIpO1xuXG4gICAgICByZXR1cm4gISEoa2V5ICYmIHRoaXNba2V5XSAhPT0gdW5kZWZpbmVkICYmICghbWF0Y2hlciB8fCBtYXRjaEhlYWRlclZhbHVlKHRoaXMsIHRoaXNba2V5XSwga2V5LCBtYXRjaGVyKSkpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGRlbGV0ZShoZWFkZXIsIG1hdGNoZXIpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBsZXQgZGVsZXRlZCA9IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gZGVsZXRlSGVhZGVyKF9oZWFkZXIpIHtcbiAgICAgIF9oZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoX2hlYWRlcik7XG5cbiAgICAgIGlmIChfaGVhZGVyKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkoc2VsZiwgX2hlYWRlcik7XG5cbiAgICAgICAgaWYgKGtleSAmJiAoIW1hdGNoZXIgfHwgbWF0Y2hIZWFkZXJWYWx1ZShzZWxmLCBzZWxmW2tleV0sIGtleSwgbWF0Y2hlcikpKSB7XG4gICAgICAgICAgZGVsZXRlIHNlbGZba2V5XTtcblxuICAgICAgICAgIGRlbGV0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzQXJyYXkoaGVhZGVyKSkge1xuICAgICAgaGVhZGVyLmZvckVhY2goZGVsZXRlSGVhZGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlSGVhZGVyKGhlYWRlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlbGV0ZWQ7XG4gIH1cblxuICBjbGVhcihtYXRjaGVyKSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMpO1xuICAgIGxldCBpID0ga2V5cy5sZW5ndGg7XG4gICAgbGV0IGRlbGV0ZWQgPSBmYWxzZTtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICBpZighbWF0Y2hlciB8fCBtYXRjaEhlYWRlclZhbHVlKHRoaXMsIHRoaXNba2V5XSwga2V5LCBtYXRjaGVyLCB0cnVlKSkge1xuICAgICAgICBkZWxldGUgdGhpc1trZXldO1xuICAgICAgICBkZWxldGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGVsZXRlZDtcbiAgfVxuXG4gIG5vcm1hbGl6ZShmb3JtYXQpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG5cbiAgICB1dGlscy5mb3JFYWNoKHRoaXMsICh2YWx1ZSwgaGVhZGVyKSA9PiB7XG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KGhlYWRlcnMsIGhlYWRlcik7XG5cbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgc2VsZltrZXldID0gbm9ybWFsaXplVmFsdWUodmFsdWUpO1xuICAgICAgICBkZWxldGUgc2VsZltoZWFkZXJdO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBmb3JtYXQgPyBmb3JtYXRIZWFkZXIoaGVhZGVyKSA6IFN0cmluZyhoZWFkZXIpLnRyaW0oKTtcblxuICAgICAgaWYgKG5vcm1hbGl6ZWQgIT09IGhlYWRlcikge1xuICAgICAgICBkZWxldGUgc2VsZltoZWFkZXJdO1xuICAgICAgfVxuXG4gICAgICBzZWxmW25vcm1hbGl6ZWRdID0gbm9ybWFsaXplVmFsdWUodmFsdWUpO1xuXG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWRdID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgY29uY2F0KC4uLnRhcmdldHMpIHtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5jb25jYXQodGhpcywgLi4udGFyZ2V0cyk7XG4gIH1cblxuICB0b0pTT04oYXNTdHJpbmdzKSB7XG4gICAgY29uc3Qgb2JqID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIHV0aWxzLmZvckVhY2godGhpcywgKHZhbHVlLCBoZWFkZXIpID0+IHtcbiAgICAgIHZhbHVlICE9IG51bGwgJiYgdmFsdWUgIT09IGZhbHNlICYmIChvYmpbaGVhZGVyXSA9IGFzU3RyaW5ncyAmJiB1dGlscy5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLmpvaW4oJywgJykgOiB2YWx1ZSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMudG9KU09OKCkpW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyh0aGlzLnRvSlNPTigpKS5tYXAoKFtoZWFkZXIsIHZhbHVlXSkgPT4gaGVhZGVyICsgJzogJyArIHZhbHVlKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICByZXR1cm4gJ0F4aW9zSGVhZGVycyc7XG4gIH1cblxuICBzdGF0aWMgZnJvbSh0aGluZykge1xuICAgIHJldHVybiB0aGluZyBpbnN0YW5jZW9mIHRoaXMgPyB0aGluZyA6IG5ldyB0aGlzKHRoaW5nKTtcbiAgfVxuXG4gIHN0YXRpYyBjb25jYXQoZmlyc3QsIC4uLnRhcmdldHMpIHtcbiAgICBjb25zdCBjb21wdXRlZCA9IG5ldyB0aGlzKGZpcnN0KTtcblxuICAgIHRhcmdldHMuZm9yRWFjaCgodGFyZ2V0KSA9PiBjb21wdXRlZC5zZXQodGFyZ2V0KSk7XG5cbiAgICByZXR1cm4gY29tcHV0ZWQ7XG4gIH1cblxuICBzdGF0aWMgYWNjZXNzb3IoaGVhZGVyKSB7XG4gICAgY29uc3QgaW50ZXJuYWxzID0gdGhpc1skaW50ZXJuYWxzXSA9ICh0aGlzWyRpbnRlcm5hbHNdID0ge1xuICAgICAgYWNjZXNzb3JzOiB7fVxuICAgIH0pO1xuXG4gICAgY29uc3QgYWNjZXNzb3JzID0gaW50ZXJuYWxzLmFjY2Vzc29ycztcbiAgICBjb25zdCBwcm90b3R5cGUgPSB0aGlzLnByb3RvdHlwZTtcblxuICAgIGZ1bmN0aW9uIGRlZmluZUFjY2Vzc29yKF9oZWFkZXIpIHtcbiAgICAgIGNvbnN0IGxIZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoX2hlYWRlcik7XG5cbiAgICAgIGlmICghYWNjZXNzb3JzW2xIZWFkZXJdKSB7XG4gICAgICAgIGJ1aWxkQWNjZXNzb3JzKHByb3RvdHlwZSwgX2hlYWRlcik7XG4gICAgICAgIGFjY2Vzc29yc1tsSGVhZGVyXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdXRpbHMuaXNBcnJheShoZWFkZXIpID8gaGVhZGVyLmZvckVhY2goZGVmaW5lQWNjZXNzb3IpIDogZGVmaW5lQWNjZXNzb3IoaGVhZGVyKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5cbkF4aW9zSGVhZGVycy5hY2Nlc3NvcihbJ0NvbnRlbnQtVHlwZScsICdDb250ZW50LUxlbmd0aCcsICdBY2NlcHQnLCAnQWNjZXB0LUVuY29kaW5nJywgJ1VzZXItQWdlbnQnLCAnQXV0aG9yaXphdGlvbiddKTtcblxuLy8gcmVzZXJ2ZWQgbmFtZXMgaG90Zml4XG51dGlscy5yZWR1Y2VEZXNjcmlwdG9ycyhBeGlvc0hlYWRlcnMucHJvdG90eXBlLCAoe3ZhbHVlfSwga2V5KSA9PiB7XG4gIGxldCBtYXBwZWQgPSBrZXlbMF0udG9VcHBlckNhc2UoKSArIGtleS5zbGljZSgxKTsgLy8gbWFwIGBzZXRgID0+IGBTZXRgXG4gIHJldHVybiB7XG4gICAgZ2V0OiAoKSA9PiB2YWx1ZSxcbiAgICBzZXQoaGVhZGVyVmFsdWUpIHtcbiAgICAgIHRoaXNbbWFwcGVkXSA9IGhlYWRlclZhbHVlO1xuICAgIH1cbiAgfVxufSk7XG5cbnV0aWxzLmZyZWV6ZU1ldGhvZHMoQXhpb3NIZWFkZXJzKTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3NIZWFkZXJzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi4vZGVmYXVsdHMvaW5kZXguanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuLi9jb3JlL0F4aW9zSGVhZGVycy5qcyc7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7P09iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlIG9iamVjdFxuICpcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShmbnMsIHJlc3BvbnNlKSB7XG4gIGNvbnN0IGNvbmZpZyA9IHRoaXMgfHwgZGVmYXVsdHM7XG4gIGNvbnN0IGNvbnRleHQgPSByZXNwb25zZSB8fCBjb25maWc7XG4gIGNvbnN0IGhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShjb250ZXh0LmhlYWRlcnMpO1xuICBsZXQgZGF0YSA9IGNvbnRleHQuZGF0YTtcblxuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuLmNhbGwoY29uZmlnLCBkYXRhLCBoZWFkZXJzLm5vcm1hbGl6ZSgpLCByZXNwb25zZSA/IHJlc3BvbnNlLnN0YXR1cyA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuXG4gIGhlYWRlcnMubm9ybWFsaXplKCk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5cbi8qKlxuICogQSBgQ2FuY2VsZWRFcnJvcmAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge09iamVjdD19IHJlcXVlc3QgVGhlIHJlcXVlc3QuXG4gKlxuICogQHJldHVybnMge0NhbmNlbGVkRXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5mdW5jdGlvbiBDYW5jZWxlZEVycm9yKG1lc3NhZ2UsIGNvbmZpZywgcmVxdWVzdCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXEtbnVsbCxlcWVxZXFcbiAgQXhpb3NFcnJvci5jYWxsKHRoaXMsIG1lc3NhZ2UgPT0gbnVsbCA/ICdjYW5jZWxlZCcgOiBtZXNzYWdlLCBBeGlvc0Vycm9yLkVSUl9DQU5DRUxFRCwgY29uZmlnLCByZXF1ZXN0KTtcbiAgdGhpcy5uYW1lID0gJ0NhbmNlbGVkRXJyb3InO1xufVxuXG51dGlscy5pbmhlcml0cyhDYW5jZWxlZEVycm9yLCBBeGlvc0Vycm9yLCB7XG4gIF9fQ0FOQ0VMX186IHRydWVcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBDYW5jZWxlZEVycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuL0F4aW9zRXJyb3IuanMnO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSByZXNwb25zZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgY29uc3QgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIFtBeGlvc0Vycm9yLkVSUl9CQURfUkVRVUVTVCwgQXhpb3NFcnJvci5FUlJfQkFEX1JFU1BPTlNFXVtNYXRoLmZsb29yKHJlc3BvbnNlLnN0YXR1cyAvIDEwMCkgLSA0XSxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ2FsY3VsYXRlIGRhdGEgbWF4UmF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IFtzYW1wbGVzQ291bnQ9IDEwXVxuICogQHBhcmFtIHtOdW1iZXJ9IFttaW49IDEwMDBdXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIHNwZWVkb21ldGVyKHNhbXBsZXNDb3VudCwgbWluKSB7XG4gIHNhbXBsZXNDb3VudCA9IHNhbXBsZXNDb3VudCB8fCAxMDtcbiAgY29uc3QgYnl0ZXMgPSBuZXcgQXJyYXkoc2FtcGxlc0NvdW50KTtcbiAgY29uc3QgdGltZXN0YW1wcyA9IG5ldyBBcnJheShzYW1wbGVzQ291bnQpO1xuICBsZXQgaGVhZCA9IDA7XG4gIGxldCB0YWlsID0gMDtcbiAgbGV0IGZpcnN0U2FtcGxlVFM7XG5cbiAgbWluID0gbWluICE9PSB1bmRlZmluZWQgPyBtaW4gOiAxMDAwO1xuXG4gIHJldHVybiBmdW5jdGlvbiBwdXNoKGNodW5rTGVuZ3RoKSB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcblxuICAgIGNvbnN0IHN0YXJ0ZWRBdCA9IHRpbWVzdGFtcHNbdGFpbF07XG5cbiAgICBpZiAoIWZpcnN0U2FtcGxlVFMpIHtcbiAgICAgIGZpcnN0U2FtcGxlVFMgPSBub3c7XG4gICAgfVxuXG4gICAgYnl0ZXNbaGVhZF0gPSBjaHVua0xlbmd0aDtcbiAgICB0aW1lc3RhbXBzW2hlYWRdID0gbm93O1xuXG4gICAgbGV0IGkgPSB0YWlsO1xuICAgIGxldCBieXRlc0NvdW50ID0gMDtcblxuICAgIHdoaWxlIChpICE9PSBoZWFkKSB7XG4gICAgICBieXRlc0NvdW50ICs9IGJ5dGVzW2krK107XG4gICAgICBpID0gaSAlIHNhbXBsZXNDb3VudDtcbiAgICB9XG5cbiAgICBoZWFkID0gKGhlYWQgKyAxKSAlIHNhbXBsZXNDb3VudDtcblxuICAgIGlmIChoZWFkID09PSB0YWlsKSB7XG4gICAgICB0YWlsID0gKHRhaWwgKyAxKSAlIHNhbXBsZXNDb3VudDtcbiAgICB9XG5cbiAgICBpZiAobm93IC0gZmlyc3RTYW1wbGVUUyA8IG1pbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHBhc3NlZCA9IHN0YXJ0ZWRBdCAmJiBub3cgLSBzdGFydGVkQXQ7XG5cbiAgICByZXR1cm4gcGFzc2VkID8gTWF0aC5yb3VuZChieXRlc0NvdW50ICogMTAwMCAvIHBhc3NlZCkgOiB1bmRlZmluZWQ7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNwZWVkb21ldGVyO1xuIiwiaW1wb3J0IHNwZWVkb21ldGVyIGZyb20gXCIuL3NwZWVkb21ldGVyLmpzXCI7XG5pbXBvcnQgdGhyb3R0bGUgZnJvbSBcIi4vdGhyb3R0bGUuanNcIjtcbmltcG9ydCB1dGlscyBmcm9tIFwiLi4vdXRpbHMuanNcIjtcblxuZXhwb3J0IGNvbnN0IHByb2dyZXNzRXZlbnRSZWR1Y2VyID0gKGxpc3RlbmVyLCBpc0Rvd25sb2FkU3RyZWFtLCBmcmVxID0gMykgPT4ge1xuICBsZXQgYnl0ZXNOb3RpZmllZCA9IDA7XG4gIGNvbnN0IF9zcGVlZG9tZXRlciA9IHNwZWVkb21ldGVyKDUwLCAyNTApO1xuXG4gIHJldHVybiB0aHJvdHRsZShlID0+IHtcbiAgICBjb25zdCBsb2FkZWQgPSBlLmxvYWRlZDtcbiAgICBjb25zdCB0b3RhbCA9IGUubGVuZ3RoQ29tcHV0YWJsZSA/IGUudG90YWwgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgcHJvZ3Jlc3NCeXRlcyA9IGxvYWRlZCAtIGJ5dGVzTm90aWZpZWQ7XG4gICAgY29uc3QgcmF0ZSA9IF9zcGVlZG9tZXRlcihwcm9ncmVzc0J5dGVzKTtcbiAgICBjb25zdCBpblJhbmdlID0gbG9hZGVkIDw9IHRvdGFsO1xuXG4gICAgYnl0ZXNOb3RpZmllZCA9IGxvYWRlZDtcblxuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICBsb2FkZWQsXG4gICAgICB0b3RhbCxcbiAgICAgIHByb2dyZXNzOiB0b3RhbCA/IChsb2FkZWQgLyB0b3RhbCkgOiB1bmRlZmluZWQsXG4gICAgICBieXRlczogcHJvZ3Jlc3NCeXRlcyxcbiAgICAgIHJhdGU6IHJhdGUgPyByYXRlIDogdW5kZWZpbmVkLFxuICAgICAgZXN0aW1hdGVkOiByYXRlICYmIHRvdGFsICYmIGluUmFuZ2UgPyAodG90YWwgLSBsb2FkZWQpIC8gcmF0ZSA6IHVuZGVmaW5lZCxcbiAgICAgIGV2ZW50OiBlLFxuICAgICAgbGVuZ3RoQ29tcHV0YWJsZTogdG90YWwgIT0gbnVsbCxcbiAgICAgIFtpc0Rvd25sb2FkU3RyZWFtID8gJ2Rvd25sb2FkJyA6ICd1cGxvYWQnXTogdHJ1ZVxuICAgIH07XG5cbiAgICBsaXN0ZW5lcihkYXRhKTtcbiAgfSwgZnJlcSk7XG59XG5cbmV4cG9ydCBjb25zdCBwcm9ncmVzc0V2ZW50RGVjb3JhdG9yID0gKHRvdGFsLCB0aHJvdHRsZWQpID0+IHtcbiAgY29uc3QgbGVuZ3RoQ29tcHV0YWJsZSA9IHRvdGFsICE9IG51bGw7XG5cbiAgcmV0dXJuIFsobG9hZGVkKSA9PiB0aHJvdHRsZWRbMF0oe1xuICAgIGxlbmd0aENvbXB1dGFibGUsXG4gICAgdG90YWwsXG4gICAgbG9hZGVkXG4gIH0pLCB0aHJvdHRsZWRbMV1dO1xufVxuXG5leHBvcnQgY29uc3QgYXN5bmNEZWNvcmF0b3IgPSAoZm4pID0+ICguLi5hcmdzKSA9PiB1dGlscy5hc2FwKCgpID0+IGZuKC4uLmFyZ3MpKTtcbiIsIi8qKlxuICogVGhyb3R0bGUgZGVjb3JhdG9yXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHBhcmFtIHtOdW1iZXJ9IGZyZXFcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiB0aHJvdHRsZShmbiwgZnJlcSkge1xuICBsZXQgdGltZXN0YW1wID0gMDtcbiAgbGV0IHRocmVzaG9sZCA9IDEwMDAgLyBmcmVxO1xuICBsZXQgbGFzdEFyZ3M7XG4gIGxldCB0aW1lcjtcblxuICBjb25zdCBpbnZva2UgPSAoYXJncywgbm93ID0gRGF0ZS5ub3coKSkgPT4ge1xuICAgIHRpbWVzdGFtcCA9IG5vdztcbiAgICBsYXN0QXJncyA9IG51bGw7XG4gICAgaWYgKHRpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgdGltZXIgPSBudWxsO1xuICAgIH1cbiAgICBmbi5hcHBseShudWxsLCBhcmdzKTtcbiAgfVxuXG4gIGNvbnN0IHRocm90dGxlZCA9ICguLi5hcmdzKSA9PiB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICBjb25zdCBwYXNzZWQgPSBub3cgLSB0aW1lc3RhbXA7XG4gICAgaWYgKCBwYXNzZWQgPj0gdGhyZXNob2xkKSB7XG4gICAgICBpbnZva2UoYXJncywgbm93KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGFzdEFyZ3MgPSBhcmdzO1xuICAgICAgaWYgKCF0aW1lcikge1xuICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgICAgICBpbnZva2UobGFzdEFyZ3MpXG4gICAgICAgIH0sIHRocmVzaG9sZCAtIHBhc3NlZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29uc3QgZmx1c2ggPSAoKSA9PiBsYXN0QXJncyAmJiBpbnZva2UobGFzdEFyZ3MpO1xuXG4gIHJldHVybiBbdGhyb3R0bGVkLCBmbHVzaF07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRocm90dGxlO1xuIiwiaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgcGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyRW52ID8gKChvcmlnaW4sIGlzTVNJRSkgPT4gKHVybCkgPT4ge1xuICB1cmwgPSBuZXcgVVJMKHVybCwgcGxhdGZvcm0ub3JpZ2luKTtcblxuICByZXR1cm4gKFxuICAgIG9yaWdpbi5wcm90b2NvbCA9PT0gdXJsLnByb3RvY29sICYmXG4gICAgb3JpZ2luLmhvc3QgPT09IHVybC5ob3N0ICYmXG4gICAgKGlzTVNJRSB8fCBvcmlnaW4ucG9ydCA9PT0gdXJsLnBvcnQpXG4gICk7XG59KShcbiAgbmV3IFVSTChwbGF0Zm9ybS5vcmlnaW4pLFxuICBwbGF0Zm9ybS5uYXZpZ2F0b3IgJiYgLyhtc2llfHRyaWRlbnQpL2kudGVzdChwbGF0Zm9ybS5uYXZpZ2F0b3IudXNlckFnZW50KVxuKSA6ICgpID0+IHRydWU7XG4iLCJpbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuXG5leHBvcnQgZGVmYXVsdCBwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICB7XG4gICAgd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICBjb25zdCBjb29raWUgPSBbbmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSldO1xuXG4gICAgICB1dGlscy5pc051bWJlcihleHBpcmVzKSAmJiBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG5cbiAgICAgIHV0aWxzLmlzU3RyaW5nKHBhdGgpICYmIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcblxuICAgICAgdXRpbHMuaXNTdHJpbmcoZG9tYWluKSAmJiBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuXG4gICAgICBzZWN1cmUgPT09IHRydWUgJiYgY29va2llLnB1c2goJ3NlY3VyZScpO1xuXG4gICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICB9LFxuXG4gICAgcmVhZChuYW1lKSB7XG4gICAgICBjb25zdCBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgIH0sXG5cbiAgICByZW1vdmUobmFtZSkge1xuICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICB9XG4gIH1cblxuICA6XG5cbiAgLy8gTm9uLXN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICB7XG4gICAgd3JpdGUoKSB7fSxcbiAgICByZWFkKCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICByZW1vdmUoKSB7fVxuICB9O1xuXG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBpc0Fic29sdXRlVVJMIGZyb20gJy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyc7XG5pbXBvcnQgY29tYmluZVVSTHMgZnJvbSAnLi4vaGVscGVycy9jb21iaW5lVVJMcy5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBiYXNlVVJMIHdpdGggdGhlIHJlcXVlc3RlZFVSTCxcbiAqIG9ubHkgd2hlbiB0aGUgcmVxdWVzdGVkVVJMIGlzIG5vdCBhbHJlYWR5IGFuIGFic29sdXRlIFVSTC5cbiAqIElmIHRoZSByZXF1ZXN0VVJMIGlzIGFic29sdXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJlcXVlc3RlZFVSTCB1bnRvdWNoZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdGVkVVJMIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCB0byBjb21iaW5lXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGQrXFwtLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvP1xcLyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSBcIi4vQXhpb3NIZWFkZXJzLmpzXCI7XG5cbmNvbnN0IGhlYWRlcnNUb09iamVjdCA9ICh0aGluZykgPT4gdGhpbmcgaW5zdGFuY2VvZiBBeGlvc0hlYWRlcnMgPyB7IC4uLnRoaW5nIH0gOiB0aGluZztcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgY29uc3QgY29uZmlnID0ge307XG5cbiAgZnVuY3Rpb24gZ2V0TWVyZ2VkVmFsdWUodGFyZ2V0LCBzb3VyY2UsIHByb3AsIGNhc2VsZXNzKSB7XG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiB1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZS5jYWxsKHtjYXNlbGVzc30sIHRhcmdldCwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHt9LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gc291cmNlLnNsaWNlKCk7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhhLCBiLCBwcm9wICwgY2FzZWxlc3MpIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoYSwgYiwgcHJvcCAsIGNhc2VsZXNzKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChhKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYSwgcHJvcCAsIGNhc2VsZXNzKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihhLCBiKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChiKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYik7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIoYSwgYikge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYikpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGIpO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGEpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEaXJlY3RLZXlzKGEsIGIsIHByb3ApIHtcbiAgICBpZiAocHJvcCBpbiBjb25maWcyKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoYSwgYik7XG4gICAgfSBlbHNlIGlmIChwcm9wIGluIGNvbmZpZzEpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGEpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IG1lcmdlTWFwID0ge1xuICAgIHVybDogdmFsdWVGcm9tQ29uZmlnMixcbiAgICBtZXRob2Q6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgZGF0YTogdmFsdWVGcm9tQ29uZmlnMixcbiAgICBiYXNlVVJMOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRyYW5zZm9ybVJlcXVlc3Q6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdHJhbnNmb3JtUmVzcG9uc2U6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgcGFyYW1zU2VyaWFsaXplcjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0aW1lb3V0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRpbWVvdXRNZXNzYWdlOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHdpdGhDcmVkZW50aWFsczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB3aXRoWFNSRlRva2VuOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGFkYXB0ZXI6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgcmVzcG9uc2VUeXBlOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHhzcmZDb29raWVOYW1lOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHhzcmZIZWFkZXJOYW1lOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG9uVXBsb2FkUHJvZ3Jlc3M6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgb25Eb3dubG9hZFByb2dyZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGRlY29tcHJlc3M6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgbWF4Q29udGVudExlbmd0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBtYXhCb2R5TGVuZ3RoOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGJlZm9yZVJlZGlyZWN0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRyYW5zcG9ydDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBodHRwQWdlbnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgaHR0cHNBZ2VudDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBjYW5jZWxUb2tlbjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBzb2NrZXRQYXRoOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHJlc3BvbnNlRW5jb2Rpbmc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdmFsaWRhdGVTdGF0dXM6IG1lcmdlRGlyZWN0S2V5cyxcbiAgICBoZWFkZXJzOiAoYSwgYiAsIHByb3ApID0+IG1lcmdlRGVlcFByb3BlcnRpZXMoaGVhZGVyc1RvT2JqZWN0KGEpLCBoZWFkZXJzVG9PYmplY3QoYikscHJvcCwgdHJ1ZSlcbiAgfTtcblxuICB1dGlscy5mb3JFYWNoKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZzEsIGNvbmZpZzIpKSwgZnVuY3Rpb24gY29tcHV0ZUNvbmZpZ1ZhbHVlKHByb3ApIHtcbiAgICBjb25zdCBtZXJnZSA9IG1lcmdlTWFwW3Byb3BdIHx8IG1lcmdlRGVlcFByb3BlcnRpZXM7XG4gICAgY29uc3QgY29uZmlnVmFsdWUgPSBtZXJnZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdLCBwcm9wKTtcbiAgICAodXRpbHMuaXNVbmRlZmluZWQoY29uZmlnVmFsdWUpICYmIG1lcmdlICE9PSBtZXJnZURpcmVjdEtleXMpIHx8IChjb25maWdbcHJvcF0gPSBjb25maWdWYWx1ZSk7XG4gIH0pO1xuXG4gIHJldHVybiBjb25maWc7XG59XG4iLCJpbXBvcnQgcGxhdGZvcm0gZnJvbSBcIi4uL3BsYXRmb3JtL2luZGV4LmpzXCI7XG5pbXBvcnQgdXRpbHMgZnJvbSBcIi4uL3V0aWxzLmpzXCI7XG5pbXBvcnQgaXNVUkxTYW1lT3JpZ2luIGZyb20gXCIuL2lzVVJMU2FtZU9yaWdpbi5qc1wiO1xuaW1wb3J0IGNvb2tpZXMgZnJvbSBcIi4vY29va2llcy5qc1wiO1xuaW1wb3J0IGJ1aWxkRnVsbFBhdGggZnJvbSBcIi4uL2NvcmUvYnVpbGRGdWxsUGF0aC5qc1wiO1xuaW1wb3J0IG1lcmdlQ29uZmlnIGZyb20gXCIuLi9jb3JlL21lcmdlQ29uZmlnLmpzXCI7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gXCIuLi9jb3JlL0F4aW9zSGVhZGVycy5qc1wiO1xuaW1wb3J0IGJ1aWxkVVJMIGZyb20gXCIuL2J1aWxkVVJMLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChjb25maWcpID0+IHtcbiAgY29uc3QgbmV3Q29uZmlnID0gbWVyZ2VDb25maWcoe30sIGNvbmZpZyk7XG5cbiAgbGV0IHtkYXRhLCB3aXRoWFNSRlRva2VuLCB4c3JmSGVhZGVyTmFtZSwgeHNyZkNvb2tpZU5hbWUsIGhlYWRlcnMsIGF1dGh9ID0gbmV3Q29uZmlnO1xuXG4gIG5ld0NvbmZpZy5oZWFkZXJzID0gaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKGhlYWRlcnMpO1xuXG4gIG5ld0NvbmZpZy51cmwgPSBidWlsZFVSTChidWlsZEZ1bGxQYXRoKG5ld0NvbmZpZy5iYXNlVVJMLCBuZXdDb25maWcudXJsKSwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpO1xuXG4gIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgaWYgKGF1dGgpIHtcbiAgICBoZWFkZXJzLnNldCgnQXV0aG9yaXphdGlvbicsICdCYXNpYyAnICtcbiAgICAgIGJ0b2EoKGF1dGgudXNlcm5hbWUgfHwgJycpICsgJzonICsgKGF1dGgucGFzc3dvcmQgPyB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoYXV0aC5wYXNzd29yZCkpIDogJycpKVxuICAgICk7XG4gIH1cblxuICBsZXQgY29udGVudFR5cGU7XG5cbiAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkpIHtcbiAgICBpZiAocGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyRW52IHx8IHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudikge1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZSh1bmRlZmluZWQpOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfSBlbHNlIGlmICgoY29udGVudFR5cGUgPSBoZWFkZXJzLmdldENvbnRlbnRUeXBlKCkpICE9PSBmYWxzZSkge1xuICAgICAgLy8gZml4IHNlbWljb2xvbiBkdXBsaWNhdGlvbiBpc3N1ZSBmb3IgUmVhY3ROYXRpdmUgRm9ybURhdGEgaW1wbGVtZW50YXRpb25cbiAgICAgIGNvbnN0IFt0eXBlLCAuLi50b2tlbnNdID0gY29udGVudFR5cGUgPyBjb250ZW50VHlwZS5zcGxpdCgnOycpLm1hcCh0b2tlbiA9PiB0b2tlbi50cmltKCkpLmZpbHRlcihCb29sZWFuKSA6IFtdO1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZShbdHlwZSB8fCAnbXVsdGlwYXJ0L2Zvcm0tZGF0YScsIC4uLnRva2Vuc10uam9pbignOyAnKSk7XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuXG4gIGlmIChwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYpIHtcbiAgICB3aXRoWFNSRlRva2VuICYmIHV0aWxzLmlzRnVuY3Rpb24od2l0aFhTUkZUb2tlbikgJiYgKHdpdGhYU1JGVG9rZW4gPSB3aXRoWFNSRlRva2VuKG5ld0NvbmZpZykpO1xuXG4gICAgaWYgKHdpdGhYU1JGVG9rZW4gfHwgKHdpdGhYU1JGVG9rZW4gIT09IGZhbHNlICYmIGlzVVJMU2FtZU9yaWdpbihuZXdDb25maWcudXJsKSkpIHtcbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgY29uc3QgeHNyZlZhbHVlID0geHNyZkhlYWRlck5hbWUgJiYgeHNyZkNvb2tpZU5hbWUgJiYgY29va2llcy5yZWFkKHhzcmZDb29raWVOYW1lKTtcblxuICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICBoZWFkZXJzLnNldCh4c3JmSGVhZGVyTmFtZSwgeHNyZlZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3Q29uZmlnO1xufVxuXG4iLCJpbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgc2V0dGxlIGZyb20gJy4vLi4vY29yZS9zZXR0bGUuanMnO1xuaW1wb3J0IHRyYW5zaXRpb25hbERlZmF1bHRzIGZyb20gJy4uL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IHBhcnNlUHJvdG9jb2wgZnJvbSAnLi4vaGVscGVycy9wYXJzZVByb3RvY29sLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcbmltcG9ydCB7cHJvZ3Jlc3NFdmVudFJlZHVjZXJ9IGZyb20gJy4uL2hlbHBlcnMvcHJvZ3Jlc3NFdmVudFJlZHVjZXIuanMnO1xuaW1wb3J0IHJlc29sdmVDb25maWcgZnJvbSBcIi4uL2hlbHBlcnMvcmVzb2x2ZUNvbmZpZy5qc1wiO1xuXG5jb25zdCBpc1hIUkFkYXB0ZXJTdXBwb3J0ZWQgPSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnO1xuXG5leHBvcnQgZGVmYXVsdCBpc1hIUkFkYXB0ZXJTdXBwb3J0ZWQgJiYgZnVuY3Rpb24gKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIGNvbnN0IF9jb25maWcgPSByZXNvbHZlQ29uZmlnKGNvbmZpZyk7XG4gICAgbGV0IHJlcXVlc3REYXRhID0gX2NvbmZpZy5kYXRhO1xuICAgIGNvbnN0IHJlcXVlc3RIZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oX2NvbmZpZy5oZWFkZXJzKS5ub3JtYWxpemUoKTtcbiAgICBsZXQge3Jlc3BvbnNlVHlwZSwgb25VcGxvYWRQcm9ncmVzcywgb25Eb3dubG9hZFByb2dyZXNzfSA9IF9jb25maWc7XG4gICAgbGV0IG9uQ2FuY2VsZWQ7XG4gICAgbGV0IHVwbG9hZFRocm90dGxlZCwgZG93bmxvYWRUaHJvdHRsZWQ7XG4gICAgbGV0IGZsdXNoVXBsb2FkLCBmbHVzaERvd25sb2FkO1xuXG4gICAgZnVuY3Rpb24gZG9uZSgpIHtcbiAgICAgIGZsdXNoVXBsb2FkICYmIGZsdXNoVXBsb2FkKCk7IC8vIGZsdXNoIGV2ZW50c1xuICAgICAgZmx1c2hEb3dubG9hZCAmJiBmbHVzaERvd25sb2FkKCk7IC8vIGZsdXNoIGV2ZW50c1xuXG4gICAgICBfY29uZmlnLmNhbmNlbFRva2VuICYmIF9jb25maWcuY2FuY2VsVG9rZW4udW5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG5cbiAgICAgIF9jb25maWcuc2lnbmFsICYmIF9jb25maWcuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgfVxuXG4gICAgbGV0IHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIHJlcXVlc3Qub3BlbihfY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBfY29uZmlnLnVybCwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IF9jb25maWcudGltZW91dDtcblxuICAgIGZ1bmN0aW9uIG9ubG9hZGVuZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgY29uc3QgcmVzcG9uc2VIZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oXG4gICAgICAgICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgJiYgcmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuICAgICAgKTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9ICFyZXNwb25zZVR5cGUgfHwgcmVzcG9uc2VUeXBlID09PSAndGV4dCcgfHwgcmVzcG9uc2VUeXBlID09PSAnanNvbicgP1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUoZnVuY3Rpb24gX3Jlc29sdmUodmFsdWUpIHtcbiAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIGZ1bmN0aW9uIF9yZWplY3QoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICgnb25sb2FkZW5kJyBpbiByZXF1ZXN0KSB7XG4gICAgICAvLyBVc2Ugb25sb2FkZW5kIGlmIGF2YWlsYWJsZVxuICAgICAgcmVxdWVzdC5vbmxvYWRlbmQgPSBvbmxvYWRlbmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGUgdG8gZW11bGF0ZSBvbmxvYWRlbmRcbiAgICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyByZWFkeXN0YXRlIGhhbmRsZXIgaXMgY2FsbGluZyBiZWZvcmUgb25lcnJvciBvciBvbnRpbWVvdXQgaGFuZGxlcnMsXG4gICAgICAgIC8vIHNvIHdlIHNob3VsZCBjYWxsIG9ubG9hZGVuZCBvbiB0aGUgbmV4dCAndGljaydcbiAgICAgICAgc2V0VGltZW91dChvbmxvYWRlbmQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgYnJvd3NlciByZXF1ZXN0IGNhbmNlbGxhdGlvbiAoYXMgb3Bwb3NlZCB0byBhIG1hbnVhbCBjYW5jZWxsYXRpb24pXG4gICAgcmVxdWVzdC5vbmFib3J0ID0gZnVuY3Rpb24gaGFuZGxlQWJvcnQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcsIEF4aW9zRXJyb3IuRUNPTk5BQk9SVEVELCBjb25maWcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBBeGlvc0Vycm9yLkVSUl9ORVRXT1JLLCBjb25maWcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgbGV0IHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBfY29uZmlnLnRpbWVvdXQgPyAndGltZW91dCBvZiAnICsgX2NvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJyA6ICd0aW1lb3V0IGV4Y2VlZGVkJztcbiAgICAgIGNvbnN0IHRyYW5zaXRpb25hbCA9IF9jb25maWcudHJhbnNpdGlvbmFsIHx8IHRyYW5zaXRpb25hbERlZmF1bHRzO1xuICAgICAgaWYgKF9jb25maWcudGltZW91dEVycm9yTWVzc2FnZSkge1xuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlID0gX2NvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlO1xuICAgICAgfVxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlLFxuICAgICAgICB0cmFuc2l0aW9uYWwuY2xhcmlmeVRpbWVvdXRFcnJvciA/IEF4aW9zRXJyb3IuRVRJTUVET1VUIDogQXhpb3NFcnJvci5FQ09OTkFCT1JURUQsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgIHJlcXVlc3REYXRhID09PSB1bmRlZmluZWQgJiYgcmVxdWVzdEhlYWRlcnMuc2V0Q29udGVudFR5cGUobnVsbCk7XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycy50b0pTT04oKSwgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoX2NvbmZpZy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9ICEhX2NvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChyZXNwb25zZVR5cGUgJiYgcmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gX2NvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmIChvbkRvd25sb2FkUHJvZ3Jlc3MpIHtcbiAgICAgIChbZG93bmxvYWRUaHJvdHRsZWQsIGZsdXNoRG93bmxvYWRdID0gcHJvZ3Jlc3NFdmVudFJlZHVjZXIob25Eb3dubG9hZFByb2dyZXNzLCB0cnVlKSk7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgZG93bmxvYWRUaHJvdHRsZWQpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKG9uVXBsb2FkUHJvZ3Jlc3MgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIChbdXBsb2FkVGhyb3R0bGVkLCBmbHVzaFVwbG9hZF0gPSBwcm9ncmVzc0V2ZW50UmVkdWNlcihvblVwbG9hZFByb2dyZXNzKSk7XG5cbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgdXBsb2FkVGhyb3R0bGVkKTtcblxuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcignbG9hZGVuZCcsIGZsdXNoVXBsb2FkKTtcbiAgICB9XG5cbiAgICBpZiAoX2NvbmZpZy5jYW5jZWxUb2tlbiB8fCBfY29uZmlnLnNpZ25hbCkge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgIG9uQ2FuY2VsZWQgPSBjYW5jZWwgPT4ge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVqZWN0KCFjYW5jZWwgfHwgY2FuY2VsLnR5cGUgPyBuZXcgQ2FuY2VsZWRFcnJvcihudWxsLCBjb25maWcsIHJlcXVlc3QpIDogY2FuY2VsKTtcbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIF9jb25maWcuY2FuY2VsVG9rZW4gJiYgX2NvbmZpZy5jYW5jZWxUb2tlbi5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICBpZiAoX2NvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgX2NvbmZpZy5zaWduYWwuYWJvcnRlZCA/IG9uQ2FuY2VsZWQoKSA6IF9jb25maWcuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcHJvdG9jb2wgPSBwYXJzZVByb3RvY29sKF9jb25maWcudXJsKTtcblxuICAgIGlmIChwcm90b2NvbCAmJiBwbGF0Zm9ybS5wcm90b2NvbHMuaW5kZXhPZihwcm90b2NvbCkgPT09IC0xKSB7XG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ1Vuc3VwcG9ydGVkIHByb3RvY29sICcgKyBwcm90b2NvbCArICc6JywgQXhpb3NFcnJvci5FUlJfQkFEX1JFUVVFU1QsIGNvbmZpZykpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSB8fCBudWxsKTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhcnNlUHJvdG9jb2wodXJsKSB7XG4gIGNvbnN0IG1hdGNoID0gL14oWy0rXFx3XXsxLDI1fSkoOj9cXC9cXC98OikvLmV4ZWModXJsKTtcbiAgcmV0dXJuIG1hdGNoICYmIG1hdGNoWzFdIHx8ICcnO1xufVxuIiwiaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSBcIi4uL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzXCI7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tIFwiLi4vY29yZS9BeGlvc0Vycm9yLmpzXCI7XG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuXG5jb25zdCBjb21wb3NlU2lnbmFscyA9IChzaWduYWxzLCB0aW1lb3V0KSA9PiB7XG4gIGNvbnN0IHtsZW5ndGh9ID0gKHNpZ25hbHMgPSBzaWduYWxzID8gc2lnbmFscy5maWx0ZXIoQm9vbGVhbikgOiBbXSk7XG5cbiAgaWYgKHRpbWVvdXQgfHwgbGVuZ3RoKSB7XG4gICAgbGV0IGNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG5cbiAgICBsZXQgYWJvcnRlZDtcblxuICAgIGNvbnN0IG9uYWJvcnQgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICBpZiAoIWFib3J0ZWQpIHtcbiAgICAgICAgYWJvcnRlZCA9IHRydWU7XG4gICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgIGNvbnN0IGVyciA9IHJlYXNvbiBpbnN0YW5jZW9mIEVycm9yID8gcmVhc29uIDogdGhpcy5yZWFzb247XG4gICAgICAgIGNvbnRyb2xsZXIuYWJvcnQoZXJyIGluc3RhbmNlb2YgQXhpb3NFcnJvciA/IGVyciA6IG5ldyBDYW5jZWxlZEVycm9yKGVyciBpbnN0YW5jZW9mIEVycm9yID8gZXJyLm1lc3NhZ2UgOiBlcnIpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgdGltZXIgPSB0aW1lb3V0ICYmIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgb25hYm9ydChuZXcgQXhpb3NFcnJvcihgdGltZW91dCAke3RpbWVvdXR9IG9mIG1zIGV4Y2VlZGVkYCwgQXhpb3NFcnJvci5FVElNRURPVVQpKVxuICAgIH0sIHRpbWVvdXQpXG5cbiAgICBjb25zdCB1bnN1YnNjcmliZSA9ICgpID0+IHtcbiAgICAgIGlmIChzaWduYWxzKSB7XG4gICAgICAgIHRpbWVyICYmIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgICAgc2lnbmFscy5mb3JFYWNoKHNpZ25hbCA9PiB7XG4gICAgICAgICAgc2lnbmFsLnVuc3Vic2NyaWJlID8gc2lnbmFsLnVuc3Vic2NyaWJlKG9uYWJvcnQpIDogc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25hYm9ydCk7XG4gICAgICAgIH0pO1xuICAgICAgICBzaWduYWxzID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzaWduYWxzLmZvckVhY2goKHNpZ25hbCkgPT4gc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25hYm9ydCkpO1xuXG4gICAgY29uc3Qge3NpZ25hbH0gPSBjb250cm9sbGVyO1xuXG4gICAgc2lnbmFsLnVuc3Vic2NyaWJlID0gKCkgPT4gdXRpbHMuYXNhcCh1bnN1YnNjcmliZSk7XG5cbiAgICByZXR1cm4gc2lnbmFsO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvc2VTaWduYWxzO1xuIiwiXG5leHBvcnQgY29uc3Qgc3RyZWFtQ2h1bmsgPSBmdW5jdGlvbiogKGNodW5rLCBjaHVua1NpemUpIHtcbiAgbGV0IGxlbiA9IGNodW5rLmJ5dGVMZW5ndGg7XG5cbiAgaWYgKCFjaHVua1NpemUgfHwgbGVuIDwgY2h1bmtTaXplKSB7XG4gICAgeWllbGQgY2h1bms7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IHBvcyA9IDA7XG4gIGxldCBlbmQ7XG5cbiAgd2hpbGUgKHBvcyA8IGxlbikge1xuICAgIGVuZCA9IHBvcyArIGNodW5rU2l6ZTtcbiAgICB5aWVsZCBjaHVuay5zbGljZShwb3MsIGVuZCk7XG4gICAgcG9zID0gZW5kO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCByZWFkQnl0ZXMgPSBhc3luYyBmdW5jdGlvbiogKGl0ZXJhYmxlLCBjaHVua1NpemUpIHtcbiAgZm9yIGF3YWl0IChjb25zdCBjaHVuayBvZiByZWFkU3RyZWFtKGl0ZXJhYmxlKSkge1xuICAgIHlpZWxkKiBzdHJlYW1DaHVuayhjaHVuaywgY2h1bmtTaXplKTtcbiAgfVxufVxuXG5jb25zdCByZWFkU3RyZWFtID0gYXN5bmMgZnVuY3Rpb24qIChzdHJlYW0pIHtcbiAgaWYgKHN0cmVhbVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0pIHtcbiAgICB5aWVsZCogc3RyZWFtO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHJlYWRlciA9IHN0cmVhbS5nZXRSZWFkZXIoKTtcbiAgdHJ5IHtcbiAgICBmb3IgKDs7KSB7XG4gICAgICBjb25zdCB7ZG9uZSwgdmFsdWV9ID0gYXdhaXQgcmVhZGVyLnJlYWQoKTtcbiAgICAgIGlmIChkb25lKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgeWllbGQgdmFsdWU7XG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIGF3YWl0IHJlYWRlci5jYW5jZWwoKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgdHJhY2tTdHJlYW0gPSAoc3RyZWFtLCBjaHVua1NpemUsIG9uUHJvZ3Jlc3MsIG9uRmluaXNoKSA9PiB7XG4gIGNvbnN0IGl0ZXJhdG9yID0gcmVhZEJ5dGVzKHN0cmVhbSwgY2h1bmtTaXplKTtcblxuICBsZXQgYnl0ZXMgPSAwO1xuICBsZXQgZG9uZTtcbiAgbGV0IF9vbkZpbmlzaCA9IChlKSA9PiB7XG4gICAgaWYgKCFkb25lKSB7XG4gICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIG9uRmluaXNoICYmIG9uRmluaXNoKGUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgUmVhZGFibGVTdHJlYW0oe1xuICAgIGFzeW5jIHB1bGwoY29udHJvbGxlcikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3Qge2RvbmUsIHZhbHVlfSA9IGF3YWl0IGl0ZXJhdG9yLm5leHQoKTtcblxuICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgX29uRmluaXNoKCk7XG4gICAgICAgICAgY29udHJvbGxlci5jbG9zZSgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBsZW4gPSB2YWx1ZS5ieXRlTGVuZ3RoO1xuICAgICAgICBpZiAob25Qcm9ncmVzcykge1xuICAgICAgICAgIGxldCBsb2FkZWRCeXRlcyA9IGJ5dGVzICs9IGxlbjtcbiAgICAgICAgICBvblByb2dyZXNzKGxvYWRlZEJ5dGVzKTtcbiAgICAgICAgfVxuICAgICAgICBjb250cm9sbGVyLmVucXVldWUobmV3IFVpbnQ4QXJyYXkodmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfb25GaW5pc2goZXJyKTtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH0sXG4gICAgY2FuY2VsKHJlYXNvbikge1xuICAgICAgX29uRmluaXNoKHJlYXNvbik7XG4gICAgICByZXR1cm4gaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgfVxuICB9LCB7XG4gICAgaGlnaFdhdGVyTWFyazogMlxuICB9KVxufVxuIiwiaW1wb3J0IHBsYXRmb3JtIGZyb20gXCIuLi9wbGF0Zm9ybS9pbmRleC5qc1wiO1xuaW1wb3J0IHV0aWxzIGZyb20gXCIuLi91dGlscy5qc1wiO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSBcIi4uL2NvcmUvQXhpb3NFcnJvci5qc1wiO1xuaW1wb3J0IGNvbXBvc2VTaWduYWxzIGZyb20gXCIuLi9oZWxwZXJzL2NvbXBvc2VTaWduYWxzLmpzXCI7XG5pbXBvcnQge3RyYWNrU3RyZWFtfSBmcm9tIFwiLi4vaGVscGVycy90cmFja1N0cmVhbS5qc1wiO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tIFwiLi4vY29yZS9BeGlvc0hlYWRlcnMuanNcIjtcbmltcG9ydCB7cHJvZ3Jlc3NFdmVudFJlZHVjZXIsIHByb2dyZXNzRXZlbnREZWNvcmF0b3IsIGFzeW5jRGVjb3JhdG9yfSBmcm9tIFwiLi4vaGVscGVycy9wcm9ncmVzc0V2ZW50UmVkdWNlci5qc1wiO1xuaW1wb3J0IHJlc29sdmVDb25maWcgZnJvbSBcIi4uL2hlbHBlcnMvcmVzb2x2ZUNvbmZpZy5qc1wiO1xuaW1wb3J0IHNldHRsZSBmcm9tIFwiLi4vY29yZS9zZXR0bGUuanNcIjtcblxuY29uc3QgaXNGZXRjaFN1cHBvcnRlZCA9IHR5cGVvZiBmZXRjaCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgUmVxdWVzdCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgUmVzcG9uc2UgPT09ICdmdW5jdGlvbic7XG5jb25zdCBpc1JlYWRhYmxlU3RyZWFtU3VwcG9ydGVkID0gaXNGZXRjaFN1cHBvcnRlZCAmJiB0eXBlb2YgUmVhZGFibGVTdHJlYW0gPT09ICdmdW5jdGlvbic7XG5cbi8vIHVzZWQgb25seSBpbnNpZGUgdGhlIGZldGNoIGFkYXB0ZXJcbmNvbnN0IGVuY29kZVRleHQgPSBpc0ZldGNoU3VwcG9ydGVkICYmICh0eXBlb2YgVGV4dEVuY29kZXIgPT09ICdmdW5jdGlvbicgP1xuICAgICgoZW5jb2RlcikgPT4gKHN0cikgPT4gZW5jb2Rlci5lbmNvZGUoc3RyKSkobmV3IFRleHRFbmNvZGVyKCkpIDpcbiAgICBhc3luYyAoc3RyKSA9PiBuZXcgVWludDhBcnJheShhd2FpdCBuZXcgUmVzcG9uc2Uoc3RyKS5hcnJheUJ1ZmZlcigpKVxuKTtcblxuY29uc3QgdGVzdCA9IChmbiwgLi4uYXJncykgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiAhIWZuKC4uLmFyZ3MpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuY29uc3Qgc3VwcG9ydHNSZXF1ZXN0U3RyZWFtID0gaXNSZWFkYWJsZVN0cmVhbVN1cHBvcnRlZCAmJiB0ZXN0KCgpID0+IHtcbiAgbGV0IGR1cGxleEFjY2Vzc2VkID0gZmFsc2U7XG5cbiAgY29uc3QgaGFzQ29udGVudFR5cGUgPSBuZXcgUmVxdWVzdChwbGF0Zm9ybS5vcmlnaW4sIHtcbiAgICBib2R5OiBuZXcgUmVhZGFibGVTdHJlYW0oKSxcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICBnZXQgZHVwbGV4KCkge1xuICAgICAgZHVwbGV4QWNjZXNzZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuICdoYWxmJztcbiAgICB9LFxuICB9KS5oZWFkZXJzLmhhcygnQ29udGVudC1UeXBlJyk7XG5cbiAgcmV0dXJuIGR1cGxleEFjY2Vzc2VkICYmICFoYXNDb250ZW50VHlwZTtcbn0pO1xuXG5jb25zdCBERUZBVUxUX0NIVU5LX1NJWkUgPSA2NCAqIDEwMjQ7XG5cbmNvbnN0IHN1cHBvcnRzUmVzcG9uc2VTdHJlYW0gPSBpc1JlYWRhYmxlU3RyZWFtU3VwcG9ydGVkICYmXG4gIHRlc3QoKCkgPT4gdXRpbHMuaXNSZWFkYWJsZVN0cmVhbShuZXcgUmVzcG9uc2UoJycpLmJvZHkpKTtcblxuXG5jb25zdCByZXNvbHZlcnMgPSB7XG4gIHN0cmVhbTogc3VwcG9ydHNSZXNwb25zZVN0cmVhbSAmJiAoKHJlcykgPT4gcmVzLmJvZHkpXG59O1xuXG5pc0ZldGNoU3VwcG9ydGVkICYmICgoKHJlcykgPT4ge1xuICBbJ3RleHQnLCAnYXJyYXlCdWZmZXInLCAnYmxvYicsICdmb3JtRGF0YScsICdzdHJlYW0nXS5mb3JFYWNoKHR5cGUgPT4ge1xuICAgICFyZXNvbHZlcnNbdHlwZV0gJiYgKHJlc29sdmVyc1t0eXBlXSA9IHV0aWxzLmlzRnVuY3Rpb24ocmVzW3R5cGVdKSA/IChyZXMpID0+IHJlc1t0eXBlXSgpIDpcbiAgICAgIChfLCBjb25maWcpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoYFJlc3BvbnNlIHR5cGUgJyR7dHlwZX0nIGlzIG5vdCBzdXBwb3J0ZWRgLCBBeGlvc0Vycm9yLkVSUl9OT1RfU1VQUE9SVCwgY29uZmlnKTtcbiAgICAgIH0pXG4gIH0pO1xufSkobmV3IFJlc3BvbnNlKSk7XG5cbmNvbnN0IGdldEJvZHlMZW5ndGggPSBhc3luYyAoYm9keSkgPT4ge1xuICBpZiAoYm9keSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBpZih1dGlscy5pc0Jsb2IoYm9keSkpIHtcbiAgICByZXR1cm4gYm9keS5zaXplO1xuICB9XG5cbiAgaWYodXRpbHMuaXNTcGVjQ29tcGxpYW50Rm9ybShib2R5KSkge1xuICAgIGNvbnN0IF9yZXF1ZXN0ID0gbmV3IFJlcXVlc3QocGxhdGZvcm0ub3JpZ2luLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGJvZHksXG4gICAgfSk7XG4gICAgcmV0dXJuIChhd2FpdCBfcmVxdWVzdC5hcnJheUJ1ZmZlcigpKS5ieXRlTGVuZ3RoO1xuICB9XG5cbiAgaWYodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoYm9keSkgfHwgdXRpbHMuaXNBcnJheUJ1ZmZlcihib2R5KSkge1xuICAgIHJldHVybiBib2R5LmJ5dGVMZW5ndGg7XG4gIH1cblxuICBpZih1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhib2R5KSkge1xuICAgIGJvZHkgPSBib2R5ICsgJyc7XG4gIH1cblxuICBpZih1dGlscy5pc1N0cmluZyhib2R5KSkge1xuICAgIHJldHVybiAoYXdhaXQgZW5jb2RlVGV4dChib2R5KSkuYnl0ZUxlbmd0aDtcbiAgfVxufVxuXG5jb25zdCByZXNvbHZlQm9keUxlbmd0aCA9IGFzeW5jIChoZWFkZXJzLCBib2R5KSA9PiB7XG4gIGNvbnN0IGxlbmd0aCA9IHV0aWxzLnRvRmluaXRlTnVtYmVyKGhlYWRlcnMuZ2V0Q29udGVudExlbmd0aCgpKTtcblxuICByZXR1cm4gbGVuZ3RoID09IG51bGwgPyBnZXRCb2R5TGVuZ3RoKGJvZHkpIDogbGVuZ3RoO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0ZldGNoU3VwcG9ydGVkICYmIChhc3luYyAoY29uZmlnKSA9PiB7XG4gIGxldCB7XG4gICAgdXJsLFxuICAgIG1ldGhvZCxcbiAgICBkYXRhLFxuICAgIHNpZ25hbCxcbiAgICBjYW5jZWxUb2tlbixcbiAgICB0aW1lb3V0LFxuICAgIG9uRG93bmxvYWRQcm9ncmVzcyxcbiAgICBvblVwbG9hZFByb2dyZXNzLFxuICAgIHJlc3BvbnNlVHlwZSxcbiAgICBoZWFkZXJzLFxuICAgIHdpdGhDcmVkZW50aWFscyA9ICdzYW1lLW9yaWdpbicsXG4gICAgZmV0Y2hPcHRpb25zXG4gIH0gPSByZXNvbHZlQ29uZmlnKGNvbmZpZyk7XG5cbiAgcmVzcG9uc2VUeXBlID0gcmVzcG9uc2VUeXBlID8gKHJlc3BvbnNlVHlwZSArICcnKS50b0xvd2VyQ2FzZSgpIDogJ3RleHQnO1xuXG4gIGxldCBjb21wb3NlZFNpZ25hbCA9IGNvbXBvc2VTaWduYWxzKFtzaWduYWwsIGNhbmNlbFRva2VuICYmIGNhbmNlbFRva2VuLnRvQWJvcnRTaWduYWwoKV0sIHRpbWVvdXQpO1xuXG4gIGxldCByZXF1ZXN0O1xuXG4gIGNvbnN0IHVuc3Vic2NyaWJlID0gY29tcG9zZWRTaWduYWwgJiYgY29tcG9zZWRTaWduYWwudW5zdWJzY3JpYmUgJiYgKCgpID0+IHtcbiAgICAgIGNvbXBvc2VkU2lnbmFsLnVuc3Vic2NyaWJlKCk7XG4gIH0pO1xuXG4gIGxldCByZXF1ZXN0Q29udGVudExlbmd0aDtcblxuICB0cnkge1xuICAgIGlmIChcbiAgICAgIG9uVXBsb2FkUHJvZ3Jlc3MgJiYgc3VwcG9ydHNSZXF1ZXN0U3RyZWFtICYmIG1ldGhvZCAhPT0gJ2dldCcgJiYgbWV0aG9kICE9PSAnaGVhZCcgJiZcbiAgICAgIChyZXF1ZXN0Q29udGVudExlbmd0aCA9IGF3YWl0IHJlc29sdmVCb2R5TGVuZ3RoKGhlYWRlcnMsIGRhdGEpKSAhPT0gMFxuICAgICkge1xuICAgICAgbGV0IF9yZXF1ZXN0ID0gbmV3IFJlcXVlc3QodXJsLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBib2R5OiBkYXRhLFxuICAgICAgICBkdXBsZXg6IFwiaGFsZlwiXG4gICAgICB9KTtcblxuICAgICAgbGV0IGNvbnRlbnRUeXBlSGVhZGVyO1xuXG4gICAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSAmJiAoY29udGVudFR5cGVIZWFkZXIgPSBfcmVxdWVzdC5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJykpKSB7XG4gICAgICAgIGhlYWRlcnMuc2V0Q29udGVudFR5cGUoY29udGVudFR5cGVIZWFkZXIpXG4gICAgICB9XG5cbiAgICAgIGlmIChfcmVxdWVzdC5ib2R5KSB7XG4gICAgICAgIGNvbnN0IFtvblByb2dyZXNzLCBmbHVzaF0gPSBwcm9ncmVzc0V2ZW50RGVjb3JhdG9yKFxuICAgICAgICAgIHJlcXVlc3RDb250ZW50TGVuZ3RoLFxuICAgICAgICAgIHByb2dyZXNzRXZlbnRSZWR1Y2VyKGFzeW5jRGVjb3JhdG9yKG9uVXBsb2FkUHJvZ3Jlc3MpKVxuICAgICAgICApO1xuXG4gICAgICAgIGRhdGEgPSB0cmFja1N0cmVhbShfcmVxdWVzdC5ib2R5LCBERUZBVUxUX0NIVU5LX1NJWkUsIG9uUHJvZ3Jlc3MsIGZsdXNoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXV0aWxzLmlzU3RyaW5nKHdpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHdpdGhDcmVkZW50aWFscyA9IHdpdGhDcmVkZW50aWFscyA/ICdpbmNsdWRlJyA6ICdvbWl0JztcbiAgICB9XG5cbiAgICAvLyBDbG91ZGZsYXJlIFdvcmtlcnMgdGhyb3dzIHdoZW4gY3JlZGVudGlhbHMgYXJlIGRlZmluZWRcbiAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2Nsb3VkZmxhcmUvd29ya2VyZC9pc3N1ZXMvOTAyXG4gICAgY29uc3QgaXNDcmVkZW50aWFsc1N1cHBvcnRlZCA9IFwiY3JlZGVudGlhbHNcIiBpbiBSZXF1ZXN0LnByb3RvdHlwZTtcbiAgICByZXF1ZXN0ID0gbmV3IFJlcXVlc3QodXJsLCB7XG4gICAgICAuLi5mZXRjaE9wdGlvbnMsXG4gICAgICBzaWduYWw6IGNvbXBvc2VkU2lnbmFsLFxuICAgICAgbWV0aG9kOiBtZXRob2QudG9VcHBlckNhc2UoKSxcbiAgICAgIGhlYWRlcnM6IGhlYWRlcnMubm9ybWFsaXplKCkudG9KU09OKCksXG4gICAgICBib2R5OiBkYXRhLFxuICAgICAgZHVwbGV4OiBcImhhbGZcIixcbiAgICAgIGNyZWRlbnRpYWxzOiBpc0NyZWRlbnRpYWxzU3VwcG9ydGVkID8gd2l0aENyZWRlbnRpYWxzIDogdW5kZWZpbmVkXG4gICAgfSk7XG5cbiAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChyZXF1ZXN0KTtcblxuICAgIGNvbnN0IGlzU3RyZWFtUmVzcG9uc2UgPSBzdXBwb3J0c1Jlc3BvbnNlU3RyZWFtICYmIChyZXNwb25zZVR5cGUgPT09ICdzdHJlYW0nIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ3Jlc3BvbnNlJyk7XG5cbiAgICBpZiAoc3VwcG9ydHNSZXNwb25zZVN0cmVhbSAmJiAob25Eb3dubG9hZFByb2dyZXNzIHx8IChpc1N0cmVhbVJlc3BvbnNlICYmIHVuc3Vic2NyaWJlKSkpIHtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7fTtcblxuICAgICAgWydzdGF0dXMnLCAnc3RhdHVzVGV4dCcsICdoZWFkZXJzJ10uZm9yRWFjaChwcm9wID0+IHtcbiAgICAgICAgb3B0aW9uc1twcm9wXSA9IHJlc3BvbnNlW3Byb3BdO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlQ29udGVudExlbmd0aCA9IHV0aWxzLnRvRmluaXRlTnVtYmVyKHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdjb250ZW50LWxlbmd0aCcpKTtcblxuICAgICAgY29uc3QgW29uUHJvZ3Jlc3MsIGZsdXNoXSA9IG9uRG93bmxvYWRQcm9ncmVzcyAmJiBwcm9ncmVzc0V2ZW50RGVjb3JhdG9yKFxuICAgICAgICByZXNwb25zZUNvbnRlbnRMZW5ndGgsXG4gICAgICAgIHByb2dyZXNzRXZlbnRSZWR1Y2VyKGFzeW5jRGVjb3JhdG9yKG9uRG93bmxvYWRQcm9ncmVzcyksIHRydWUpXG4gICAgICApIHx8IFtdO1xuXG4gICAgICByZXNwb25zZSA9IG5ldyBSZXNwb25zZShcbiAgICAgICAgdHJhY2tTdHJlYW0ocmVzcG9uc2UuYm9keSwgREVGQVVMVF9DSFVOS19TSVpFLCBvblByb2dyZXNzLCAoKSA9PiB7XG4gICAgICAgICAgZmx1c2ggJiYgZmx1c2goKTtcbiAgICAgICAgICB1bnN1YnNjcmliZSAmJiB1bnN1YnNjcmliZSgpO1xuICAgICAgICB9KSxcbiAgICAgICAgb3B0aW9uc1xuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGUgfHwgJ3RleHQnO1xuXG4gICAgbGV0IHJlc3BvbnNlRGF0YSA9IGF3YWl0IHJlc29sdmVyc1t1dGlscy5maW5kS2V5KHJlc29sdmVycywgcmVzcG9uc2VUeXBlKSB8fCAndGV4dCddKHJlc3BvbnNlLCBjb25maWcpO1xuXG4gICAgIWlzU3RyZWFtUmVzcG9uc2UgJiYgdW5zdWJzY3JpYmUgJiYgdW5zdWJzY3JpYmUoKTtcblxuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgaGVhZGVyczogQXhpb3NIZWFkZXJzLmZyb20ocmVzcG9uc2UuaGVhZGVycyksXG4gICAgICAgIHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXNwb25zZS5zdGF0dXNUZXh0LFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3RcbiAgICAgIH0pXG4gICAgfSlcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdW5zdWJzY3JpYmUgJiYgdW5zdWJzY3JpYmUoKTtcblxuICAgIGlmIChlcnIgJiYgZXJyLm5hbWUgPT09ICdUeXBlRXJyb3InICYmIC9mZXRjaC9pLnRlc3QoZXJyLm1lc3NhZ2UpKSB7XG4gICAgICB0aHJvdyBPYmplY3QuYXNzaWduKFxuICAgICAgICBuZXcgQXhpb3NFcnJvcignTmV0d29yayBFcnJvcicsIEF4aW9zRXJyb3IuRVJSX05FVFdPUkssIGNvbmZpZywgcmVxdWVzdCksXG4gICAgICAgIHtcbiAgICAgICAgICBjYXVzZTogZXJyLmNhdXNlIHx8IGVyclxuICAgICAgICB9XG4gICAgICApXG4gICAgfVxuXG4gICAgdGhyb3cgQXhpb3NFcnJvci5mcm9tKGVyciwgZXJyICYmIGVyci5jb2RlLCBjb25maWcsIHJlcXVlc3QpO1xuICB9XG59KTtcblxuXG4iLCJpbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IGh0dHBBZGFwdGVyIGZyb20gJy4vaHR0cC5qcyc7XG5pbXBvcnQgeGhyQWRhcHRlciBmcm9tICcuL3hoci5qcyc7XG5pbXBvcnQgZmV0Y2hBZGFwdGVyIGZyb20gJy4vZmV0Y2guanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSBcIi4uL2NvcmUvQXhpb3NFcnJvci5qc1wiO1xuXG5jb25zdCBrbm93bkFkYXB0ZXJzID0ge1xuICBodHRwOiBodHRwQWRhcHRlcixcbiAgeGhyOiB4aHJBZGFwdGVyLFxuICBmZXRjaDogZmV0Y2hBZGFwdGVyXG59XG5cbnV0aWxzLmZvckVhY2goa25vd25BZGFwdGVycywgKGZuLCB2YWx1ZSkgPT4ge1xuICBpZiAoZm4pIHtcbiAgICB0cnkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCAnbmFtZScsIHt2YWx1ZX0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sICdhZGFwdGVyTmFtZScsIHt2YWx1ZX0pO1xuICB9XG59KTtcblxuY29uc3QgcmVuZGVyUmVhc29uID0gKHJlYXNvbikgPT4gYC0gJHtyZWFzb259YDtcblxuY29uc3QgaXNSZXNvbHZlZEhhbmRsZSA9IChhZGFwdGVyKSA9PiB1dGlscy5pc0Z1bmN0aW9uKGFkYXB0ZXIpIHx8IGFkYXB0ZXIgPT09IG51bGwgfHwgYWRhcHRlciA9PT0gZmFsc2U7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2V0QWRhcHRlcjogKGFkYXB0ZXJzKSA9PiB7XG4gICAgYWRhcHRlcnMgPSB1dGlscy5pc0FycmF5KGFkYXB0ZXJzKSA/IGFkYXB0ZXJzIDogW2FkYXB0ZXJzXTtcblxuICAgIGNvbnN0IHtsZW5ndGh9ID0gYWRhcHRlcnM7XG4gICAgbGV0IG5hbWVPckFkYXB0ZXI7XG4gICAgbGV0IGFkYXB0ZXI7XG5cbiAgICBjb25zdCByZWplY3RlZFJlYXNvbnMgPSB7fTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIG5hbWVPckFkYXB0ZXIgPSBhZGFwdGVyc1tpXTtcbiAgICAgIGxldCBpZDtcblxuICAgICAgYWRhcHRlciA9IG5hbWVPckFkYXB0ZXI7XG5cbiAgICAgIGlmICghaXNSZXNvbHZlZEhhbmRsZShuYW1lT3JBZGFwdGVyKSkge1xuICAgICAgICBhZGFwdGVyID0ga25vd25BZGFwdGVyc1soaWQgPSBTdHJpbmcobmFtZU9yQWRhcHRlcikpLnRvTG93ZXJDYXNlKCldO1xuXG4gICAgICAgIGlmIChhZGFwdGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihgVW5rbm93biBhZGFwdGVyICcke2lkfSdgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYWRhcHRlcikge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmVqZWN0ZWRSZWFzb25zW2lkIHx8ICcjJyArIGldID0gYWRhcHRlcjtcbiAgICB9XG5cbiAgICBpZiAoIWFkYXB0ZXIpIHtcblxuICAgICAgY29uc3QgcmVhc29ucyA9IE9iamVjdC5lbnRyaWVzKHJlamVjdGVkUmVhc29ucylcbiAgICAgICAgLm1hcCgoW2lkLCBzdGF0ZV0pID0+IGBhZGFwdGVyICR7aWR9IGAgK1xuICAgICAgICAgIChzdGF0ZSA9PT0gZmFsc2UgPyAnaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgZW52aXJvbm1lbnQnIDogJ2lzIG5vdCBhdmFpbGFibGUgaW4gdGhlIGJ1aWxkJylcbiAgICAgICAgKTtcblxuICAgICAgbGV0IHMgPSBsZW5ndGggP1xuICAgICAgICAocmVhc29ucy5sZW5ndGggPiAxID8gJ3NpbmNlIDpcXG4nICsgcmVhc29ucy5tYXAocmVuZGVyUmVhc29uKS5qb2luKCdcXG4nKSA6ICcgJyArIHJlbmRlclJlYXNvbihyZWFzb25zWzBdKSkgOlxuICAgICAgICAnYXMgbm8gYWRhcHRlciBzcGVjaWZpZWQnO1xuXG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgYFRoZXJlIGlzIG5vIHN1aXRhYmxlIGFkYXB0ZXIgdG8gZGlzcGF0Y2ggdGhlIHJlcXVlc3QgYCArIHMsXG4gICAgICAgICdFUlJfTk9UX1NVUFBPUlQnXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBhZGFwdGVyO1xuICB9LFxuICBhZGFwdGVyczoga25vd25BZGFwdGVyc1xufVxuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHN0cmljdFxuZXhwb3J0IGRlZmF1bHQgbnVsbDtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHRyYW5zZm9ybURhdGEgZnJvbSAnLi90cmFuc2Zvcm1EYXRhLmpzJztcbmltcG9ydCBpc0NhbmNlbCBmcm9tICcuLi9jYW5jZWwvaXNDYW5jZWwuanMnO1xuaW1wb3J0IGRlZmF1bHRzIGZyb20gJy4uL2RlZmF1bHRzL2luZGV4LmpzJztcbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4uL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSAnLi4vY29yZS9BeGlvc0hlYWRlcnMuanMnO1xuaW1wb3J0IGFkYXB0ZXJzIGZyb20gXCIuLi9hZGFwdGVycy9hZGFwdGVycy5qc1wiO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxlZEVycm9yYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG5cbiAgaWYgKGNvbmZpZy5zaWduYWwgJiYgY29uZmlnLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgdGhyb3cgbmV3IENhbmNlbGVkRXJyb3IobnVsbCwgY29uZmlnKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIGNvbmZpZy5oZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oY29uZmlnLmhlYWRlcnMpO1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgY29uZmlnLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgaWYgKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXS5pbmRleE9mKGNvbmZpZy5tZXRob2QpICE9PSAtMSkge1xuICAgIGNvbmZpZy5oZWFkZXJzLnNldENvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLCBmYWxzZSk7XG4gIH1cblxuICBjb25zdCBhZGFwdGVyID0gYWRhcHRlcnMuZ2V0QWRhcHRlcihjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyKTtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgIGNvbmZpZyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZSxcbiAgICAgIHJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJlc3BvbnNlLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShyZXNwb25zZS5oZWFkZXJzKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICAgICAgY29uZmlnLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShyZWFzb24ucmVzcG9uc2UuaGVhZGVycyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufVxuIiwiZXhwb3J0IGNvbnN0IFZFUlNJT04gPSBcIjEuNy45XCI7IiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQge1ZFUlNJT059IGZyb20gJy4uL2Vudi9kYXRhLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5cbmNvbnN0IHZhbGlkYXRvcnMgPSB7fTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblsnb2JqZWN0JywgJ2Jvb2xlYW4nLCAnbnVtYmVyJywgJ2Z1bmN0aW9uJywgJ3N0cmluZycsICdzeW1ib2wnXS5mb3JFYWNoKCh0eXBlLCBpKSA9PiB7XG4gIHZhbGlkYXRvcnNbdHlwZV0gPSBmdW5jdGlvbiB2YWxpZGF0b3IodGhpbmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaW5nID09PSB0eXBlIHx8ICdhJyArIChpIDwgMSA/ICduICcgOiAnICcpICsgdHlwZTtcbiAgfTtcbn0pO1xuXG5jb25zdCBkZXByZWNhdGVkV2FybmluZ3MgPSB7fTtcblxuLyoqXG4gKiBUcmFuc2l0aW9uYWwgb3B0aW9uIHZhbGlkYXRvclxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb258Ym9vbGVhbj99IHZhbGlkYXRvciAtIHNldCB0byBmYWxzZSBpZiB0aGUgdHJhbnNpdGlvbmFsIG9wdGlvbiBoYXMgYmVlbiByZW1vdmVkXG4gKiBAcGFyYW0ge3N0cmluZz99IHZlcnNpb24gLSBkZXByZWNhdGVkIHZlcnNpb24gLyByZW1vdmVkIHNpbmNlIHZlcnNpb25cbiAqIEBwYXJhbSB7c3RyaW5nP30gbWVzc2FnZSAtIHNvbWUgbWVzc2FnZSB3aXRoIGFkZGl0aW9uYWwgaW5mb1xuICpcbiAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAqL1xudmFsaWRhdG9ycy50cmFuc2l0aW9uYWwgPSBmdW5jdGlvbiB0cmFuc2l0aW9uYWwodmFsaWRhdG9yLCB2ZXJzaW9uLCBtZXNzYWdlKSB7XG4gIGZ1bmN0aW9uIGZvcm1hdE1lc3NhZ2Uob3B0LCBkZXNjKSB7XG4gICAgcmV0dXJuICdbQXhpb3MgdicgKyBWRVJTSU9OICsgJ10gVHJhbnNpdGlvbmFsIG9wdGlvbiBcXCcnICsgb3B0ICsgJ1xcJycgKyBkZXNjICsgKG1lc3NhZ2UgPyAnLiAnICsgbWVzc2FnZSA6ICcnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiAodmFsdWUsIG9wdCwgb3B0cykgPT4ge1xuICAgIGlmICh2YWxpZGF0b3IgPT09IGZhbHNlKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShvcHQsICcgaGFzIGJlZW4gcmVtb3ZlZCcgKyAodmVyc2lvbiA/ICcgaW4gJyArIHZlcnNpb24gOiAnJykpLFxuICAgICAgICBBeGlvc0Vycm9yLkVSUl9ERVBSRUNBVEVEXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICh2ZXJzaW9uICYmICFkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSkge1xuICAgICAgZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0gPSB0cnVlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShcbiAgICAgICAgICBvcHQsXG4gICAgICAgICAgJyBoYXMgYmVlbiBkZXByZWNhdGVkIHNpbmNlIHYnICsgdmVyc2lvbiArICcgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmVhciBmdXR1cmUnXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRvciA/IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRzKSA6IHRydWU7XG4gIH07XG59O1xuXG52YWxpZGF0b3JzLnNwZWxsaW5nID0gZnVuY3Rpb24gc3BlbGxpbmcoY29ycmVjdFNwZWxsaW5nKSB7XG4gIHJldHVybiAodmFsdWUsIG9wdCkgPT4ge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS53YXJuKGAke29wdH0gaXMgbGlrZWx5IGEgbWlzc3BlbGxpbmcgb2YgJHtjb3JyZWN0U3BlbGxpbmd9YCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cbi8qKlxuICogQXNzZXJ0IG9iamVjdCdzIHByb3BlcnRpZXMgdHlwZVxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge29iamVjdH0gc2NoZW1hXG4gKiBAcGFyYW0ge2Jvb2xlYW4/fSBhbGxvd1Vua25vd25cbiAqXG4gKiBAcmV0dXJucyB7b2JqZWN0fVxuICovXG5cbmZ1bmN0aW9uIGFzc2VydE9wdGlvbnMob3B0aW9ucywgc2NoZW1hLCBhbGxvd1Vua25vd24pIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0JywgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTl9WQUxVRSk7XG4gIH1cbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpO1xuICBsZXQgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIGNvbnN0IG9wdCA9IGtleXNbaV07XG4gICAgY29uc3QgdmFsaWRhdG9yID0gc2NoZW1hW29wdF07XG4gICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgY29uc3QgdmFsdWUgPSBvcHRpb25zW29wdF07XG4gICAgICBjb25zdCByZXN1bHQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRpb25zKTtcbiAgICAgIGlmIChyZXN1bHQgIT09IHRydWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ29wdGlvbiAnICsgb3B0ICsgJyBtdXN0IGJlICcgKyByZXN1bHQsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT05fVkFMVUUpO1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChhbGxvd1Vua25vd24gIT09IHRydWUpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdVbmtub3duIG9wdGlvbiAnICsgb3B0LCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBhc3NlcnRPcHRpb25zLFxuICB2YWxpZGF0b3JzXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgYnVpbGRVUkwgZnJvbSAnLi4vaGVscGVycy9idWlsZFVSTC5qcyc7XG5pbXBvcnQgSW50ZXJjZXB0b3JNYW5hZ2VyIGZyb20gJy4vSW50ZXJjZXB0b3JNYW5hZ2VyLmpzJztcbmltcG9ydCBkaXNwYXRjaFJlcXVlc3QgZnJvbSAnLi9kaXNwYXRjaFJlcXVlc3QuanMnO1xuaW1wb3J0IG1lcmdlQ29uZmlnIGZyb20gJy4vbWVyZ2VDb25maWcuanMnO1xuaW1wb3J0IGJ1aWxkRnVsbFBhdGggZnJvbSAnLi9idWlsZEZ1bGxQYXRoLmpzJztcbmltcG9ydCB2YWxpZGF0b3IgZnJvbSAnLi4vaGVscGVycy92YWxpZGF0b3IuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuL0F4aW9zSGVhZGVycy5qcyc7XG5cbmNvbnN0IHZhbGlkYXRvcnMgPSB2YWxpZGF0b3IudmFsaWRhdG9ycztcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuY2xhc3MgQXhpb3Mge1xuICBjb25zdHJ1Y3RvcihpbnN0YW5jZUNvbmZpZykge1xuICAgIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IGNvbmZpZ09yVXJsIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAgICogQHBhcmFtIHs/T2JqZWN0fSBjb25maWdcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICAgKi9cbiAgYXN5bmMgcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9yZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIGxldCBkdW1teSA9IHt9O1xuXG4gICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlID8gRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoZHVtbXkpIDogKGR1bW15ID0gbmV3IEVycm9yKCkpO1xuXG4gICAgICAgIC8vIHNsaWNlIG9mZiB0aGUgRXJyb3I6IC4uLiBsaW5lXG4gICAgICAgIGNvbnN0IHN0YWNrID0gZHVtbXkuc3RhY2sgPyBkdW1teS5zdGFjay5yZXBsYWNlKC9eLitcXG4vLCAnJykgOiAnJztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoIWVyci5zdGFjaykge1xuICAgICAgICAgICAgZXJyLnN0YWNrID0gc3RhY2s7XG4gICAgICAgICAgICAvLyBtYXRjaCB3aXRob3V0IHRoZSAyIHRvcCBzdGFjayBsaW5lc1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3RhY2sgJiYgIVN0cmluZyhlcnIuc3RhY2spLmVuZHNXaXRoKHN0YWNrLnJlcGxhY2UoL14uK1xcbi4rXFxuLywgJycpKSkge1xuICAgICAgICAgICAgZXJyLnN0YWNrICs9ICdcXG4nICsgc3RhY2tcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpZ25vcmUgdGhlIGNhc2Ugd2hlcmUgXCJzdGFja1wiIGlzIGFuIHVuLXdyaXRhYmxlIHByb3BlcnR5XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfVxuXG4gIF9yZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gICAgaWYgKHR5cGVvZiBjb25maWdPclVybCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICAgIGNvbmZpZy51cmwgPSBjb25maWdPclVybDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uZmlnID0gY29uZmlnT3JVcmwgfHwge307XG4gICAgfVxuXG4gICAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcblxuICAgIGNvbnN0IHt0cmFuc2l0aW9uYWwsIHBhcmFtc1NlcmlhbGl6ZXIsIGhlYWRlcnN9ID0gY29uZmlnO1xuXG4gICAgaWYgKHRyYW5zaXRpb25hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyh0cmFuc2l0aW9uYWwsIHtcbiAgICAgICAgc2lsZW50SlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICAgIGZvcmNlZEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgICBjbGFyaWZ5VGltZW91dEVycm9yOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pXG4gICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIgIT0gbnVsbCkge1xuICAgICAgaWYgKHV0aWxzLmlzRnVuY3Rpb24ocGFyYW1zU2VyaWFsaXplcikpIHtcbiAgICAgICAgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIgPSB7XG4gICAgICAgICAgc2VyaWFsaXplOiBwYXJhbXNTZXJpYWxpemVyXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbGlkYXRvci5hc3NlcnRPcHRpb25zKHBhcmFtc1NlcmlhbGl6ZXIsIHtcbiAgICAgICAgICBlbmNvZGU6IHZhbGlkYXRvcnMuZnVuY3Rpb24sXG4gICAgICAgICAgc2VyaWFsaXplOiB2YWxpZGF0b3JzLmZ1bmN0aW9uXG4gICAgICAgIH0sIHRydWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhbGlkYXRvci5hc3NlcnRPcHRpb25zKGNvbmZpZywge1xuICAgICAgYmFzZVVybDogdmFsaWRhdG9ycy5zcGVsbGluZygnYmFzZVVSTCcpLFxuICAgICAgd2l0aFhzcmZUb2tlbjogdmFsaWRhdG9ycy5zcGVsbGluZygnd2l0aFhTUkZUb2tlbicpXG4gICAgfSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgY29uZmlnLm1ldGhvZFxuICAgIGNvbmZpZy5tZXRob2QgPSAoY29uZmlnLm1ldGhvZCB8fCB0aGlzLmRlZmF1bHRzLm1ldGhvZCB8fCAnZ2V0JykudG9Mb3dlckNhc2UoKTtcblxuICAgIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICAgIGxldCBjb250ZXh0SGVhZGVycyA9IGhlYWRlcnMgJiYgdXRpbHMubWVyZ2UoXG4gICAgICBoZWFkZXJzLmNvbW1vbixcbiAgICAgIGhlYWRlcnNbY29uZmlnLm1ldGhvZF1cbiAgICApO1xuXG4gICAgaGVhZGVycyAmJiB1dGlscy5mb3JFYWNoKFxuICAgICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgICAobWV0aG9kKSA9PiB7XG4gICAgICAgIGRlbGV0ZSBoZWFkZXJzW21ldGhvZF07XG4gICAgICB9XG4gICAgKTtcblxuICAgIGNvbmZpZy5oZWFkZXJzID0gQXhpb3NIZWFkZXJzLmNvbmNhdChjb250ZXh0SGVhZGVycywgaGVhZGVycyk7XG5cbiAgICAvLyBmaWx0ZXIgb3V0IHNraXBwZWQgaW50ZXJjZXB0b3JzXG4gICAgY29uc3QgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgICBsZXQgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gdHJ1ZTtcbiAgICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICAgIGlmICh0eXBlb2YgaW50ZXJjZXB0b3IucnVuV2hlbiA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnRlcmNlcHRvci5ydW5XaGVuKGNvbmZpZykgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzICYmIGludGVyY2VwdG9yLnN5bmNocm9ub3VzO1xuXG4gICAgICByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluID0gW107XG4gICAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICAgIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICAgIH0pO1xuXG4gICAgbGV0IHByb21pc2U7XG4gICAgbGV0IGkgPSAwO1xuICAgIGxldCBsZW47XG5cbiAgICBpZiAoIXN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycykge1xuICAgICAgY29uc3QgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LmJpbmQodGhpcyksIHVuZGVmaW5lZF07XG4gICAgICBjaGFpbi51bnNoaWZ0LmFwcGx5KGNoYWluLCByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbik7XG4gICAgICBjaGFpbi5wdXNoLmFwcGx5KGNoYWluLCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4pO1xuICAgICAgbGVuID0gY2hhaW4ubGVuZ3RoO1xuXG4gICAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW5baSsrXSwgY2hhaW5baSsrXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cblxuICAgIGxlbiA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLmxlbmd0aDtcblxuICAgIGxldCBuZXdDb25maWcgPSBjb25maWc7XG5cbiAgICBpID0gMDtcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBjb25zdCBvbkZ1bGZpbGxlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluW2krK107XG4gICAgICBjb25zdCBvblJlamVjdGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW5baSsrXTtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ld0NvbmZpZyA9IG9uRnVsZmlsbGVkKG5ld0NvbmZpZyk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBvblJlamVjdGVkLmNhbGwodGhpcywgZXJyb3IpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgcHJvbWlzZSA9IGRpc3BhdGNoUmVxdWVzdC5jYWxsKHRoaXMsIG5ld0NvbmZpZyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfVxuXG4gICAgaSA9IDA7XG4gICAgbGVuID0gcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLmxlbmd0aDtcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbltpKytdLCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW5baSsrXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBnZXRVcmkoY29uZmlnKSB7XG4gICAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgICBjb25zdCBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICAgIHJldHVybiBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpO1xuICB9XG59XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kLFxuICAgICAgdXJsLFxuICAgICAgZGF0YTogKGNvbmZpZyB8fCB7fSkuZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuXG4gIGZ1bmN0aW9uIGdlbmVyYXRlSFRUUE1ldGhvZChpc0Zvcm0pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaHR0cE1ldGhvZCh1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgICAgbWV0aG9kLFxuICAgICAgICBoZWFkZXJzOiBpc0Zvcm0gPyB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdtdWx0aXBhcnQvZm9ybS1kYXRhJ1xuICAgICAgICB9IDoge30sXG4gICAgICAgIHVybCxcbiAgICAgICAgZGF0YVxuICAgICAgfSkpO1xuICAgIH07XG4gIH1cblxuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGdlbmVyYXRlSFRUUE1ldGhvZCgpO1xuXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2QgKyAnRm9ybSddID0gZ2VuZXJhdGVIVFRQTWV0aG9kKHRydWUpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQ2FuY2VsZWRFcnJvciBmcm9tICcuL0NhbmNlbGVkRXJyb3IuanMnO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtDYW5jZWxUb2tlbn1cbiAqL1xuY2xhc3MgQ2FuY2VsVG9rZW4ge1xuICBjb25zdHJ1Y3RvcihleGVjdXRvcikge1xuICAgIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBsZXQgcmVzb2x2ZVByb21pc2U7XG5cbiAgICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICAgIH0pO1xuXG4gICAgY29uc3QgdG9rZW4gPSB0aGlzO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICB0aGlzLnByb21pc2UudGhlbihjYW5jZWwgPT4ge1xuICAgICAgaWYgKCF0b2tlbi5fbGlzdGVuZXJzKSByZXR1cm47XG5cbiAgICAgIGxldCBpID0gdG9rZW4uX2xpc3RlbmVycy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgIHRva2VuLl9saXN0ZW5lcnNbaV0oY2FuY2VsKTtcbiAgICAgIH1cbiAgICAgIHRva2VuLl9saXN0ZW5lcnMgPSBudWxsO1xuICAgIH0pO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICB0aGlzLnByb21pc2UudGhlbiA9IG9uZnVsZmlsbGVkID0+IHtcbiAgICAgIGxldCBfcmVzb2x2ZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIHRva2VuLnN1YnNjcmliZShyZXNvbHZlKTtcbiAgICAgICAgX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgICAgfSkudGhlbihvbmZ1bGZpbGxlZCk7XG5cbiAgICAgIHByb21pc2UuY2FuY2VsID0gZnVuY3Rpb24gcmVqZWN0KCkge1xuICAgICAgICB0b2tlbi51bnN1YnNjcmliZShfcmVzb2x2ZSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9O1xuXG4gICAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UsIGNvbmZpZywgcmVxdWVzdCkge1xuICAgICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsZWRFcnJvcihtZXNzYWdlLCBjb25maWcsIHJlcXVlc3QpO1xuICAgICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaHJvd3MgYSBgQ2FuY2VsZWRFcnJvcmAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAgICovXG4gIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gICAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU3Vic2NyaWJlIHRvIHRoZSBjYW5jZWwgc2lnbmFsXG4gICAqL1xuXG4gIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0aGlzLnJlYXNvbikge1xuICAgICAgbGlzdGVuZXIodGhpcy5yZWFzb24pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzID0gW2xpc3RlbmVyXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVW5zdWJzY3JpYmUgZnJvbSB0aGUgY2FuY2VsIHNpZ25hbFxuICAgKi9cblxuICB1bnN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICghdGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgfVxuXG4gIHRvQWJvcnRTaWduYWwoKSB7XG4gICAgY29uc3QgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcblxuICAgIGNvbnN0IGFib3J0ID0gKGVycikgPT4ge1xuICAgICAgY29udHJvbGxlci5hYm9ydChlcnIpO1xuICAgIH07XG5cbiAgICB0aGlzLnN1YnNjcmliZShhYm9ydCk7XG5cbiAgICBjb250cm9sbGVyLnNpZ25hbC51bnN1YnNjcmliZSA9ICgpID0+IHRoaXMudW5zdWJzY3JpYmUoYWJvcnQpO1xuXG4gICAgcmV0dXJuIGNvbnRyb2xsZXIuc2lnbmFsO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAgICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAgICovXG4gIHN0YXRpYyBzb3VyY2UoKSB7XG4gICAgbGV0IGNhbmNlbDtcbiAgICBjb25zdCB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgICBjYW5jZWwgPSBjO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICB0b2tlbixcbiAgICAgIGNhbmNlbFxuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2FuY2VsVG9rZW47XG4iLCJjb25zdCBIdHRwU3RhdHVzQ29kZSA9IHtcbiAgQ29udGludWU6IDEwMCxcbiAgU3dpdGNoaW5nUHJvdG9jb2xzOiAxMDEsXG4gIFByb2Nlc3Npbmc6IDEwMixcbiAgRWFybHlIaW50czogMTAzLFxuICBPazogMjAwLFxuICBDcmVhdGVkOiAyMDEsXG4gIEFjY2VwdGVkOiAyMDIsXG4gIE5vbkF1dGhvcml0YXRpdmVJbmZvcm1hdGlvbjogMjAzLFxuICBOb0NvbnRlbnQ6IDIwNCxcbiAgUmVzZXRDb250ZW50OiAyMDUsXG4gIFBhcnRpYWxDb250ZW50OiAyMDYsXG4gIE11bHRpU3RhdHVzOiAyMDcsXG4gIEFscmVhZHlSZXBvcnRlZDogMjA4LFxuICBJbVVzZWQ6IDIyNixcbiAgTXVsdGlwbGVDaG9pY2VzOiAzMDAsXG4gIE1vdmVkUGVybWFuZW50bHk6IDMwMSxcbiAgRm91bmQ6IDMwMixcbiAgU2VlT3RoZXI6IDMwMyxcbiAgTm90TW9kaWZpZWQ6IDMwNCxcbiAgVXNlUHJveHk6IDMwNSxcbiAgVW51c2VkOiAzMDYsXG4gIFRlbXBvcmFyeVJlZGlyZWN0OiAzMDcsXG4gIFBlcm1hbmVudFJlZGlyZWN0OiAzMDgsXG4gIEJhZFJlcXVlc3Q6IDQwMCxcbiAgVW5hdXRob3JpemVkOiA0MDEsXG4gIFBheW1lbnRSZXF1aXJlZDogNDAyLFxuICBGb3JiaWRkZW46IDQwMyxcbiAgTm90Rm91bmQ6IDQwNCxcbiAgTWV0aG9kTm90QWxsb3dlZDogNDA1LFxuICBOb3RBY2NlcHRhYmxlOiA0MDYsXG4gIFByb3h5QXV0aGVudGljYXRpb25SZXF1aXJlZDogNDA3LFxuICBSZXF1ZXN0VGltZW91dDogNDA4LFxuICBDb25mbGljdDogNDA5LFxuICBHb25lOiA0MTAsXG4gIExlbmd0aFJlcXVpcmVkOiA0MTEsXG4gIFByZWNvbmRpdGlvbkZhaWxlZDogNDEyLFxuICBQYXlsb2FkVG9vTGFyZ2U6IDQxMyxcbiAgVXJpVG9vTG9uZzogNDE0LFxuICBVbnN1cHBvcnRlZE1lZGlhVHlwZTogNDE1LFxuICBSYW5nZU5vdFNhdGlzZmlhYmxlOiA0MTYsXG4gIEV4cGVjdGF0aW9uRmFpbGVkOiA0MTcsXG4gIEltQVRlYXBvdDogNDE4LFxuICBNaXNkaXJlY3RlZFJlcXVlc3Q6IDQyMSxcbiAgVW5wcm9jZXNzYWJsZUVudGl0eTogNDIyLFxuICBMb2NrZWQ6IDQyMyxcbiAgRmFpbGVkRGVwZW5kZW5jeTogNDI0LFxuICBUb29FYXJseTogNDI1LFxuICBVcGdyYWRlUmVxdWlyZWQ6IDQyNixcbiAgUHJlY29uZGl0aW9uUmVxdWlyZWQ6IDQyOCxcbiAgVG9vTWFueVJlcXVlc3RzOiA0MjksXG4gIFJlcXVlc3RIZWFkZXJGaWVsZHNUb29MYXJnZTogNDMxLFxuICBVbmF2YWlsYWJsZUZvckxlZ2FsUmVhc29uczogNDUxLFxuICBJbnRlcm5hbFNlcnZlckVycm9yOiA1MDAsXG4gIE5vdEltcGxlbWVudGVkOiA1MDEsXG4gIEJhZEdhdGV3YXk6IDUwMixcbiAgU2VydmljZVVuYXZhaWxhYmxlOiA1MDMsXG4gIEdhdGV3YXlUaW1lb3V0OiA1MDQsXG4gIEh0dHBWZXJzaW9uTm90U3VwcG9ydGVkOiA1MDUsXG4gIFZhcmlhbnRBbHNvTmVnb3RpYXRlczogNTA2LFxuICBJbnN1ZmZpY2llbnRTdG9yYWdlOiA1MDcsXG4gIExvb3BEZXRlY3RlZDogNTA4LFxuICBOb3RFeHRlbmRlZDogNTEwLFxuICBOZXR3b3JrQXV0aGVudGljYXRpb25SZXF1aXJlZDogNTExLFxufTtcblxuT2JqZWN0LmVudHJpZXMoSHR0cFN0YXR1c0NvZGUpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICBIdHRwU3RhdHVzQ29kZVt2YWx1ZV0gPSBrZXk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgSHR0cFN0YXR1c0NvZGU7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCBiaW5kIGZyb20gJy4vaGVscGVycy9iaW5kLmpzJztcbmltcG9ydCBBeGlvcyBmcm9tICcuL2NvcmUvQXhpb3MuanMnO1xuaW1wb3J0IG1lcmdlQ29uZmlnIGZyb20gJy4vY29yZS9tZXJnZUNvbmZpZy5qcyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi9kZWZhdWx0cy9pbmRleC5qcyc7XG5pbXBvcnQgZm9ybURhdGFUb0pTT04gZnJvbSAnLi9oZWxwZXJzL2Zvcm1EYXRhVG9KU09OLmpzJztcbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IENhbmNlbFRva2VuIGZyb20gJy4vY2FuY2VsL0NhbmNlbFRva2VuLmpzJztcbmltcG9ydCBpc0NhbmNlbCBmcm9tICcuL2NhbmNlbC9pc0NhbmNlbC5qcyc7XG5pbXBvcnQge1ZFUlNJT059IGZyb20gJy4vZW52L2RhdGEuanMnO1xuaW1wb3J0IHRvRm9ybURhdGEgZnJvbSAnLi9oZWxwZXJzL3RvRm9ybURhdGEuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IHNwcmVhZCBmcm9tICcuL2hlbHBlcnMvc3ByZWFkLmpzJztcbmltcG9ydCBpc0F4aW9zRXJyb3IgZnJvbSAnLi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gXCIuL2NvcmUvQXhpb3NIZWFkZXJzLmpzXCI7XG5pbXBvcnQgYWRhcHRlcnMgZnJvbSAnLi9hZGFwdGVycy9hZGFwdGVycy5qcyc7XG5pbXBvcnQgSHR0cFN0YXR1c0NvZGUgZnJvbSAnLi9oZWxwZXJzL0h0dHBTdGF0dXNDb2RlLmpzJztcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICpcbiAqIEByZXR1cm5zIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICBjb25zdCBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICBjb25zdCBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0LCB7YWxsT3duS2V5czogdHJ1ZX0pO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQsIG51bGwsIHthbGxPd25LZXlzOiB0cnVlfSk7XG5cbiAgLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuICBpbnN0YW5jZS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoZGVmYXVsdENvbmZpZywgaW5zdGFuY2VDb25maWcpKTtcbiAgfTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxuY29uc3QgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWxlZEVycm9yID0gQ2FuY2VsZWRFcnJvcjtcbmF4aW9zLkNhbmNlbFRva2VuID0gQ2FuY2VsVG9rZW47XG5heGlvcy5pc0NhbmNlbCA9IGlzQ2FuY2VsO1xuYXhpb3MuVkVSU0lPTiA9IFZFUlNJT047XG5heGlvcy50b0Zvcm1EYXRhID0gdG9Gb3JtRGF0YTtcblxuLy8gRXhwb3NlIEF4aW9zRXJyb3IgY2xhc3NcbmF4aW9zLkF4aW9zRXJyb3IgPSBBeGlvc0Vycm9yO1xuXG4vLyBhbGlhcyBmb3IgQ2FuY2VsZWRFcnJvciBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuYXhpb3MuQ2FuY2VsID0gYXhpb3MuQ2FuY2VsZWRFcnJvcjtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcblxuYXhpb3Muc3ByZWFkID0gc3ByZWFkO1xuXG4vLyBFeHBvc2UgaXNBeGlvc0Vycm9yXG5heGlvcy5pc0F4aW9zRXJyb3IgPSBpc0F4aW9zRXJyb3I7XG5cbi8vIEV4cG9zZSBtZXJnZUNvbmZpZ1xuYXhpb3MubWVyZ2VDb25maWcgPSBtZXJnZUNvbmZpZztcblxuYXhpb3MuQXhpb3NIZWFkZXJzID0gQXhpb3NIZWFkZXJzO1xuXG5heGlvcy5mb3JtVG9KU09OID0gdGhpbmcgPT4gZm9ybURhdGFUb0pTT04odXRpbHMuaXNIVE1MRm9ybSh0aGluZykgPyBuZXcgRm9ybURhdGEodGhpbmcpIDogdGhpbmcpO1xuXG5heGlvcy5nZXRBZGFwdGVyID0gYWRhcHRlcnMuZ2V0QWRhcHRlcjtcblxuYXhpb3MuSHR0cFN0YXR1c0NvZGUgPSBIdHRwU3RhdHVzQ29kZTtcblxuYXhpb3MuZGVmYXVsdCA9IGF4aW9zO1xuXG4vLyB0aGlzIG1vZHVsZSBzaG91bGQgb25seSBoYXZlIGEgZGVmYXVsdCBleHBvcnRcbmV4cG9ydCBkZWZhdWx0IGF4aW9zXG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvc1xuICpcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvcywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQXhpb3NFcnJvcihwYXlsb2FkKSB7XG4gIHJldHVybiB1dGlscy5pc09iamVjdChwYXlsb2FkKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufVxuIiwiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcclxuXHJcbi8qXHJcblNlYWNoINC80LDQsNC90Ywg0YXQsNC50LvRgtGL0L0gcXVlcnkt0LjQudCzXHJcbtC00L7RgtGA0L7QviDRhdCw0LTQs9Cw0LvQvdCwLtCc06nQvSBxdWVyeS3QuNC50L0g0q/RgCDQtNKv0L3QsyDQtNC+0YLRgNC+0L4g0YXQsNC00LPQsNC70L3QsC7SrtKv0L3QudC40LMgY2xhc3Mg0LDRiNC40LPQu9Cw0LYg0YXQuNC50L3RjS7QotGD0YXQsNC50L0g0LrQu9Cw0YHRgdGL0LMg0Y3QutGB0L/QvtGA0YIg0YXQuNC50LYg0LPQsNGA0LPQsNGFINCx06nQs9Op06nQtCDRhdGN0YDRjdCz0YLRjdC5INCz0LDQt9Cw0YAg0L3RjCDQuNC80L/QvtGA0YIg0YXQuNC50LYg0YLRg9GF0LDQudC9INC60LvQsNGB0YHRi9CzINCw0YjQuNCz0LvQsNC90LAuXHJcbiovXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWFyY2gge1xyXG4gICAgY29uc3RydWN0b3IocXVlcnkpIHtcclxuICAgICAgICAvLyDQrdC90Y0gcXVlcnkt0LjQudCzINC00L7RgtGA0L7QviDRhdCw0LTQs9Cw0LvQvdCwLlxyXG4gICAgICAgIHRoaXMucXVlcnkgPSBxdWVyeTtcclxuICAgIH1cclxuICAgIC8vINCl0LDQudC70YIg0YXQuNC50L3RjSDQmtC70LDRgdGBINC00L7RgtC+0YAgZnVuY3Rpb24g0LPRjdC00Y3QsyDRgtKv0LvRhdKv0q/RgCDSr9Cz0LjQudCzINGF0Y3RgNGN0LPQu9GN0LTRjdCz0LPSr9C5XHJcbiAgICBhc3luYyAgZG9TZWFyY2goc2VhcmNoKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IGF4aW9zKCdodHRwczovL2ZvcmtpZnktYXBpLmhlcm9rdWFwcC5jb20vYXBpL3NlYXJjaD9xPScgKyB0aGlzLnF1ZXJ5KTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocmVzdWx0KTtcclxuICAgICAgICAgICB0aGlzLnJlc3VsdCA9IHJlc3VsdC5kYXRhLnJlY2lwZXM7XHJcbiAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzdWx0O1xyXG4gICAgICAgIH0gY2F0Y2goZXJyb3IpIHtcclxuICAgICAgICAgICBjb25zb2xlLmxvZygn0JDRgdGD0YPQtNCw0Lsg0LPQsNGA0LvQsNCwIDogJyArIGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICB9O1xyXG5cclxufSIsImV4cG9ydCBjb25zdCBlbGVtZW50cyA9IHtcclxuICAgIHNlYXJjaEZvcm06IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZWFyY2gnKSxcclxuICAgIHNlYXJjaElucHV0OmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZWFyY2hfX2ZpZWxkJyksXHJcbiAgICBzZWFyY2hSZXN1bHRMaXN0OmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5yZXN1bHRzX19saXN0JyksXHJcbiAgICBzZWFyY2hSZXN1bHREaXY6ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJlc3VsdHMnKSxcclxuICAgIHBhZ2VCdXR0b25zOmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5yZXN1bHRzX19wYWdlcycpLFxyXG4gICByZWNpcGVEaXY6ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJlY2lwZScpLFxyXG4gICBzaG9wcGluZ0Jhc2tldDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNob3BwaW5nX19saXN0JyksXHJcbiAgIGxpa2VzTXVuZTpkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubGlrZXNfX2ZpZWxkJyksXHJcbiAgIGxpa2VzTGlzdE11bmU6ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxpa2VzX19saXN0JyksXHJcbiAgICBcclxuXHJcbn07XHJcbi8vIENzcy3QuNC50L0gY2xhc3Mt0LjQudC9INC90Y3RgNC40LnQsyDRhdC+0LvQuNGF0LPSr9C5INC90Y3QsyDQvdGN0LPQtNGB0Y3QvSDQs9Cw0LfQsNGAINGF0Y3RgNGN0LPQu9GN0Y3QtCDRj9Cy0L3QsFxyXG5leHBvcnQgY29uc3QgZWxlbWVudFN0cmluZ3MgPSB7XHJcbiAgICBsb2FkZXI6J2xvYWRlcidcclxufTtcclxuXHJcbi8vIERvIGxvYWRlclxyXG5leHBvcnQgY29uc3QgcmVuZGVyTG9hZGVyID0gKHBhcmVudCkgPT4ge1xyXG5jb25zdCBsb2FkZXIgPSBgXHJcbiAgIDxkaXYgY2xhc3M9XCIke2VsZW1lbnRTdHJpbmdzLmxvYWRlcn1cIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3ZnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dXNlIGhyZWY9XCJpbWcvaWNvbnMuc3ZnI2ljb24tY3dcIjwvdXNlPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3ZnPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICBgO1xyXG5cclxuICBwYXJlbnQuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmJlZ2luJywgbG9hZGVyKVxyXG59O1xyXG4vLyBEZWxldGUgbG9hZGVyXHJcbmV4cG9ydCBjb25zdCBjbGVhckxvYWRlciA9ICgpID0+IHtcclxuICAgIGNvbnN0IGxvYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC4ke2VsZW1lbnRTdHJpbmdzLmxvYWRlcn1gKTtcclxuICAgIGlmKGxvYWRlcikgbG9hZGVyLnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQobG9hZGVyKTsgXHJcbn0iLCJpbXBvcnQgeyBlbGVtZW50cyB9IGZyb20gXCIuL2Jhc2VcIlxyXG5cclxuLy8g0L3RjdCzINC20L7RgNGL0LMg0LTRjdC70LPRjdGGINC00Y3RjdGAINCz0LDRgNCz0LDQtiDTqdCz0LTTqdCzINC90Y3QsyDRhNGD0L3QutGG0YLRjdC5INCz0Y3QtiDSr9C30YzQtVxyXG4vLyBQcml2YXRlIGZ1bmN0aW9uXHJcbmNvbnN0IHJlbmRlclJlY2lwZSA9IChyZWNpcGUpID0+IHtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlY2lwZSk7XHJcbiAgICBcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlY2lwZS50aXRsZSk7XHJcbiAgICBjb25zdCBtYXJrdXAgPSBgXHJcbiAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJyZXN1bHRzX19saW5rXCIgaHJlZj1cIiMke3JlY2lwZS5yZWNpcGVfaWR9XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxmaWd1cmUgY2xhc3M9XCJyZXN1bHRzX19maWdcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiJHtyZWNpcGUuaW1hZ2VfdXJsfVwiIGFsdD1cIlRlc3RcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9maWd1cmU+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyZXN1bHRzX19kYXRhXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9XCJyZXN1bHRzX19uYW1lXCI+JHtyZWNpcGUudGl0bGV9PC9oND5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwicmVzdWx0c19fYXV0aG9yXCI+JHtyZWNpcGUucHVibGlzaGVyfTwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgICAgICAgPC9saT5cclxuICAgIGBcclxuICAgIC8vIHVsIFxyXG4gICAgZWxlbWVudHMuc2VhcmNoUmVzdWx0TGlzdC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsbWFya3VwKVxyXG59O1xyXG5cclxuLy8g0KXQsNC50LvRgtGL0L0g0LTQsNGA0LDQsCDRgtCw0LvQsdCw0YDRi9CzINGG0Y3QstGN0YDQu9GN0YVcclxuZXhwb3J0IGNvbnN0IGNsZWFyU2VhcmNoUWV1cnkgPSAoKSA9PiB7XHJcbiAgICBlbGVtZW50cy5zZWFyY2hJbnB1dC52YWx1ZSA9ICcnOyBcclxufVxyXG5cclxuLy8g0KXQsNC50LvRgtGL0L0g0LTQsNGA0LDQsCBTaWRlQmFyLdC40LnQvSDRgtCw0LvQsdCw0YDRi9CzINGG0Y3QstGN0YDQu9GN0YVcclxuZXhwb3J0IGNvbnN0IGNsZWFyU2VhcmNoUmVzdWx0ID0gKCkgPT4ge1xyXG4gICAgZWxlbWVudHMuc2VhcmNoUmVzdWx0TGlzdC5pbm5lckhUTUwgPSAnJztcclxuICAgIGVsZW1lbnRzLnBhZ2VCdXR0b25zLmlubmVySFRNTCA9ICcnO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0SW5wdXQgPSAoKSA9PiBlbGVtZW50cy5zZWFyY2hJbnB1dC52YWx1ZTtcclxuLy8g0LHSr9GFINC20L7RgNGL0LMg0LDQstGH0LjRgNC00LDQsyDRhNGD0L3QutGGIFxyXG5cclxuLy8g0JHSr9GFINC20L7RgNGL0L0g0LzQsNGB0YHQuNCy0YvQsyDRhdCw0LnRhdCw0LDRgSDQs9Cw0LTQvdCwINGP0LMg0YLRjdC00LTSr9Cz0Y3RjdGAINGF0YPRg9C00LDRgSDRiNKv0q8g0LPRjdC00LPQuNC50LMg0YXRjdC70LTRjdCzINCx0L7Qu9Cz0L7RkVxyXG5cclxuZXhwb3J0IGNvbnN0IHJlbmRlclJlY2lwZXMgPSAocmVjaXBlcywgY3VycmVudFBhZ2UgPSAxLCByZXN1bHRQZXJQYWdlID0gMTApID0+IHtcclxuICAgIC8vINGF0LDQudC70YLRi9C9INKv0YAg0LTSr9C90LMg0YXRg9GD0YPQtNCw0YHQu9Cw0LYg0q/Qt9Kv0q/Qu9GN0YVcclxuICAgIC8vIFBhZ2U9MiAsIHN0YXJ0PTEwLCBlbmQgPTIwXHJcbmNvbnN0IHN0YXJ0ID0gKGN1cnJlbnRQYWdlIC0xKSAqIHJlc3VsdFBlclBhZ2U7XHJcbmNvbnN0IGVuZCA9IGN1cnJlbnRQYWdlICogcmVzdWx0UGVyUGFnZTtcclxuXHJcbi8vINGN0L3QtCDRhdGD0YPQtNCw0YHQu9Cw0LvRgtGL0L0gc3RhcnQt0LDQsNGBIGVuZCDRhdKv0YDRgtGN0Lsg0L3RjCDQt9Kv0YHRjdC2INCw0LLRhyDRhdCw0YDRg9GD0LvQvdCwLlxyXG5yZWNpcGVzLnNsaWNlKHN0YXJ0LCBlbmQpLmZvckVhY2goZWwgPT4gcmVuZGVyUmVjaXBlKGVsKSk7XHJcblxyXG4vLyDQpdGD0YPQtNCw0YHQu9Cw0LvRgtGL0L0g0YLQvtCy0YfRg9GD0LTRi9CzINCz0LDRgNCz0LDQtiDQuNGA0Y3RhSBmdW5jdGlvblxyXG4vLyByZW5kZXJCdXR0b25zKHBhZ2UsICkg0Y3RhdC90LjQuSDQsNGA0LPRg9C80LXQvdGC0LDQsNGAINGP0LMg0L7QtNC+0L4gINCw0LvRjCDRhdGD0YPQtNCw0YEg0LTRjdGN0YAg0LHQsNC50LPQsNCw0LPQsNCwINC80Y3QtNC90Y0uIDIg0LTQsNGF0Ywg0LDRgNCz0YPQvNC10L3RgtCw0LDRgCDQvdC40LnRgiDRhdGN0LTRjdC9INGF0YPRg9C00LDRgdGC0LDQuSDRjtC8INCx0Y0/INCz0Y3QtNCz0LjQudCzINC80Y3QtNGN0YUg0ZHRgdGC0L7QuS5cclxuXHJcbmNvbnN0IHRvdGFsUGFnZXMgPSBNYXRoLmNlaWwocmVjaXBlcy5sZW5ndGggLyByZXN1bHRQZXJQYWdlKTtcclxucmVuZGVyQnV0dG9ucyhjdXJyZW50UGFnZSwgdG90YWxQYWdlcylcclxufTtcclxuLy8g0KHRg9C80LDQvSDRhNGD0L3QutGG0LjQudC9INC90Y3QsyDQvtC90YbQu9C+0LMg0L3RjCDQt9Cw0YDQu9Cw0YHQvdCw0LDRgSDQvdGMINC00L7QvtGIINC90Ywg0Lsg0LTRg9GD0LTQtNCw0LMg0LHQsNC50LPQsNCwLiDQotGN0LPRjdGF0Y3RjdGAIGNyZWF0ZUJ1dHRvbiAt0LjQudCzIHJlbmRlckJ1dHRvbnMgLdGE0YPQvdC60YbQuNC50L0g0LTRjdGN0YAg0L3RjCDQt9Cw0YDQu9Cw0LYg06nQs9C906kuXHJcblxyXG4vLyBjcmVhdGVCdXR0b24gZnVuY3Rpb24g0L3RjCBodG1sINCx0YPRhtCw0LDQtiDQsdCw0LnQs9Cw0LAuIFxyXG4vLyB0eXBlID09PT4gJ3ByZXYnLCAnbmV4dCdcclxuY29uc3QgY3JlYXRlQnV0dG9uID0gKHBhZ2UsIHR5cGUsIGRpcmVjdGlvbikgPT4gYFxyXG4gICAgIDxidXR0b24gY2xhc3M9XCJidG4taW5saW5lIHJlc3VsdHNfX2J0bi0tJHt0eXBlfVwiIGRhdGEtZ290byA9ICR7cGFnZX0+XHJcbiAgICAgPHNwYW4+0KXRg9GD0LTQsNGBICR7cGFnZX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHN2ZyBjbGFzcz1cInNlYXJjaF9faWNvblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dXNlIGhyZWY9XCJpbWcvaWNvbnMuc3ZnI2ljb24tdHJpYW5nbGUtJHtkaXJlY3Rpb259XCI+PC91c2U+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zdmc+XHJcbiAgICAgPC9idXR0b24+XHJcbmBcclxuY29uc3QgcmVuZGVyQnV0dG9ucyA9IChjdXJyZW50UGFnZSwgdG90YWxQYWdlcykgPT4ge1xyXG4gICAgLypcclxuICAgIGxldCBidXR0b25IdG1sOyAtLS0g0LPRjdC00Y3QsyDRhdGD0LLRjNGB0LDQs9GHINGA0YPRgyDRgtGD0YXQsNC50L0g0YLQvtCy0YfQvdGLINCx0q/RhSBodG1sLdC40LnQsyDQsdC40YfQuNC2INCw0LLQsNCw0YfQsNCw0LQg0YXQsNC00LPQsNC70L3QsC5cclxuICAgICovXHJcbiAgICBsZXQgYnV0dG9uSHRtbDtcclxuICAgIGlmKGN1cnJlbnRQYWdlID09PSAxICYmIHRvdGFsUGFnZXMgPiAxKSB7XHJcbiAgICAgICAgLy8xLdGAINGF0YPRg9C00LDRgSDQtNGN0Y3RgCDQsdCw0LnQvdCwLiAyLdGAINGF0YPRg9C00LDRgSDQs9GN0LTRjdCzINGC0L7QstGH0LjQudCzINCz0LDRgNCz0LAuXHJcbiAgICAgICAgYnV0dG9uSHRtbCA9IGNyZWF0ZUJ1dHRvbigyLCAnbmV4dCcsICdyaWdodCcpO1xyXG5cclxuICAgIH0gZWxzZSBpZihjdXJyZW50UGFnZSA8IHRvdGFsUGFnZXMpIHtcclxuICAgICAgICAvLyDQlNGD0L3QtCDRhdGD0YPQtNCw0YEg0LTRjdGN0YAg0LHQsNC50L3QsC5cclxuICAgICAgICAvLyDTqNC80L3TqdGFINCx0L7Qu9C+0L0g0LTQsNGA0LDQsNGH0LjQudC9INGF0YPRg9C00LDRgSDRgNGD0YMg0YjQuNC70LbQuNGFINGC0L7QstGH0YPRg9C00YvQvSDSr9C30q/Sr9C7XHJcbiAgICAgICAgYnV0dG9uSHRtbCA9IGNyZWF0ZUJ1dHRvbihjdXJyZW50UGFnZSAtIDEsICdwcmV2JywgJ2xlZnQnKTtcclxuICAgICAgICBidXR0b25IdG1sICs9IGNyZWF0ZUJ1dHRvbihjdXJyZW50UGFnZSArIDEsICduZXh0JywgJ3JpZ2h0Jyk7XHJcblxyXG4gICAgfSBlbHNlIGlmKGN1cnJlbnRQYWdlID09PSB0b3RhbFBhZ2VzKSB7XHJcbiAgICAgICAgLy8g0KXQsNC80LPQuNC50L0g0YHSr9Kv0LvQuNC50L0g0YXRg9GD0LTQsNGBINCz0Y3QtNGN0LMg0LHQvtC7IGN1cnJlbnRQYWdlID09PSB0b3RhbFBhZ2VcclxuICAgICAgICAvLyDRhdCw0LzQs9C40LnQvSDRgdKv0q/Qu9C40LnQvSDRhdGD0YPQtNCw0YEg0LTRjdGN0YAg0LHQsNC50L3QsC4g06jQvNC906nRhSDRhdGD0YPQtNCw0YEg0YDRg9GDINGI0LjQu9C20q/Sr9C70Y3RhSDRgtC+0LLRh9C40LnQsyDQuyDSr9C30q/Sr9C70L3RjS5cclxuICAgICAgICBidXR0b25IdG1sID0gY3JlYXRlQnV0dG9uKGN1cnJlbnRQYWdlIC0gMSwgJ3ByZXYnLCAnbGVmdCcpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFxyXG4gICAgZWxlbWVudHMucGFnZUJ1dHRvbnMuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmJlZ2luJywgYnV0dG9uSHRtbClcclxufTtcclxuXHJcblxyXG4vKlxyXG5taW4tMDoyNyBcclxu0YXRg9GD0LTQsNGBIDIt0LPRjdC/0Y3QsyDQtNGN0Y3RgCDQtNCw0YDQsNGF0LDQsNGAINGI0LjQu9C20LTRjdCzINCx0L7Qu9Cz0L7RhdGL0LMg0YXRjdGA0YXRjdC9INGF0LjQudGFINCy0Y0/INCU06nQvdCz06nQtiDRjdGF0LvRjdGF0Y3QtCDRgtC+0LLRh9C90YPRg9C0INCx0LDQudGF0LPSr9C5INCx0LDQudCz0LDQsC4g0KLRjdCz0LLRjdC7INCx0LDQudGF0LPSr9C5INCx0LDQudCz0LDQsCDQt9Kv0LnQuyDQtNGN0Y3RgCDRhdGN0YDRhdGN0L0g0LTRjdGN0YAg0L3RjCBjbGljayBldmVudC0tLSDRgtCw0LLQuNGFINGO0Lwg0LHRjT9cclxuXHJcblxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJyZXN1bHRzX19wYWdlc1wiPlxyXG4gICAgICAgICAgICAgICAgPCEtLSA8YnV0dG9uIGNsYXNzPVwiYnRuLWlubGluZSByZXN1bHRzX19idG4tLXByZXZcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3ZnIGNsYXNzPVwic2VhcmNoX19pY29uXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx1c2UgaHJlZj1cImltZy9pY29ucy5zdmcjaWNvbi10cmlhbmdsZS1sZWZ0XCI+PC91c2U+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zdmc+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+0KXRg9GD0LTQsNGBIDE8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4taW5saW5lIHJlc3VsdHNfX2J0bi0tbmV4dFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPtCl0YPRg9C00LDRgSAzPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzdmcgY2xhc3M9XCJzZWFyY2hfX2ljb25cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHVzZSBocmVmPVwiaW1nL2ljb25zLnN2ZyNpY29uLXRyaWFuZ2xlLXJpZ2h0XCI+PC91c2U+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zdmc+XHJcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj4gICAgICAtLT5cclxuICAgICAgICA8L2Rpdj4g0Y3QvdGNIDIg0YLQvtCy0Ycg0LTRjdGN0YAg0LHQuNGIINGF0LDRgNC40L0g0LPQsNC00L3QsNGFIGRpdi3QtNGN0Y3RgCDQvdGMINCx0YPRjtGDICA8ZGl2IGNsYXNzPVwicmVzdWx0c19fcGFnZXNcIj4g0LTRjdGN0YAgY2xpY2sgZXZlbnQt0YLQsNCy0YzRgdC90LDQsNGAINCw0LvRjCBidXR0b24g0LTRjdGN0YAg0LTQsNGA0LDQs9C00YHQvdGL0LMg0LzRjdC00LTRjdCzINCw0YDQs9CwINCx0LDQudC90LAuXHJcblxyXG4gICAgICAgIGluZGV4LmpzLS3QtNGN0Y3RgCDQvtGH0L7QvtC0XHJcbjxkaXYgY2xhc3M9XCJyZXN1bHRzX19wYWdlc1wiPiAtLS0g0LTRjdGN0YAgbGlzdGVuZXIg0YLQsNCy0YzQtiDTqdCz0L3TqS5cclxu0JDQu9GMINGC0L7QstGHINC90Ywg0LTQsNGA0LDQs9C00YHQsNC90YvQsyDQvtC70L7RhdC+0LTQvjpcclxuXHJcbmVsZW1lbnRzLnBhZ2VCdXR0b25zLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZWwgPT4ge1xyXG5jb25zdCBidG4gPSBlbC50YXJnZXQuY2xvc2VzdCgnLmJ0bi1pbmxpbmUnKTtcclxufSk7XHJcblxyXG7RjdC90Y0gZWwgPT4gINCz0Y3QtNGN0LMg0LzQsNC90LDQuSBjbGljayDRhdC40LnQs9C00YHRjdC9INGN0LLQtdC90YIg0LHQsNC50LPQsNCwLlxyXG5lbC50YXJnZXQgLS0t0LPRjdGF0Y3RjdGAIERPTSDQtNGN0Y3RgNGFIGNsaWNrINGF0LjQudCz0LTRgdGN0L0g0L7QsdGM0LXQutGCINC90Ywg0LPQsNGA0Ycg0LjRgNC00Y3QsyDQsdCw0LnQs9Cw0LAuXHJcbmNsb3Nlc3QoKSAtLS3Qs9GN0LTRjdCzINGE0YPQvdC60YYg0L3RjCB0YXJnZXQt0LTQvtGC0L7RgCDQsdCw0LnQs9Cw0LAg0YXQsNC80LPQuNC50L0g0L7QudGA0YXQvtC9ICcuYnRuLWlubGluZScg0LjQudC8INC60LvQsNGB0YHRgtCw0LkgQ1NTLdGN0LvQtdC80LXQvdGC0Y3QtCDRhdCw0LzQs9C40LnQvSDQvtC50YDRhdC+0L0g0LHQsNC50LPQsNCwINGC0YPRhdCw0LnQvSBET00g0LTRjdGN0YAg0LHQsNC50LPQsNCwINGN0LvQtdC80LXQvdGC0LjQudCzINC+0LvQtiDTqdCz0LTTqdCzINCx0LDQudCz0LDQsC7QnNCw0L3QsNC5IDIg0YLQvtCy0YcgMtC70LDQsCAnLmJ0bi1pbmxpbmUnLS0t0LrQu9Cw0YHRgdGC0LDQuSDQsdCw0LnQs9Cw0LAu0KLRjdCz0Y3RjdC0INC00LDRgNGB0LDQvSDRgtC+0LLRhyDQvdGMICBidG4tLS3QtNGN0Y3RgCDQvtGA0L7QvtC0INC40YDQvdGNLlxyXG5cclxu0JjQudC8INCx0LDQudC00LvQsNCw0YAg0LPQsNC00L3QsNGFIGRpdi3QtNGN0Y3RgCDQvdGMIGV2ZW50IGxpc3RlbmVyLS0t0YLQsNCy0LjQvdCz0LDQsCDQtNC+0YLQvtGAINC90Ywg0LHQsNC50LPQsNCwIDIg0YLQvtCy0YfRi9C9INCw0LvRjCDQvdGMINC00LDRgNCw0LPQtNGB0LDQvdGL0LMg0L7Qu9C2INCw0LLQsNGFINCw0YDQs9GL0L0g0YLRg9GF0LDQuSDSr9C30LvRjdGNLlxyXG5cclxuXHJcbiovXHJcblxyXG4vKlxyXG7QvNC40L3Rg9GCLTA6MzQg0KLQvtCy0YfQuNC9INC00L7RgtC+0YAg0Y7QvCDRhdCw0LTQs9Cw0LvQsNGF0LTQsNCwIDogXHJcbjxidXR0b24gY2xhc3M9XCJidG4taW5saW5lIHJlc3VsdHNfX2J0bi0tcHJldiBkYXRhLWdvdG8gPSAxXHJcblwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzdmcgY2xhc3M9XCJzZWFyY2hfX2ljb25cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHVzZSBocmVmPVwiaW1nL2ljb25zLnN2ZyNpY29uLXRyaWFuZ2xlLWxlZnRcIj48L3VzZT5cclxuICAgICAgICAgICAgICAgICAgICA8L3N2Zz5cclxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj7QpdGD0YPQtNCw0YEgMTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG5cclxuICAgICAgICAgICAgICAgIGRhdGEtZ290byA9IDEgLSotLdCz0Y3QtiDQuNC50Lwg0LHQsNC50LTQu9Cw0LDRgCDRhdCw0LTQs9Cw0LvQsNC2INCx0L7Qu9C90L4uINCi0Y3Qs9Cy0Y3QuyDQtNCw0YDQsNCwINC90Ywg0LjQvdCz0Y3QtiDQsdC40YfRgdGN0L0gYXR0cmlidXRlINGA0YPRgyBKYXZhU2NyaXB0LdGN0Y3RgSDRhdCw0L3QtNCw0YUg0LHQvtC70L7QvNC20YLQvtC5INCx0LDQudC00LDQsy7QotGD0YXQsNC50L0g0L7QsdGM0LXQutGC0YvQvSBkYXRhLXNldCDQs9GN0LTRjdCzICBhdHRyaWJ1dGUg0LTQvtGC0L7RgCBnb3RvLS0tINCz0Y3QtNGN0LMg0L3RjdGA0YLRjdC5INGO0Lwg0L7RgNC+0L7QtCDQuNGA0L3RjS7QotKv0q/QvdC40Lkg0YPRgtCz0YvQsyDRhdCw0YDQsNGF0LDQsNGAINGF0LDQtNCz0LDQu9GB0LDQvSDRg9GC0LPQsCDQsdGD0Y7RgyAxINCz0Y3QtiDQs9Cw0YDRhyDQuNGA0L3RjS5cclxuXHJcbiAgICAgICAgICAgICAgICDQntGA0YfQuNC9INKv0LXQuNC50L0gSFRNTCDQtNC+0YLQvtGAIGRhdGEtLi4uINCz0Y3RgdGN0L0gaHRtbCDRj9Cy0LYg0LHQsNC50LPQsNCwINC90YwgSmF2YVNjcmlwdC3QtCDRg9CzINOp0LPTqdCz0LTQu9C40LnQsyDQtNCw0LzQttGD0YPQu9Cw0YXRi9C9INGC0YPQu9C0INGF0LjQudC00Y3QsyDQsdCw0LnQvdCwLlxyXG5cclxuICBjb25zdCBjcmVhdGVCdXR0b24gPSAocGFnZSwgdHlwZSwgZGlyZWN0aW9uKSA9PiBgXHJcbiAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0bi1pbmxpbmUgcmVzdWx0c19fYnRuLS0ke3R5cGV9XCIgZGF0YS1nb3RvID0gJHtwYWdlfT5cclxuICAgICA8c3Bhbj7QpdGD0YPQtNCw0YEgJHtwYWdlfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8c3ZnIGNsYXNzPVwic2VhcmNoX19pY29uXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx1c2UgaHJlZj1cImltZy9pY29ucy5zdmcjaWNvbi10cmlhbmdsZS0ke2RpcmVjdGlvbn1cIj48L3VzZT5cclxuICAgICAgICAgICAgICAgICAgICA8L3N2Zz5cclxuICAgICA8L2J1dHRvbj5cclxuYFxyXG7QpdGD0YPQtNCw0YEzIC0tLdC00Y3RjdGAINC+0YfQvtC+0LQgaW5zcGVjdCAtLS3RhdC40LnQs9GN0Y3QtCDRhdCw0YDQsNGF0LDQtCBkYXRhLWdvdG89XCIzXCIg0LPRjdC2INGF0LDRgNCw0LPQtNCw0L3QsC5cclxuXHJcbiAgY29uc3QgZ29Ub1BhZ2VOdW1iZXIgPSBidG4uZGF0YXNldC5nb3RvXHJcbiBidG4uZGF0YXNldC5nb3RvIC0tLSDRgNKv0q8gXCIzXCIg0LPRjdC00Y3QsyDQvtGA0L7QvtC0INC40YDRjdGFINCx0LDQudCz0LDQsC4g0JPRjdGF0LTRjdGNIGRhdGEtZ290bz1cIjNcIiDQvdGMINGC0Y3QvNC00Y3Qs9GCINC806nRgCDQsdCw0LnQvdCwLiDSrtKv0L3QuNC50LMg0YLQvtC+INGA0YPRgyDRiNC40LvQttKv0q/Qu9C90Y0uXHJcblxyXG4gIGNvbnN0IGdvVG9QYWdlTnVtYmVyID0gcGFyc2VJbnQoYnRuLmRhdGFzZXQuZ290bywgMTApO1xyXG4qLyIsIi8qXHJcbkxlc3NvbjEyMCBcclxu06jQvdOp06nQtNGA0LjQudC9INGF0LjRh9GN0Y3Qu9GN0Y3RgCDQttC+0YDRi9C9INC80L7QtNC10Lsg0LHQuNGH0L3RjS4gU2VhcmNoLdGF0Y3RgdCz0Y3RjdGBINC90Y3QsyDQttC+0YAg0YHQvtC90LPQvtC+0LQg0YLRg9GF0LDQudC9INC20L7RgNGL0LMg0LTRjdC70LPRjdGA0Y3QvdCz0q/QudCz0Y3RjdGAINC90Ywg0YXQsNGA0YPRg9C70L3QsC4gXHJcbiDQk9GN0YXQtNGN0Y0g0YHRjdGA0LLRjdGA0Y3RjdGBINGD0LMg0LbQvtGA0YvQsyBpZC3Qs9Cw0LDRgCDQvdGMINC00LDRhdC40LYg0YLQsNGC0LDQtiDQsNCy0YfQuNGA0L3QsC4g0KPQsyDQttC+0YDRi9C9INOp0LPTqdCz0LTQu9C40LnQsyDQvdGMINGF0LDQtNCz0LDQu9Cw0YUg0LbQvtGAINCz0Y3QtNGN0LMg0LzQvtC00LXQuyDRhdGN0YDRjdCz0YLRjdC5LiDSrtKv0L3QuNC50LMgcmVjaXBlLmpzLdCz0Y3QtiDQvdGN0YDQu9GN0LUuXHJcblxyXG5cclxuKi9cclxuLypcclxu0KPQsyDQvNC+0LTQtdC7INC90Ywg0YLRg9GF0LDQudC9INC20L7RgNGL0LMgaWQt0LPQsNCw0YAg0L3RjCDRgtCw0YLQsNC2INCw0LLRh9GA0LDQsNC0INKv0LfSr9Kv0LvQvdGNLtCi0LjQudC80Y3RjdGBIGF4aW9zLdC40LnQsyDRhdGN0YDRjdCz0LvRjdC90Y0uXHJcblxyXG4qL1xyXG5cclxuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVjaXBlIHtcclxuICAgIGNvbnN0cnVjdG9yKGlkKSB7XHJcbiAgICB0aGlzLmlkID0gaWQ7XHJcblxyXG4gICAgfVxyXG5cclxuICBhc3luYyBnZXRSZWNpcGUgKCkge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXhpb3MoJ2h0dHBzOi8vZm9ya2lmeS1hcGkuaGVyb2t1YXBwLmNvbS9hcGkvZ2V0P3JJZD0nICsgdGhpcy5pZCk7XHJcbiAgICB0aGlzLmltYWdlX3VybCA9IHJlc3VsdC5kYXRhLnJlY2lwZS5pbWFnZV91cmxcclxuICAgIHRoaXMuaW5ncmVkaWVudHMgPSByZXN1bHQuZGF0YS5yZWNpcGUuaW5ncmVkaWVudHNcclxuICAgIHRoaXMucHVibGlzaGVyID0gcmVzdWx0LmRhdGEucmVjaXBlLnB1Ymxpc2hlcjtcclxuICAgIHRoaXMucHVibGlzaGVyX3VybCA9IHJlc3VsdC5kYXRhLnJlY2lwZS5wdWJsaXNoZXJfdXJsXHJcbiAgICB0aGlzLnJlY2lwZV9pZCA9IHJlc3VsdC5kYXRhLnJlY2lwZS5yZWNpcGVfaWRcclxuICAgIHRoaXMudGl0bGUgPSByZXN1bHQuZGF0YS5yZWNpcGUudGl0bGVcclxuICAgIHRoaXMuc29jaWFsX3JhbmsgPSByZXN1bHQuZGF0YS5yZWNpcGUuc29jaWFsX3JhbmtcclxuICAgIHRoaXMuc291cmNlX3VybCA9IHJlc3VsdC5kYXRhLnJlY2lwZS5zb3VyY2VfdXJsXHJcbiBcclxuICAgIFxyXG4gICAgICAvLyBjb25zb2xlLmxvZyhyZXN1bHQpO1xyXG4gICAgXHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMudGl0bGUpO1xyXG5cclxuICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuaW5ncmVkaWVudHMpO1xyXG4gICAgLy8gY29uc29sZS5sb2codGhpcy5wdWJsaXNoZXJfdXJsKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHRoaXMudGl0bGUpO1xyXG5cclxuICAgIH07XHJcbiAgICAgICBcclxuICAgIGNhbGNUaW1lKCkge1xyXG4gICAgICAvLyDQndCw0LnRgNC70LDQs9CwINCx0q/RgNGCINC+0LnRgNC+0LvRhtC+0L7Qs9C+0L7RgCA1INC80LjQvdGD0YIg0LfQsNGA0YbRg9GD0LvQvdCwXHJcbiAgICAgIHRoaXMudGltZSA9IHRoaXMuaW5ncmVkaWVudHMubGVuZ3RoICogNTtcclxuICAgIH07XHJcblxyXG4gICAgLy8g0KXRjdC00Y3QvSDRhdKv0L3QtCDQt9C+0YDQuNGD0LvQsNCz0LTRgdCw0L0g0L7RgNGGINCy0Y1cclxuICAgIGNhbGNIdW5paVRvbygpIHtcclxuICAgICAgdGhpcy5odW5paVRvbyA9IDQ7XHJcbiAgICB9XHJcbiAgIFxyXG59IiwiaW1wb3J0IHVuaXFpZCBmcm9tICd1bmlxaWQnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFza2V0IHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLml0ZW1zID0gW107XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIElkLdCz0LDQsNGAINC90Ywg0YPRgdGC0LPQsNC00LDQsyDRhNGD0L3QutGGIFxyXG4gICAgZGVsZXRlSXRlbShpZCkge1xyXG4gICAgICAgIC8vIDEuIGlkLdCz0Y3QtNGN0LMgSUQt0YLQsNC5INC+0YDRhtGL0L0g0LjQvdC00LXQutGB0LjQudCzINC80LDRgdGB0LjQstCw0LDRgSDRhdCw0LnQtiDQvtC70L3Qvi5cclxuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuaXRlbXMuZmluZEluZGV4KGVsID0+IGVsLmlkID09PSBpZClcclxuICAgICAgICAvLyAyLiDQo9CzINC40L3QtNC10LrRgSDQtNGN0Y3RgNGFINGN0LvQtdC80LXQvdGC0LjQudCzINC80LDRgdGB0LjQstCw0LDRgSDRg9GB0YLQs9Cw0L3QsFxyXG4gICAgICAgdGhpcy5pdGVtcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG5cclxuXHJcblxyXG4gICAgfVxyXG5cclxuICBhZGRJdGVtKGl0ZW0pIHtcclxuICAgIGxldCBuZXdJdGVtID0ge1xyXG4gICAgICAgIGlkOnVuaXFpZCgpLFxyXG4gICAgICAgIGl0ZW06aXRlbVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5pdGVtcy5wdXNoKG5ld0l0ZW0pO1xyXG4gICAgcmV0dXJuIG5ld0l0ZW07XHJcbiAgfVxyXG4gIC8qXHJcbiAgYWRkSXRlbSAt0LPRjdC00Y3QsyDRhNGD0L3QutGGINGA0q/SryBpdGVtLdC20L7RgNGL0LMg0LPQsNC00L3QsNCw0YEg0LTQsNC80LbRg9GD0LvQsNC90LPRg9GD0YIgXHJcbiAgdGhpcy5pdGVtcyA9IFtdOyDRjdC90Y0gaXRlbXMg0YDRg9GDINC00LDQvNC20YPRg9C70YHQsNC9INC20L7RgNGL0LMg0YXQuNC50LYg06nQs9C906lcclxuICAqL1xyXG5cclxufTtcclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGlrZXN7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAvLyBMb2NhbFN0b3JhZ2Ut0L7QvtGBINGO0Lwg0YPQvdGI0LjQtiDRh9Cw0LTRgdCw0L0g0LHQvtC7INGD0L3RiNGB0LDQvSDRjtC80LDQsCDTqdCz0L3TqVxyXG4gICAgICAgIHRoaXMucmVhZERhdGFGcm9tTG9jYWxTdG9yYWdlKCk7XHJcbiAgICAgICAgLy8g0KXRjdGA0LLRjdGNIExvY2FsU3RvcmFnZS3QvtC+0YEg0Y7QvCDRg9C90YjQuNC2INGH0LDQtNCw0LDQs9Kv0Lkg0LHQvtC7IGlmKCF0aGlzLmxpa2VzKS0tLXRoaXMubGlrZXMgPSBbXTsg0YXQvtC+0YHQvtC9INC80LDRgdGB0LjQsiDTqdCz0L3TqS5cclxuICAgICAgICBpZighdGhpcy5saWtlcykgdGhpcy5saWtlcyA9IFtdO1xyXG4gICAgfVxyXG4vLyBMaWtlINGF0LDQtNCz0LDQu9Cw0YUg0YTRg9C90LrRhlxyXG4gICAgYWRkTGlrZShpZCwgdGl0bGUsIHB1Ymxpc2hlcixpbWcpIHtcclxuICAgICAgICBjb25zdCBsaWtlID0ge1xyXG4gICAgICAgICAgICBpZDppZCxcclxuICAgICAgICAgICAgdGl0bGU6dGl0bGUsXHJcbiAgICAgICAgICAgIHB1Ymxpc2hlcjpwdWJsaXNoZXIsXHJcbiAgICAgICAgICAgIGltZzppbWdcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5saWtlcy5wdXNoKGxpa2UpO1xyXG4gICAgICAgIC8vIHN0b3JhZ2Ug0YDRg9GDINGF0LDQtNCz0LDQu9Cw0L3QsC4g0JrQu9Cw0YHRgSDQtNC+0YLRgNC+0L7RgdC+0L4g0LrQu9Cw0YHRgdGL0L3RhdCw0LAg0YTRg9C90LrRhtKv0q/QtNC40LnQsyDQtNGD0YPQtNCw0YXQtNCw0LAg0YPRgNC0INGC0LDQu9C0INC90YwgdGhpcyAtINCz0Y3QtiDQt9Cw0LDQstCw0Lsg0LHQuNGH0LjQtiDTqdCz0L3TqVxyXG4gICAgICAgIHRoaXMuc2F2ZWRhdGFUb0xvY2FsU3RvcmFnZSgpO1xyXG4gICAgICAgIHJldHVybiBsaWtlO1xyXG4gICAgfVxyXG4vLyBMaWtlINGD0YHRgtCz0LDRhSDRhNGD0L3QutGGXHJcbiAgICBkZWxldGVMaWtlKGlkKSB7XHJcbiAgICAgICAgICAgIC8vIDEuIGlkLdCz0Y3QtNGN0LMgSUQt0YLQsNC5IGxpa2Ut0LjQudC9INC40L3QtNC10LrRgdC40LnQsyDQvNCw0YHRgdC40LLQsNCw0YEg0YXQsNC50LYg0L7Qu9C90L4uXHJcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5saWtlcy5maW5kSW5kZXgoZWwgPT4gZWwuaWQgPT09IGlkKVxyXG4gICAgICAgICAgICAvLyAyLiDQo9CzINC40L3QtNC10LrRgSDQtNGN0Y3RgNGFINGN0LvQtdC80LXQvdGC0LjQudCzINC80LDRgdGB0LjQstCw0LDRgSDRg9GB0YLQs9Cw0L3QsFxyXG4gICAgICAgICAgIHRoaXMubGlrZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICB0aGlzLnNhdmVkYXRhVG9Mb2NhbFN0b3JhZ2UoKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLy8g0J7QtNC+0L4g0Y/QvNCw0YAg0L3RjdCz0Y3QvSBpZC3QtNCw0LzQttGD0YPQu9Cw0YXQsNC0INGN0L3RjSBpZC3RgtCw0Lkg0LbQvtGAIGxpa2Ut0LvQsNCz0LTRgdCw0L0g0LHQsNC50L3QsCDRg9GDINGN0YHQstGN0Lsg0q/Qs9Kv0Lkg0Y7RgyDQs9GN0LTQs9C40LnQsyDQvNGN0LTRjdGFINGI0LDQsNGA0LTQu9Cw0LPQsCDQs9Cw0YDQvdCwLlxyXG4gICAgaXNMaWtlZChpZCkge1xyXG4gICAgLy8gICBpZih0aGlzLmxpa2VzLmZpbmRJbmRleChlbCA9PiBlbC5pZCA9PT0gaWQpID09PSAtMSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgLy8gICAgZWxzZSByZXR1cm4gdHJ1ZTtcclxuICAgIHJldHVybiB0aGlzLmxpa2VzLmZpbmRJbmRleChlbCA9PiBlbC5pZCA9PT0gaWQpICE9PSAtMTtcclxuICAgIC8qXHJcbiAgICBmaW5kSW5kZXgoZWwgPT4gZWwuaWQgPT09IGlkKSDQuNC50LwgaWQt0YLQsNC5INGO0Lwg0LHQsNC50YUg0Y7QvCDQsdC+0LsgLTEg0YXQsNGB0LDRhSDQvdGN0LPRjdGN0YEg0Y/Qu9Cz0LDQsNGC0LDQuSDRg9GC0LPQsCDQs9Cw0YDQvdCwLiDQpdCw0YHQsNGFINC90Y3QsyDQuNGA0Y3RhSDRjtC8INCx0L7QuyAtMSAhPT0gLTEg0YLRjdC90YbSr9KvINCx0LjRiCDQsdGD0Y7RgyBmYWxzZSDQsdC+0LvQvtC+0LQg0LHQsNC50YXQs9Kv0Lkg0LPRjdC2INGF0Y3Qu9C90Y0uXHJcblxyXG4gICAgIEpTT04uc3RyaW5naWZ5KCB0aGlzLmxpa2VzKSBKU09OLnN0cmluZ2lmeS1mdW5jdGlvbiDQvdGMINGN0L3RjSDQvNCw0YHRgdC40LLRi9CzINCx0q/Qs9C00LjQudCzINC90Ywg0LTQsNCy0YLQsNC70YIg0YXQuNC50LYg0LHQsNC50LPQsNCw0LQg0LTQvtGC0L7RgNGFINCx0q/RhSDRg9GC0LPRg9GD0LTRi9CzINC90Ywg0L3RjdCzIHN0cmluZyDQsdC+0LvQs9C+0LYg0LfQsNC70LPQsNCw0LQgSlNPTiDQsdC+0LvQs9C+0LYg0YXRg9Cy0LjRgNCz0LDQtNCw0LMg0LHQsNC50LPQsNCwLtCi0Y3Qs9GN0YXRjdGN0YAg0LHQuNC0IGpzb24g0LHQsNC50LTQu9Cw0LDRgCDRhdCw0LTQs9Cw0LvQvdCwINCz0Y3RgdGN0L0g0q/QsyDRjtC8LiDQntC00L7QviDSr9Kv0L3QuNC50LPRjdGNIGFkZExpa2Ug0YXQuNC50YUg0LHQvtC70LPQvtC90LQg0LTRg9GD0LTQsNC2INGF0LDQtNCz0LDQu9Cw0LDQtCDRj9Cy0L3QsC4g0JzTqdC9IGxpa2Ut0Y3RjdGBINGN0LvQtdC80LXQvdGCINGD0YHRgtCz0LDRhSDQsdC+0LvQs9C+0L3QtCDQvNOp0L0g0LTRg9GD0LTQvdCwLlxyXG4gICAgKi9cclxuICAgIH1cclxuLy/QndC40LnRgiDRhdGN0LTRjdC9INGN0LvQtdC80LXQvdGCIGxpa2Ut0LvQsNCz0LTRgdCw0L0g0Y3RgdGN0YXQuNC50LMg0LzRjdC00Y3RhSBmdW5jdGlvblxyXG4gIGdldE51bWJlck9mTGlrZXMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5saWtlcy5sZW5ndGg7XHJcbiAgfVxyXG4vLyAgIGxvY2FsU3RvcmFnZSAt0LTRjdGN0YAg0YXQsNC00LPQsNC70LTQsNCzINGE0YPQvdC60YZcclxuc2F2ZWRhdGFUb0xvY2FsU3RvcmFnZSgpIHtcclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdsaWtlcycsIEpTT04uc3RyaW5naWZ5KHRoaXMubGlrZXMpKVxyXG59XHJcbi8vINCf0YDQvtCz0YDQsNC8INGN0YXQu9GN0YXRjdC0IHN0b3JhZ2Ug0LTQvtGC0L7RgCBsaWtlINC00LDRgNGB0LDQvSDQttC+0YAg0LHQsNC50LLQsNC7INGN0YXQu9GN0YXRjdC0IHN0b3JhZ2UgLSDQtNC+0YLRgNC+0L7RgSDRg9C90YjQsNCw0LQg0LfSr9GA0YXRjdC9INC00L7RgtC+0YAg0YXQsNGA0LDQs9C00LDRhSDRkdGB0YLQvtC5INCx0LDQudCz0LDQsCDRgtKv0q/QvdC40LnQsyDRhdC40LnQtS4gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xpa2VzJyktLS0g0Y3QvdGNINC90Ywg0LHSr9GFINC70LDQudC60YPRg9C00YvQsyDQvdC40LnQu9Kv0q/Qu9GH0LjRhdGB0Y3QvSBzdHJpbmcganNvbiDQsdCw0LnQtNC70LDQsNGAINC40YDQtiDQsdCw0LnQs9Cw0LAu0q7Sr9C90LjQudCzINCx0YPRhtCw0LDQs9Cw0LDQtCBqc29uLdC+0L7RgSDQvdGMIGphdmFTY3JpcHQgb2JqZWN0INCx0L7Qu9Cz0L7QtiDRhdGD0LLQuNGA0LPQsNC90LAu0q7Sr9C90LjQudCzIEpTT04ucGFyc2UoKSDQs9GN0LTRjdCzINC+0LHRjNC10LrRgiDRhdC40LnQtNGN0LMg0LHQsNC50LPQsNCwLlxyXG5yZWFkRGF0YUZyb21Mb2NhbFN0b3JhZ2UoKSB7XHJcbiB0aGlzLmxpa2VzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbGlrZXMnKSkgXHJcbn1cclxufTtcclxuXHJcbi8qXHJcbiAgLy8gTG9jYWxTdG9yYWdlLdC+0L7RgSDRjtC8INGD0L3RiNC40LYg0YfQsNC00YHQsNC9INCx0L7QuyDRg9C90YjRgdCw0L0g0Y7QvNCw0LAg06nQs9C906lcclxuICAgICAgICB0aGlzLnJlYWREYXRhRnJvbUxvY2FsU3RvcmFnZSgpO1xyXG4gICAgICAgIC8vINCl0Y3RgNCy0Y3RjSBMb2NhbFN0b3JhZ2Ut0L7QvtGBINGO0Lwg0YPQvdGI0LjQtiDRh9Cw0LTQsNCw0LPSr9C5INCx0L7QuyBpZighdGhpcy5saWtlcyktLS10aGlzLmxpa2VzID0gW107INGF0L7QvtGB0L7QvSDQvNCw0YHRgdC40LIg06nQs9C906kuXHJcbiAgICAgICAgaWYoIXRoaXMubGlrZXMpIHRoaXMubGlrZXMgPSBbXTsg0Y3QvdC0INC/0YDQvtCz0L7RgNCw0Lwg0Y3RhdC70Y3RhdGN0LQg0LzQvtC00LXQuyDQtNGN0Y3RgCDQu9Cw0LnQuiDQsdCw0LnQstCw0Lsg0YPQvdGI0LjQs9C00LDQtiDQsdCw0LnQs9Cw0LAg0Ycg0LPRjdGB0Y3QvSB2aWV3IC0tLSDQtNGN0Y3RgCDRhdGN0YDRhdGN0L0g0LHQsNC50LPQsNCwINCx0L7QuyDRhdCw0YDQsNCz0LTRg9GD0LvQsNGFINCy0Y0/XHJcbiAgICAgICAgTG9jYWxTdG9yYWdlLdC+0L7RgSDQvNC+0LTQtdC7INGA0YPRgyDQvtGA0L7QvtC0INC40YDRgdGN0L0g0LvQsNC50LrRi9CzINGF0Y3RgNGF0Y3QvSB2aWV3INC00Y3RjdGAINGF0LDRgNGD0YPQu9Cw0YUg0LLRjT8g06jQpSB3aW5kb3dzLmxvYWQg0LTRjdGN0YAg0YXQuNC50LYg06nQs9C906lcclxuXHJcbiovXHJcbiIsImltcG9ydCB7IGVsZW1lbnRzIH0gZnJvbSBcIi4vYmFzZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IHRvZ2dsZUxpa2VCdG4gPSAoaXNMaWtlZCkgPT4ge1xyXG5jb25zdCBpY29uU3RyaW5nID0gaXNMaWtlZCA/ICdpY29uLWhlYXJ0JyA6ICdpY29uLWhlYXJ0LW91dGxpbmVkJztcclxuZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJlY2lwZV9fbG92ZSB1c2UnKVxyXG4uc2V0QXR0cmlidXRlKCdocmVmJywgYFxyXG4gICAgaW1nL2ljb25zLnN2ZyMke2ljb25TdHJpbmd9XHJcbiAgICBgKVxyXG59O1xyXG5cclxuLy8gTWVudSDQtNGN0Y3RgCDQsdCw0LnQs9Cw0LAg0LfSr9GA0YXQuNC50LMgTGlrZS3QsdCw0LnQs9Cw0LAg0YLQvtGF0LjQvtC70LTQvtC70LQg0YXQsNGA0LDQs9C00YPRg9C70L3QsC4g0KXQsNGA0LjQvSDRj9C80LDRgCDRhyBMaWtlINCx0LDQudGF0LPSr9C5INGC0L7RhdC40L7Qu9C00L7Qu9C0INGF0LDRgNCw0LPQtNCw0YXQs9Kv0Lkg0LHQvtC70LPQvtC90L4uIDxkaXYgY2xhc3M9XCJsaWtlc19fZmllbGRcIj4g0Y3QvdGNIGRpdi3QuNC50LMg0YXQsNC50LYg0L7Qu9C+0L7QtCB2aXNpYmlsaXR5INCx0YPRjtGDINGF0LDRgNCw0LPQtNCw0YUg0LHQsNC50LTQu9GL0LMg0L3RjCBMaWtlINCR0LDQudGF0LPSr9C5INCx0L7QuyBoaWRkZW4g0LHQvtC70LPQvtC90L4uXHJcbiAgICAgICAgICAgXHJcbmV4cG9ydCBjb25zdCB0b2dnbGVMaWtlTWVudSA9IChudW1iZXJPZkxpa2UpID0+IHtcclxuZWxlbWVudHMubGlrZXNNdW5lLnN0eWxlLnZpc2liaWxpdHkgPSBudW1iZXJPZkxpa2UgPiAwID8gJ3Zpc2libGUnIDogJ2hpZGRlbic7XHJcbn07XHJcblxyXG4vKlxyXG7QntC00L7QviBtZW51LdC00LDRhdGMINC30q/RgNGF0Y3QvSDQtNC+0YLQvtGAIGxpa2Ut0YXQuNC50LPQtNGB0Y3QvSDQttC+0YDRi9CzINC+0YDRg9GD0LvQtiDRhdCw0YDRg9GD0LvQsNGFINGF0Y3RgNGN0LPRgtGN0LkuINKu0q/QvdC40Lkg0YLRg9C70LQgbGlrZVZpZXcg0LTRjdGN0YAgcmVuZGVyTGlrZSDRhNGD0L3QutGGINCx0LjRh9C40LYg06nQs9C906ku0KLRjdCz0Y3RjdC0IGxpa2Ut0YXQuNC50YHRjdC9INC20L7RgNC+0L4g0YLRjdGAIHJlbmRlckxpa2UgZnVuY3Rpb24g0YDRg9GD0LPQsNCwINC00LDQvNC20YPRg9C70LDQsNC0INC30q/RgNGF0Y3QvSDQtNC+0YLQvtGAINGF0LDRgNCw0LPQtNGD0YPQu9Cw0YUg0LHQsNC50LPQsNCwLiBcclxuXHJcbiAgYWRkTGlrZShpZCwgdGl0bGUsIHB1Ymxpc2hlcixpbWcpXHJcbiovXHJcblxyXG5leHBvcnQgY29uc3QgcmVuZGVyTGlrZSA9IChuZXdMaWtlT3JqSXJuZSkgPT4ge1xyXG5jb25zdCBodG1sID0gYFxyXG4gPGxpPlxyXG4gICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwibGlrZXNfX2xpbmtcIiBocmVmPVwiIyR7bmV3TGlrZU9yaklybmUuaWR9XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxmaWd1cmUgY2xhc3M9XCJsaWtlc19fZmlnXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIiR7bmV3TGlrZU9yaklybmUuaW1nfVwiIGFsdD1cIlRlc3RcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9maWd1cmU+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsaWtlc19fZGF0YVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPVwibGlrZXNfX25hbWVcIj4ke25ld0xpa2VPcmpJcm5lLnRpdGxlfTwvaDQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cImxpa2VzX19hdXRob3JcIj4ke25ld0xpa2VPcmpJcm5lLnB1Ymxpc2hlcn08L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgICAgIDwvbGk+XHJcbmA7XHJcblxyXG4gLy8gMS4gU3RyaW5nLdC40LnQsyDQsdC+0LTQuNGCIERPTSDRjdC70LXQvNC10L3RgiDQsdC+0LvQs9C+0YVcclxuIGNvbnN0IHRlbXBEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuIHRlbXBEaXYuaW5uZXJIVE1MID0gaHRtbDtcclxuIGNvbnN0IGVsZW1lbnQgPSB0ZW1wRGl2LmZpcnN0RWxlbWVudENoaWxkOyAvLyBsaSDRjdC70LXQvNC10L3RgtC40LnQsyDQs9Cw0YDQs9Cw0LYg0LDQstCw0YVcclxuXHJcbiAvLyAyLiBpbnNlcnRBZGphY2VudEVsZW1lbnQt0LQgRE9NINGN0LvQtdC80LXQvdGCINC00LDQvNC20YPRg9C70LDRhVxyXG4gZWxlbWVudHMubGlrZXNMaXN0TXVuZS5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2JlZm9yZWVuZCcsIGVsZW1lbnQpO1xyXG4vLyBlbGVtZW50cy5saWtlc0xpc3RNdW5lLmluc2VydEFkamFjZW50RWxlbWVudCgnYmVmb3JlZW5kJywgaHRtbClcclxufTtcclxuXHJcbi8vIGRpc2xpa2VkINGF0LjQudGFINKv0LXQtCDQt9Kv0YDRhSDQtNC+0YLRgNC+0L7RgSDQttC+0YDQvtC+INCx0YPRhtCw0LDQs9Cw0LDQtCDQsNCy0L3QsFxyXG4vKlxyXG5cclxuMiBMaWtlINC00LDRgNCw0YXQsNC0IGxpa2VzTGlzdE11bmUg0YDSr9KvIDIg0YjQuNGA0YXRjdCzIFxyXG4gPGxpPlxyXG4gICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwibGlrZXNfX2xpbmtcIiBocmVmPVwiIyR7bmV3TGlrZU9yaklybmUuaWR9XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxmaWd1cmUgY2xhc3M9XCJsaWtlc19fZmlnXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIiR7bmV3TGlrZU9yaklybmUuaW1nfVwiIGFsdD1cIlRlc3RcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9maWd1cmU+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsaWtlc19fZGF0YVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPVwibGlrZXNfX25hbWVcIj4ke25ld0xpa2VPcmpJcm5lLnRpdGxlfTwvaDQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cImxpa2VzX19hdXRob3JcIj4ke25ld0xpa2VPcmpJcm5lLnB1Ymxpc2hlcn08L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgICAgIDwvbGk+INGN0L3RjSBsaS3Qu9C40YHRgiDQvtGA0YHQvtC9INCx0LDQudCz0LDQsC4g0J7QtNC+0L4g0Y3QvdGNINC70LjRgdGC0LjQudCzINCx0YPRhtCw0LDQs9Cw0LDQtCDRg9GB0YLQs9Cw0YUg0LDRgdGD0YPQtNCw0Lsg0Y/RgNC40LPQtNCw0L3QsC4g0K3QvdGNIGlkLdCz0LDQsNGAINC90Ywg0YXQsNC50LYg0L7Qu9C+0L7QtFxyXG4gICAgICAgICAgICAgICAgbmV3TGlrZU9yaklybmUuaWQg0LTQsNGA0LDQsCDQvdGMINC40LnQvCDQutC70LDRgdGB0YLQsNC5INCwLXRhZy3QuNC50LMg0LHQsNGA0YzQtiDQsNCy0LDQsNC0INGC0q/Sr9C90LjQuSBwYXJlbnQt0LjQudCzINC+0LvQvtC+0LQg0YLRjdC90LTRjdGN0YEg0L3RjCByZW1vY2VDaGlsZC3Rg9GB0YLQs9CwINCz0Y3QtiDRhdC40LnQvdGNLlxyXG4gICAgICAgICAgICAgICAgIGEgY2xhc3M9XCJsaWtlc19fbGlua1wiIFxyXG4qL1xyXG5leHBvcnQgY29uc3QgZGVsZXRlTGlrZSA9IChpZCkgPT4ge1xyXG4gICBjb25zdCBsaSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC5saWtlc19fbGlua1tocmVmKj1cIiR7aWR9XCJdYCkucGFyZW50RWxlbWVudDtcclxuLy8gICAgbGkt0LjQudC9IHBhcmVudCDQvdGMIHVsINCx0LDQudCz0LDQsFxyXG4gICBpZihsaSkgbGkucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChsaSk7XHJcblxyXG59IiwiaW1wb3J0IFNlYXJjaCBmcm9tICcuL21vZGVsL1NlYXJjaCc7XHJcbmltcG9ydCB7IGVsZW1lbnRzLCByZW5kZXJMb2FkZXIsIGNsZWFyTG9hZGVyIH0gZnJvbSAnLi92aWV3L2Jhc2UnO1xyXG5pbXBvcnQgKiBhcyBzZWFyY2hWaWV3IGZyb20gJy4vdmlldy9zZWFyY2hWaWV3JztcclxuaW1wb3J0IFJlY2lwZSBmcm9tICcuL21vZGVsL1JlY2lwZSc7XHJcbmltcG9ydCB7IHJlbmRlclJlY2lwZSwgY2xlYXJSZWNpcGUsIGhpZ2hMaWdodFNlbGVjdGVkUmVjaXBlfSBmcm9tICcuL3ZpZXcvcmVjaXBlVmlldyc7XHJcbmltcG9ydCBCYXNrZXQgZnJvbSAnLi9tb2RlbC9CYXNrZXQnO1xyXG5pbXBvcnQgKiBhcyBiYXNrZXRWaWV3IGZyb20gJy4vdmlldy9iYXNrZXRWaWV3JztcclxuaW1wb3J0IExpa2UgZnJvbSAnLi9tb2RlbC9MaWtlJztcclxuaW1wb3J0ICogYXMgbGlrZXNWaWV3IGZyb20gJy4vdmlldy9saWtlc1ZpZXcnXHJcblxyXG5cclxuXHJcbmNvbnN0IHN0YXRlID0ge307XHJcblxyXG4vKipcclxuICogXHJcbiAqIE1WQyBcclxuICogbW9kZWwgPT09PiBjb250cm9sbGVyIDw9PT0gdmlld1xyXG4gKiBcclxuICogY29udHJvbGxlciDQs9GN0LTRjdCzINC90Ywg0Y3QvdGNIGluZGV4LmpzLdGF0Y3RgdGN0LMg0LTQvtGC0L7RgCDQsdCw0LnQs9Cw0LAgbW9kZWwgYW5kIHZpZXcg0YXQvtGR0YDRi9CzINGF0L7QvtGA0L7QvdC0INC90Ywg0YXQvtC70LHQvtC2INOp0LPQtNOp0LMg0LfSr9C50Lsg0Y7QvC5cclxuICogXHJcbiAqIGNvbnN0IGNvbnRyb2xSZWNpcGUgPSAoKSA9PiB7XHJcbiAgICAgLy8gMS4gVVJMLdCw0LDRgSBJRC3QuNC50LMg0YHQsNC70LPQsNC2INCw0LLQvdCwLlxyXG4gICAgIC8vIDIuINCW0L7RgNGL0L0g0LzQvtC00LXQu9C40LnQsyDSr9Kv0YHQs9GN0LYg06nQs9C906kgKGxlc3NvbjEyMCDQtNGN0Y3RgCDRhdC40LnRgdGN0L0pXHJcbiAgICAgLy8zLiBVSSDQsdGD0Y7RgyDQtNGN0LvQs9GN0YbQuNC50LMg0LHRjdC70YLQs9GN0L3RjVxyXG4gICAgIC8vNC7QltC+0YDQvtC+INGC0LDRgtCw0LYg0LDQstGH0LjRgNC90LAuXHJcbiAgICAgLy81LiDQltC+0YDRi9CzINCz0q/QudGG0Y3RgtCz0Y3RhSDRhdGD0LPQsNGG0LDQsCDQsdC+0LvQvtC9INC+0YDRhtGL0LMg0YLQvtC+0YbQvtC+0LvQvdC+XHJcbiAgICAgLy82LiDQltC+0YDQvtC+INC00Y3Qu9Cz0Y3RhtGN0L3QtCDQs9Cw0YDQs9Cw0L3QsFxyXG5cclxu0K3QvdC0INC00Y3Qu9Cz0Y3RhiDQs9GN0YHRjdC9INC00Y3RjdGAINC90Ywgdmlldy3QuNC50LMg0LDRiNC40LPQu9Cw0L3QsCDRhdCw0YDQuNC9INC20L7RgCDQs9GN0YHRjdC9INC00Y3RjdGAINC90Ywg0LzQvtC00LXQu9C40LnQsyDQsNGI0LjQs9C70LDQvdCwLlxyXG5cclxuaHR0cDovL2xvY2FsaG9zdDo4MDgwLyMzNTQ3OCAg0Y3QvdGNINGF0Y3RgdCz0Y3RjdGBIGlkLdGB0LDQu9Cz0LDQtiDQsNCy0LDRhdC00LDQsCDRjdC90Y0g0YXRjdGB0LPQuNC50LMgd2luZG93INC00L7RgtC+0YAgbG9jYXRpb24g0LPRjdC2IHByb3BlcnR5INCx0LDQudC00LDQsyDRgtGN0YAg0L3RjCDRjdC90Y0g0YXQsNGP0LPQuNC50LMg0LfQsNCw0LYg0LHQsNC50LTQsNCzINCx0LDQudCz0LDQsC5cclxuLy8gICBcclxuXHJcblxyXG7QndGN0LMg0LbQvtGAINC00Y3RjdGAINC00LDRgNCw0YXQsNC0ICMzNTQ3OCAg0LPQsNGA0Ycg0LHQsNC50LPQsNCwINC90Ywgc2VhcmNoVmlldyDQtNGN0Y3RgCDQs9Cw0YDRhyDQsdCw0LnQs9Cw0LAg0L3RjdCzINGI0LjRgNGF0Y3QsyDQttC+0YAg0LHRg9GO0YMgbGkg0LTQvtGC0L7RgCDQsC1saW5rLdGN0Y3RgCDRhdGD0YPQtNCw0YEg0LTQvtGC0L7RgCDRiNC40LbQuNC70YIg0YXQuNC50YXRjdC0ICMgLdC40LnQsyDQsNGI0LjQs9C70LDQtNCw0LMuXHJcblxyXG5ocmVmPVwiIyR7cmVjaXBlLnJlY2lwZV9pZH0g0Y3QvdGNIGhhc2gt0YHQvtC70LjQs9C00L7RhSDQsdC+0LvQs9C+0L3QtCB3aW5kb3cgb2JqZWN0INC00L7RgtC+0YAgZXZlbnQg0q/Sr9GB0Y3QtiDQsdCw0LnQtNCw0LMuINCt0L3RjSBoYXNoY2hhbmdlIGV2ZW50LdC40LnQsyDQvtC70LYg0LDQstCw0LDQtCwg0Y3QvdGNIGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC8jMzU0NzggINGN0L3RjSBVUkwt0Y3RjdGBIGlkLdC40LnQsyDQvdGMINGB0LDQu9Cz0LDQtiDQsNCy0LDQsNC0INGC0YPRhdCw0LnQvSBpZC3QuNC50LMgUmVjaXBlLmpzLW1vZGVsLdGA0YPRgyDTqdCz0Ycg0YLRg9GF0LDQudC9INC20L7RgNGL0LMgaWQt0LPQsNCw0YAg0L3RjCDRgtCw0YLQsNC2INCw0LLRh9C40YDRhyDQtNGN0LvQs9GN0YYg0LTRjdGN0YAg0LPQsNGA0LPQsNC90LAuXHJcblxyXG48YSBjbGFzcz1cInJlc3VsdHNfX2xpbmtcIiBocmVmPVwiIyR7cmVjaXBlLnJlY2lwZV9pZH1cIj5cclxuaHR0cDovL2xvY2FsaG9zdDo4MDgwLyMzNTQ3OCAtLdCz0LDRgNGHINCx0LDQudCz0LDQsCDQvdGMIFxyXG5oYXNoOiBcIiMzNTQ3N1wiXHJcbiAgXHJcbn1cclxuICogXHJcbiAqL1xyXG5cclxuXHJcbi8qKlxyXG4gKiDQpdCw0LnQu9GC0YvQvSDQutC+0L3RgtGA0L7Qu9C70LXRgFxyXG4gKi9cclxuY29uc3QgY29udHJvbFNlYXJjaCA9IGFzeW5jICgpID0+IHtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdTdWJtaXQg0LTQsNGA0LDQs9C00LvQsNCwJyk7XHJcbiAgICAvLyAxLiDQktGN0LHRjdGN0YEg0YXQsNC50LvRgtGL0L0g0YLSr9C70YXSr9Kv0YAg0q/Qs9C40LnQsyDQs9Cw0YDQs9Cw0LYg0LDQstC90LAuIFxyXG4gICAgY29uc3QgcXVlcnkgPSBzZWFyY2hWaWV3LmdldElucHV0KCk7XHJcbiAgICBcclxuICAgIGlmKHF1ZXJ5KSB7XHJcbiAgICAgICAgIC8vIDIuINCo0LjQvdGN0Y3RgCDRhdCw0LnQu9GC0YvQvSDQvtCx0YzQtdC60YLQuNC50LMg0q/Sr9GB0LPRjdC2IHN0YXRlLdGA0q/Sr9Cz0Y3RjSDRhdC40LnQvdGNLiAo0YLRg9GF0LDQudC9INGC0q/Qu9GF0q/Sr9GAINKv0LPRjdGN0YAg0YXQsNC50LTQsNCzKVxyXG4gICAgICAgICAgc3RhdGUuc2VhcmNoID0gbmV3IFNlYXJjaChxdWVyeSk7XHJcbiAgICAgICAgIC8vIDMuINCl0LDQudC70YIg0YXQuNC50YXRjdC0INC30L7RgNC40YPQu9C2INC00Y3Qu9Cz0Y3RhtC40LnQsyDQsdGN0LvRgtCz0Y3QvdGNLlxyXG4gICAgIFxyXG4gICAgICAgICBzZWFyY2hWaWV3LmNsZWFyU2VhcmNoUWV1cnkoKTtcclxuICAgICAgICAgc2VhcmNoVmlldy5jbGVhclNlYXJjaFJlc3VsdCgpO1xyXG4gICAgIC8vICAgICDQpdCw0LnQu9GCINGF0LjQudGF0Y3QtCDRjdGA0LPRjdC70LTQtNGN0LMg0YHRg9C8INCz0LDRgNCz0LDRhVxyXG4gICAgICAgICByZW5kZXJMb2FkZXIoZWxlbWVudHMuc2VhcmNoUmVzdWx0RGl2KVxyXG4gICAgICAgICAvLyA0LiDQpdCw0LnQu9GC0YvQsyDQs9Kv0LnRhtGN0YLQs9GN0L3RjS5cclxuICAgICAgICAgYXdhaXQgc3RhdGUuc2VhcmNoLmRvU2VhcmNoKCk7XHJcbiAgICAgXHJcbiAgICAgICAgIC8vIDUuINCl0LDQudC70YLRi9C9INKv0YAg0LTSr9C90LMg0LTRjdC70LPRjdGG0Y3QvdC0INKv0LfSr9Kv0LvQvdGNLlxyXG4gICAgICAgIC8vICBjb25zb2xlLmxvZyhzdGF0ZS5zZWFyY2gucmVzdWx0KTtcclxuICAgICAgICAgY2xlYXJMb2FkZXIoKTtcclxuICAgICAgICBpZihzdGF0ZS5zZWFyY2gucmVzdWx0ID09PSB1bmRlZmluZWQpIGFsZXJ0KCfQpdCw0LnQu9GC0LDQsNGAINC40LnQvCDQuNC70Y3RgNGGINCw0LvQs9CwIScpO1xyXG4gICAgICAgIGVsc2Ugc2VhcmNoVmlldy5yZW5kZXJSZWNpcGVzKHN0YXRlLnNlYXJjaC5yZXN1bHQpO1xyXG4gICAgICAgIFxyXG4gICAgICAgICBcclxuXHJcbiAgICAgfVxyXG4gICAgXHJcbn07XHJcblxyXG4gICAgIGVsZW1lbnRzLnNlYXJjaEZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgZSA9PiB7XHJcbiAgICAvKlxyXG5cclxuICAgICDRjdC90Y0g0YHRg9C80LDQvSDRhNGD0L3QutGG0LjQudC9IGUgPT4gLS0tINCz0Y3QtNGN0LMgcGFyYW1ldGVyLdGN0Y3RgCDQvdGMINCy0Y3QsSDQtNGN0Y3RgNGFIHN1Ym1pdCBldmVudCDQtNCw0LzQttC40LPQtNCw0LYg0L7RgNC2INC40YDQvdGNLiDQpdCw0LnRhSDQs9GN0LTRjdCzINC00Y3RjdGAINC00LDRgNCw0YXQsNCw0YAgc3VibWl0LdCz0Y3QtNGN0LMg0q/QudC70LTRjdC7INGF0LjQudCz0LTRjdGN0LQg0LHQsNC50LPQsNCwLiBmb3JtIC0t0L3RjCBkZWZhdWx0LdCw0LDRgCBzdWJtaXQt0LTQsNGA0LDRhdCw0LDRgCDQtNCw0YXQuNC9IHJlbG9hZCAt0YXQudC40LPQtNC00Y3QsyDQsdCw0LnQs9Cw0LAuINCi0Y3Qs9GN0Y3QtCBjb25zb2xlLmxvZygnU3VibWl0INC00LDRgNCw0LPQtNC70LDQsCcpOyDQsdC40YfQuNCzINGF0LDRgNCw0LPQtNCw0LDQtCDQsNC70LHQsCDQsdC+0LvQvtC+0LQg0LHQsNC50LPQsNCwLiDQrdC90Y0gZGVmYXVsdC3Qt9Cw0L0g0YfQsNC90LDRgNGL0LMg0L3RjCDQsdC+0LvQuNGD0LvQsNGFINGF0Y3RgNGN0LPRgtGN0LkuIFxyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7IC0tLSDQtNGD0YPQtNCw0LYgZGVmYXVsdC3QvtC+0YAgcmVsb2FkLdGF0LjQudGF0LjQudCzINC90Ywg0LHQvtC70LjRg9C70L3QsC5cclxuICAgICAqL1xyXG5cclxuICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgY29udHJvbFNlYXJjaCgpO1xyXG59KTtcclxuXHJcbmVsZW1lbnRzLnBhZ2VCdXR0b25zLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZWwgPT4ge1xyXG5jb25zdCBidG4gPSBlbC50YXJnZXQuY2xvc2VzdCgnLmJ0bi1pbmxpbmUnKTtcclxuaWYoYnRuKSB7XHJcblxyXG4gICAgIGNvbnN0IGdvVG9QYWdlTnVtYmVyID0gcGFyc2VJbnQoYnRuLmRhdGFzZXQuZ290bywgMTApO1xyXG4gICAgIC8vINCl0Y3RgNCy0Y3RjSDRgtC+0LLRhyDQsdCw0LnRhSDRjtC8INCx0L7QuyDRhdCw0LnQu9GC0YvQvdGF0LDQsCDSr9GAINC00q/QvdCzINGG0Y3QstGN0YDQu9GN0L3RjS5cclxuICAgICBzZWFyY2hWaWV3LmNsZWFyU2VhcmNoUmVzdWx0KCk7XHJcbiAgICAgLy8g0JTQsNGA0LDQsNCz0LjQudC9INGF0YPRg9C00LDRgSDRgNGD0YMg0YjQuNC70LbSr9Kv0LvQvdGNXHJcbiAgICAgc2VhcmNoVmlldy5yZW5kZXJSZWNpcGVzKHN0YXRlLnNlYXJjaC5yZXN1bHQsIGdvVG9QYWdlTnVtYmVyKTtcclxuICAgICAvLyAgc2VhcmNoVmlldy5jbGVhclNlYXJjaFJlc3VsdCgpOyDQtNGN0Y3RgCDQvtGH0LjQtiDTqdC80L3TqdGFINGC0L7QstGH0LjQudCzINGG0Y3QstGN0YDQu9GN0LYg06nQs9C906lcclxufVxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiDQltC+0YDRi9C9INC60L7QvdGC0YDQvtC70LvQtdGAXHJcbiAqL1xyXG4vLyBjb25zdCByZXMgPSBuZXcgUmVjaXBlKDQ3NzQ2KTtcclxuLy8gcmVzLmdldFJlY2lwZSgpO1xyXG5cclxuXHJcbmNvbnN0IGNvbnRyb2xSZWNpcGUgPSAgYXN5bmMgKCkgPT4ge1xyXG4gICAgIC8vIDEuIFVSTC3QsNCw0YEgSUQt0LjQudCzINGB0LDQu9Cz0LDQtiDQsNCy0L3QsC5cclxuY29uc3QgaWQgPSB3aW5kb3cubG9jYXRpb24uaGFzaC5yZXBsYWNlKCcjJywgJycpO1xyXG4gICAgIFxyXG4gICAgIC8vIFVSTC3QtNGN0Y3RgCBpZC3QsdCw0LnQs9Cw0LAg0Y3RgdGN0YXQuNC50LMg0YjQsNC70LPQsNC90LBcclxuICAgIGlmKGlkKSB7XHJcbiAgICAgICAgIFxyXG4gICAgICAgICAgICAgIC8vIDIuINCW0L7RgNGL0L0g0LzQvtC00LXQu9C40LnQsyDSr9Kv0YHQs9GN0LYg06nQs9C906kgKGxlc3NvbjEyMCDQtNGN0Y3RgCDRhdC40LnRgdGN0L0gLSDSr9Kv0L3QuNC50LMgc3RhdGUt0YDRg9GDINGF0LjQudC2INOp0LPQvdOpKVxyXG4gICAgICAgICAgICAgIHN0YXRlLnJlY2lwZSA9IG5ldyBSZWNpcGUoaWQpO1xyXG4gICAgICAgICBcclxuICAgICAgICAgICAgICAvLzMuIFVJINCx0YPRjtGDINC00Y3Qu9Cz0Y3RhtC40LnQsyDQsdGN0LvRgtCz0Y3QvdGNXHJcbiAgICAgICAgICAgICAgY2xlYXJSZWNpcGUoKTtcclxuICAgICAgICAgICAgICByZW5kZXJMb2FkZXIoZWxlbWVudHMucmVjaXBlRGl2KTtcclxuICAgICAgICAgICAgICBoaWdoTGlnaHRTZWxlY3RlZFJlY2lwZShpZCk7XHJcbiAgICAgICAgIFxyXG4gICAgICAgICAgICAgIC8vNC7QltC+0YDQvtC+INGC0LDRgtCw0LYg0LDQstGH0LjRgNC90LAuXHJcbiAgICAgICAgICAgICAgICAgICBhd2FpdCAgc3RhdGUucmVjaXBlLmdldFJlY2lwZSgpO1xyXG4gICAgICAgICAgICAgIC8vNS4g0JbQvtGA0YvQsyDQs9Kv0LnRhtGN0YLQs9GN0YUg0YXRg9Cz0LDRhtCw0LAg0LHQvtC70L7QvSDQvtGA0YbRi9CzINGC0L7QvtGG0L7QvtC70L3QvlxyXG4gICAgICAgICAgICAgIGNsZWFyTG9hZGVyKCk7XHJcbiAgICAgICAgICAgICAgc3RhdGUucmVjaXBlLmNhbGNUaW1lKCk7XHJcbiAgICAgICAgICAgICAgc3RhdGUucmVjaXBlLmNhbGNIdW5paVRvbygpO1xyXG4gICAgICAgICBcclxuICAgICAgICAgICAgICAvLzYuINCW0L7RgNC+0L4g0LTRjdC70LPRjdGG0Y3QvdC0INCz0LDRgNCz0LDQvdCwXHJcbiAgICAgICAgIFxyXG4gICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHN0YXRlLnJlY2lwZSk7ICh2aWV3LdCz0Y3RjSDQsNGI0LjQs9C70LDQsNC0INC00Y3Qu9Cz0Y3RhiDQtNGN0Y3RgCDQs9Cw0YDQs9Cw0L3QsC4pXHJcbiAgICAgICAgICAgICAgcmVuZGVyUmVjaXBlKHN0YXRlLnJlY2lwZSwgc3RhdGUubGlrZXMuaXNMaWtlZChpZCkpO1xyXG5cclxuXHJcbiAgICB9XHJcblxyXG4gIFxyXG59O1xyXG4vLyDQlNC+0L7RgNGFINC60L7QtNGL0LMg0LDRgNCw0Lkg0LjQu9Kv0q8g0YXRj9C70LHQsNGA0YfQu9Cw0L0g0LHQuNGH0LLRjdC7XHJcbi8vIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgY29udHJvbFJlY2lwZSk7XHJcbi8vIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgY29udHJvbFJlY2lwZSk7XHJcbiBbJ2hhc2hjaGFuZ2UnLCAnbG9hZCddLmZvckVhY2goIGV2ZW50ID0+IHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBjb250cm9sUmVjaXBlKSApO1xyXG4gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBlID0+IHtcclxuICAgICAvKlxyXG4gICAgINC006nQvdCz06nQtiDQsNC/0L8g0LDRh9Cw0LDQu9Cw0L3Qs9GD0YPRgiAgd2luZG93LdC40LnQvSBsb2FkINC00YPRg9C00LDQs9C00LDQvdCwLiDQotC40LnQvNGN0Y3RgSDRjdC90LQg0Y3RhdC70Y3QvdCz0q/Sr9GCIGxpa2UtLdC40LnQvSDQvNC+0LTQtdC7INKv0q/RgdCz0Y3QtiDQsdCw0LnQs9Cw0LDQsyDQtNGD0YPQtNCw0LYg06nQs9Op0YUg0YXRjdGA0Y3Qs9GC0Y3QuS5cclxuICAgICAqL1xyXG4gICAgLy8gMS7QkNC/0L8g0LTTqdC90LPTqdC2INCw0YfQsNCw0LvQsNCz0LTQsNGF0LDQtCDQm9Cw0LnQutC40LnQvSDQvNC+0LTQtdC70LjQudCzINKv0q/RgdCz0Y3QvdGNLiAoaWYoc3RhdGUubGlrZXMgPT09IGZhbHNlKSAtLS0gbGlrZSDQvdGMINGF0L7QvtGB0L7QvSDQsdC+0Lsg0YjQuNC90Y3RjdGAINKv0q/RgdCz0Y0pXHJcbiAgICBpZighc3RhdGUubGlrZXMpc3RhdGUubGlrZXMgPSBuZXcgTGlrZSgpO1xyXG4gICAgLy8gQXBwINGN0YXQu9GN0YUg0q/QtdC0IGxpa2UtbWVudS3QuNC50LMg0LPQsNGA0LPQsNGFINGN0YHRjdGF0LjQudCzINGI0LjQudC00Y3RhVxyXG4gICAgIGxpa2VzVmlldy50b2dnbGVMaWtlTWVudShzdGF0ZS5saWtlcy5nZXROdW1iZXJPZkxpa2VzKCkpO1xyXG4gICAgIC8vIGxvY2FsU3RvcmFnZS0g0LTQvtGC0L7RgCBsaWtlINCx0LDQudCy0LDQuyDRgtGN0LTQs9GN0Y3RgNC40LnQsyDRhtGN0YHRjdC90LQg0L3RjdC80LYg0YXQsNGA0YPRg9C70L3QsC5cclxuICAgICAvKlxyXG4gc3RhdGUubGlrZXMtLS0g0Y3QvdGNINCx0L7QuyDQvNCw0L3QsNC5INC60LvQsNGB0YHRi9C9INC+0LHRjNC10LrRgiDRjtC8LiAgc3RhdGUubGlrZXMubGlrZXMgLS0tMiDQtNCw0YXRjCBsaWtlINC90Ywg0Y3QvdGNINGO0LwuXHJcbiBpZighdGhpcy5saWtlcykgdGhpcy5saWtlcyA9IFtdO1xyXG4gICAgICovXHJcbiAgIHN0YXRlLmxpa2VzLmxpa2VzLmZvckVhY2goZWwgPT4gbGlrZXNWaWV3LnJlbmRlckxpa2UoZWwpKTtcclxuIH0pXHJcblxyXG4gLyoqXHJcbiAqINCd0LDQudGA0LvQsNCz0LDQvdGLINC60L7QvdGC0YDQvtC70LvQtdGAICjRgdCw0LPRgdC90YspXHJcbiAqL1xyXG5cclxuICAvKipcclxuICog0J3QsNC50YDQu9Cw0LPQsNC90Ysg0LrQvtC90YLRgNC+0LvQu9C10YAg0LzQsNCw0L3RjCDRgdCw0LPRgdCw0L3QtCDRhdC40LnRhSDRgtC+0LLRhyDQtNCw0YDQsNCz0LTQsNGF0LDQtCDRg9CzINC60L7QvdGC0YDQvtC70LvQtdGAINCw0LbQuNC70LvQsNC2INC+0YDRhtGD0YPQtNGL0LMg0LzQuNC90LjQuSDRgdCw0LPRgdC90Ysg0LzQvtC00LXQuyDRgNGD0YMg0YXQuNC50LYg06nQs9C906kuINCT0Y3RgtGN0Lsg0LDQv9C/INCw0L3RhSDRjdGF0LvRjdGF0Y3QtCDQvNCw0L3QsNC5INGB0LDQs9GB0LDQvdC0INGF0LjQudGFINGC0L7QstGHINGF0LDRgNCw0LPQtNCw0YXQs9Kv0Lkg0LHRg9GO0YMg0LHQsNC50YXQs9Kv0Lkg0LHQsNC50LPQsNCwLiDQotC40LnQvNGN0Y3RgSDRg9CzINGC0L7QstGH0L3RiyDQs9Cw0LTQvdCw0YUg0YLQvtC8IGRpdiAt0LTRjdGN0YAg0L3RjCA8ZGl2IGNsYXNzPVwicmVjaXBlXCI+XHJcbiAqICBldmVudCBMaXN0ZW5lciDRgtCw0LLRjNC2INOp0LPQstOp0Lsg0YLRg9GF0LDQudC9IGRpdi3QtNGN0Y3RgCDRhdCw0LDQvdCwINC00LDRgNCw0LPQtNGB0LDQvSDRhyDQsdCw0YDQuNCz0LTQsNC90LAuINCi0Y3Qs9GN0Y3QtCDQtNCw0YDQsNCwINC90Ywg0Y/QsyDRgtGD0YXQsNC50L0g0YLQvtCy0YfQvdGLINC30YPRgNCw0LMg0LTRjdGN0YAg0LTQsNGA0LDQs9C00LDRhdCw0LQg0LHRg9GO0YMgY2xpY2st0YXQuNC50YXRjdC0IGV2ZW50IGxpc3RlbmVyLdCx0LDRgNGM0LYg0LDQstGHINGF0LDRgNC40YMg0q/QudC70LTRjdC7INKv0LfSr9Kv0LvQtNGN0LMg0LHQvtC70LPQvtC90L4uXHJcbiAqL1xyXG5cclxuIGNvbnN0IGNvbnRyb2xCYXNrZXQgPSAoKSA9PiB7XHJcbiAgICAgLy8g0J3QsNC50YDQu9Cw0LPQsNC90Ysg0LjQvtC00LXQu9C40LnQsyDSr9Kv0YHQs9GN0L3RjSAoQmFza2V0IG1vZGVsKVxyXG5cclxuICAgICBzdGF0ZS5iYXNrZXQgPSBuZXcgQmFza2V0KCk7XHJcbiAgICAgLypcclxuICAgd2luZG93LnR0ID0gc3RhdGUuYmFza2V0OyDQs9GN0LYg0YLSr9GAINC30YPRg9GAIGNvbnNvbGUg0LTRjdGN0YAg0YLQtdGB0YLQu9GN0YUg0LfQvtGA0LjQu9Cz0L7QvtGAINC80L7QtNC10LvQvtC+IHdpbmRvdyBvYmplY3Qg0LTRjdGN0YAgdHQtINCz0Y3RgdGN0L0g0YXRg9Cy0YzRgdCw0LPRh9C40L3QtCDQtNGD0YPQtNCw0LYgY29uc29sZSDQtNGN0Y3RgCB3aW5kb3cudHQtLSDQs9GN0LYg0LTRg9GD0LTQsNCw0LQg0LTQsNGA0LDQsCDQvdGMINC90LDQudGA0LvQsNCz0YvQvSDRjdGF0L3QuNC5INGN0LvQtdC80LXQvdGC0LjQudCzINC90Ywg0YPRgdGC0LDQs9GFINGD0LvQsNCw0L0g0YLQvtCy0Ycg0LTRjdGN0YAg0YPRgdGC0LPQsNC2INKv0LfRjdGN0LQg0LTQsNGA0LDQsCDQvdGMINC00LDRhdC40L0gd2luZG93LnR0LS0g0LTQsNGF0LjQvSDQtNGD0YPQtNCw0LYg0Y3RhdC90LjQuSDRjdC70LXQvNC10Y3QvdGCINGD0YHRgtGB0LDQvSDRjdGB0Y3RhdC40LnQsyDRgtC10YHRgiDRhdC40LnQtiDRhdCw0YDRhtCz0LDQsNGPLlxyXG4gICAgICovXHJcbiAgICAgd2luZG93LnR0ID0gc3RhdGUuYmFza2V0O1xyXG4gICAgIC8vINOo0LzQvdOpINC90Ywg0YXQsNGA0LDQs9C00LDQtiDQsdCw0LnRgdCw0L0g0L3QsNC50YDQu9Cw0LPRg9GD0LTRi9CzINC00Y3Qu9Cz0Y3RhtGN0Y3RgSDRhtGN0LLRjdGA0LvRjdC90Y0uXHJcbiAgICAgYmFza2V0Vmlldy5jbGVhckl0ZW1zKCk7XHJcblxyXG5cclxuICAgICAvLyDQo9CzINC40L7QtNC10Lsg0YDRg9GDINC+0LTQvtC+INGF0LDRgNCw0LPQtNCw0LYg0LHQsNC50LPQsNCwINC20L7RgNC90Ysg0LHSr9GFINC90LDQudGA0LvQsNCz0YvQsyDQsNCy0Ycg0YXQuNC50L3RjS4gXHJcbiAgc3RhdGUucmVjaXBlLmluZ3JlZGllbnRzLmZvckVhY2gobiA9PiB7XHJcbiAgICAgICAgIC8vIG1vZGVsINCi0YPRhdCw0LnQvSDQvdCw0LnRgNC70LDQs9GL0LMg0LzQvtC00LXQuyDRgNGD0YMg0YXQuNC50L3RjVxyXG4gICAgY29uc3QgYmFza2V0SXRlbSA9ICBzdGF0ZS5iYXNrZXQuYWRkSXRlbShuKTtcclxuXHJcbiAgICAgXHJcbiAgICAgLy8gdmlldyDQotGD0YXQsNC50L0g0L3QsNC50YDQu9Cw0LPRi9CzINC00Y3Qu9Cz0Y3RhtGN0L3QtCDQs9Cw0YDQs9Cw0L3QsC5cclxuICAgICBiYXNrZXRWaWV3LnJlbmRlckl0ZW0oYmFza2V0SXRlbSlcclxufSlcclxufVxyXG5cclxuIC8qKlxyXG4gKiBMaWtlINC60L7QvdGC0YDQvtC70LvQtdGAICjQl9Kv0YDRhSlcclxuICovXHJcbmNvbnN0IGNvbnRyb2xMaWtlID0gKCkgPT4ge1xyXG4gICAgIC8vIGNvbnNvbGUubG9nKCdMaWtlIGNvbnRyb2wgY2xpY2tlZC4uLicpO1xyXG4gICAgIC8vINCX0q/RgNGFINC00LDRgNCw0LPQtNGB0LDQvSDQttC+0YDRi9CzINCw0LLRhyBsaWtlLmpzINC80L7QtNC10Lsg0YDRg9GDINGF0LjQudGFXHJcbiAgICAgLy8gMS7Qm9Cw0LnQutC40LnQvSDQvNC+0LTQtdC70LjQudCzINKv0q/RgdCz0Y3QvdGNLiAoaWYoc3RhdGUubGlrZXMgPT09IGZhbHNlKSAtLS0gbGlrZSDQvdGMINGF0L7QvtGB0L7QvSDQsdC+0Lsg0YjQuNC90Y3RjdGAINKv0q/RgdCz0Y0pXHJcbiAgICAgaWYoIXN0YXRlLmxpa2VzKXN0YXRlLmxpa2VzID0gbmV3IExpa2UoKTtcclxuXHJcbiAgICAgLy8gMi7QntC00L7QviDRhdCw0YDQsNCz0LTQsNC2INCx0LDQudCz0LDQsCDQttC+0YDRi9C9IGlkLdC40LnQsyDQvtC70LYg0LDQstCw0YVcclxuICAgICBjb25zdCBjdXJyZW50UmVjaXBlSWQgPSBzdGF0ZS5yZWNpcGUuaWQ7XHJcblxyXG5cclxuICAgICAvLyAzLtCt0L3RjSBpZC3RgtCw0Lkg0LbQvtGA0YvQsyAg0LvQsNC50LogLdGF0LjQudGB0Y3QvSDRjdGB0Y3RhdC40LnQsyDRiNCw0LvQs9Cw0YVcclxuICAgICBpZihzdGF0ZS5saWtlcy5pc0xpa2VkKGN1cnJlbnRSZWNpcGVJZCkpIHtcclxuICAgICAgICAgIC8vIDQu0JvQsNC50Lot0YXQuNC50YHRjdC9INCx0L7QuyDQu9Cw0LnQuiDRhdC40LnRgdC90LjQudCzINC90Ywg0LHQvtC70LjRg9C70L3QsC5cclxuICAgICAgICAgIHN0YXRlLmxpa2VzLmRlbGV0ZUxpa2UoY3VycmVudFJlY2lwZUlkKTtcclxuICAgICAgICAgIC8vICDQpdCw0YDQsNCz0LTQsNC2INCx0LDQudCz0LDQsCBsaWtlINCm0Y3RgdC90Y3RjdGBINGD0YHRgtCz0LDQvdCwKE1lbnUg0LTRjdGN0YDRhSDQt9Kv0YDRhdC90Y3RjdGBINGD0YHRgtCz0LDQvdCwKVxyXG4gICAgICAgICAgbGlrZXNWaWV3LmRlbGV0ZUxpa2UoY3VycmVudFJlY2lwZUlkKTtcclxuICAgICAgICAgIC8vIExpa2Ug0YLQvtCy0YfQvdGLINC70LDQudC60LDQu9GB0LDQvSDQsdCw0LnQtNC70YvQsyDQsdC+0LvQuNGD0LvQsNGFXHJcbiAgICAgICAgICBsaWtlc1ZpZXcudG9nZ2xlTGlrZUJ0bihmYWxzZSk7XHJcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZygnTGlrZSDRhdC40LnRgdGN0L0g0LHQsNC50L3QsCcpO1xyXG4gICAgICAgICAgLy8gY29uc29sZS5sb2coc3RhdGUubGlrZXMpO1xyXG4gICAgICAgICAgXHJcblxyXG4gICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgLy8gNS7Qm9Cw0LnQui3RhdC40LnQs9GN0Y3Qs9Kv0Lkg0LHQvtC7INC70LDQudC6INGF0LjQudC90Y1cclxuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdMaWtlINGF0LjQudCz0Y3RjdCz0q/QuSDQsdCw0LnQvdCwJyk7XHJcbiAgICAgICBjb25zdCBuZXdMaWtlID0gc3RhdGUubGlrZXMuYWRkTGlrZShcclxuICAgICAgICAgICAgICAgY3VycmVudFJlY2lwZUlkLFxyXG4gICAgICAgICAgICAgICBzdGF0ZS5yZWNpcGUudGlpdGxlLFxyXG4gICAgICAgICAgICAgICBzdGF0ZS5yZWNpcGUucHVibGlzaGVyLFxyXG4gICAgICAgICAgICAgICBzdGF0ZS5yZWNpcGUuaW1hZ2VfdXJsICk7XHJcbiAgICAgICAgICAgICAgIC8vINCt0L3QtCDRiNC40L3RjdGN0YAg0q/Sr9GB0YHRjdC9IExpa2Ut0LjQudCzIHJlbmRlciDRhdC40LnQvdGNLlxyXG4gICAgICAgICAgICAgICAvKlxyXG4gICAgICAgICAgICAgICBsaWtlc1ZpZXcucmVuZGVyTGlrZShuZXdMaWtlKTsg0Y3QvdC0IG5ld0xpa2Ut0LjQudCzINGP0LDQtiDQsNCy0LDRhSDQstGNINCz0Y3RhdC70Y3RjdGAINC80LDQvdCw0LkgYWRkTGlrZSDRhNGD0L3QutGGINC80LDQsNC90Ywg0q/Sr9GB0YHRjdC9IGxpa2Ut0LDQsCDQsdGD0YbQsNCw0LYg0LHQsNC50LPQsNCwLiBcclxuICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgIC8vICAgICBMaWtlINGG0Y3RgdGN0L3QtCDRjdC90Y0g0LvQsNC50LrRi9CzINC+0YDRg9GD0LvQsNGFXHJcbiAgICAgICAgICAgICAgIGxpa2VzVmlldy5yZW5kZXJMaWtlKG5ld0xpa2UpO1xyXG4gICAgICAgICAgICAgICAgICAvLyBMaWtlINGC0L7QstGH0L3RiyDQu9Cw0LnQutCw0LvRgdCw0L0g0LHQsNC50LTQu9GL0LMgbGlrZS3RhdC40LnRgdGN0L0g0LHQvtC70LPQvtGFXHJcbiAgICAgICAgICAgICAgIGxpa2VzVmlldy50b2dnbGVMaWtlQnRuKHRydWUpO1xyXG5cclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyhzdGF0ZS5saWtlcyk7XHJcblxyXG4gICAgICAgICAgLy8gTGlrZSDRhdC40LnRgdGN0L0g0YXQuNC50LPRjdGN0LPSr9C5INCw0LvRjCDRhyDRgtC+0YXQuNC+0LvQtNC+0LvQtCDQtNGD0YPQtNCw0YUg0YLRg9C7IGxpa2Ut0L3TqdGF0YbQu9C40LnQvSDQtNC+0YLQvtGAINCx0LjRh9C40YXQs9Kv0Lkg0YLRg9GB0LDQtCDQvdGMINGF0LDQvNCz0LjQudC9INC00L7QvtGAINCx0LjRh9C40LIuINCQ0YDQs9GD0LzQtdC90YLQsNCw0YAg0L3RjCDRhdGN0LTRjdC9INGI0LjRgNGF0Y3QsyBsaWtlLdCx0LDQudCz0LDQsCwg0LHQsNC50YXQs9Kv0Lkg0Y3RgdGN0YXQuNC50LMg0LTQsNC80LbRg9GD0LvQvdCwLlxyXG5cclxuICAgICAgICAgIGxpa2VzVmlldy50b2dnbGVMaWtlTWVudShzdGF0ZS5saWtlcy5nZXROdW1iZXJPZkxpa2VzKCkpO1xyXG4gICAgIFxyXG59O1xyXG5cclxuXHJcblxyXG4gZWxlbWVudHMucmVjaXBlRGl2LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuLy8gICBjb25zb2xlLmxvZygnY2xpY2sgLi4uJyk7XHJcbmlmKGUudGFyZ2V0Lm1hdGNoZXMoJy5yZWNpcGVfX2J0biwgLnJlY2lwZV9fYnRuICogJykpIHtcclxuICAgICBjb250cm9sQmFza2V0KCk7XHJcbiAgICAgXHJcbn0gZWxzZSBpZihlLnRhcmdldC5tYXRjaGVzKCcucmVjaXBlX19sb3ZlLCAucmVjaXBlX19sb3ZlIConKSkge1xyXG4gICAgIGNvbnRyb2xMaWtlKCk7XHJcbn1cclxuIH0gKVxyXG5cclxuXHJcbi8qXHJcblxyXG7QntC00L7QviDQnNC40L3QuNC5INGB0LDQs9GBINCz0Y3RgdGN0L0g0YXRjdGB0Y3Qs9GCINC90LDQudGA0LvQsNCz0YPRg9C00LDQsCDQs9Cw0YDQs9Cw0LYg0YXQsNGA0YPRg9C70LDRhdGL0L0g0YLRg9C70LQg0YHQsNCz0YHQvdGLIHZpZXcgLdGF0Y3RgdCz0Y3RjdGAINCz0LDRgNCz0LDRhSDRgtGD0LsgYmFza2V0VmlldyAt0YXRjdGB0LPQuNC50LMg0LHQuNGH0LjQtiDTqdCz0L3TqS5cclxuKi9cclxuXHJcbmVsZW1lbnRzLnNob3BwaW5nQmFza2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XHJcbiAgICAgLy8gY29uc29sZS5sb2coJ0NsaWNrZWQgc2hvcHBpbmcgYmFza2V0Jyk7XHJcbiAgICAgLy8gY29uc3Qgb2JqID0gZS50YXJnZXQuY2xvc2VzdCgnLnNob3BwaW5nX19pdGVtJyk7XHJcbiAgICAgLy8gb2JqLmRhdGFzZXQuaXRlbWlkO1xyXG4gICAgIC8vIGNvbnNvbGUubG9nKG9iaik7XHJcbiAgICAgLy8gY29uc29sZS5sb2cob2JqLmRhdGFzZXQuaXRlbWlkKTtcclxuLy8gQ2xpY2sg0YXQuNC50YHRjdC9IGxpLdGN0LvQtdC80LXQvdGC0LjQudC9IGRhdGEtaXRlbWlkINCw0YLRgtGA0LjQsdGD0YLRi9CzINGI0q/Sr9C2INCz0LDRgNCz0LDQtiDQsNCy0LDRhVxyXG4gICAgICBjb25zdCBpZCA9IGUudGFyZ2V0LmNsb3Nlc3QoJy5zaG9wcGluZ19faXRlbScpLmRhdGFzZXQuaXRlbWlkO1xyXG5cclxuICAgICAvLyAg0JTRjdGN0YDRhSDQvtC70LTRgdC+0L0gaWQt0YLQsNC5INC90LDQudGA0LvQsNCz0YvQsyDQvNC+0LTQtdC70L7QvtGBINGD0YHRgtCz0LDQvdCwLlxyXG4gICAgIHN0YXRlLmJhc2tldC5kZWxldGVJdGVtKGlkKTtcclxuXHJcbiAgICAgLypcclxuICAgICBpZC3RgtCw0Lkg0L3QsNC50YDQu9Cw0LPRi9CzINC80L7QtNC10LvQvtC+0YEg0YPRgdGC0LPQsNGF0YvQsyDRgtKv0YAg0YLRg9GA0YjQuNC2INKv0LfRjdGF0LjQudC9INGC0YPQu9C0INC00Y3RjdGAINKv0q/RgdCz0Y3RgdGN0L0g0LzQvtC00LXQu9C+0L4gd2luZG93INC+0LHRjNC10LrRgtC+0LQg0YXQuNC50LYg06nQs9Op06nQtCBjb25zb2xlINC00Y3RjdGAINC00YPRg9C00LDQtiDRg9GB0YLQs9Cw0LYg0LHQsNC50LPQsNCw0LMg0YjQsNC70LPQsNGFINCx0L7Qu9C+0LzQttGC0L7QuSDQsdCw0LnQs9Cw0LBcclxuICAgICB3aW5kb3cudHQgPSBzdGF0ZS5iYXNrZXQ7XHJcbiAgICAgKi9cclxuICAgICAvLyDQlNGN0LvQs9GN0YbRjdGN0YEg0LjQudC8IGlkLdGC0LDQuSDQvdCw0LnRgNC70LDQs9GL0LMg0L7Qu9C2INCx0LDRgSDRg9GB0YLQs9Cw0L3QsFxyXG4gICAgIGJhc2tldFZpZXcuZGVsZXRlSXRlbShpZCk7XHJcblxyXG4gICAgIFxyXG59KVxyXG5cclxuLypcclxu0KXRjdGA0YXRjdC9IGxvY2FsU3RvcmFnZSDQtNGN0Y3RgCBMaWtlcyDQvNC+0LTQtdC7INC00Y3RjdGAINC80LDRgdGB0LjQsiDQsdCw0LnQtNC70LDQsNGAINGF0LDQtNCz0LDQu9GB0LDQvSDQsdCw0LnQs9Cw0LAgbGlrZS3Rg9GD0LTRi9CzINCx0LDQudGA0LvRg9GD0LvQsNGFINCy0Y0sINCi0Y3Qs9GN0YXQuNC50L0g0YLRg9C70LQg0LzQsNGB0YHQuNCy0LDQsCBzdHJpbmcgLdCx0L7Qu9Cz0L7QvtC0INGF0LjQudC90Y0uINCY0LnQvCDQsdCw0LnQtNC70LDQsNGAIGRhdGFCYXNlLdKv0LPSr9C50LPRjdGN0YAg06nTqdGA0LjQudC9IGJyb3dzZXIg0LTRjdGN0YAg06nQs9Op0LPQtNC706nTqSDQsdCw0LnRgNC70YPRg9C70YHQsNC9INCw0L/QvyDRhdC40LnRhSDQsdC+0LvQvtC80LbRgtC+0LkuINCt0L3RjSDQvdGMINGC0LDQvdGL0LMg0YPRgdGC0LPQsNGF0LDQsNGBINC90LDQsNGIINCw0LvQs9CwINCx0L7Qu9C+0YXQs9Kv0Lkg0LHQsNC50LYg0Lsg0LHQsNC50L3QsC5cclxuKi8iLCJpbXBvcnQgeyBlbGVtZW50cyB9IGZyb20gXCIuL2Jhc2VcIjtcclxuXHJcbmNvbnN0IHJlbmRlck5haXJsYWdhID0gKG9ydHMpID0+ICBgXHJcbiAgICAgPGxpIGNsYXNzPVwicmVjaXBlX19pdGVtXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzdmcgY2xhc3M9XCJyZWNpcGVfX2ljb25cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1c2UgaHJlZj1cImltZy9pY29ucy5zdmcjaWNvbi1jaGVja1wiPjwvdXNlPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3N2Zz5cclxuICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJlY2lwZV9faW5ncmVkaWVudFwiPlxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR7b3J0c31cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgIFxyXG4gICAgYFxyXG4gICAgLypcclxuICAgIExlc3NvbjEyM1xyXG4gICAgIHNpZGVCYXIgLdC00Y3RjdGAINC40YXRjdCy0YXQuNGC0Y3QuSDQsdC+0LvRgdC+0L0g0LPQsNC90YYg0LbQvtGA0YvQsyBoaWdoTGlnaHQgLdGF0LjQudGFINCx0YPRjtGDINCx0q/QtNGN0LMg06nQvdCz06nRgtGN0Lkg0LHQvtC70LPQvtC2INOp0LPQvdOpLlxyXG4gICAgIDxhIGNsYXNzPVwicmVzdWx0c19fbGlua1wiIGhyZWY9XCIjJHtyZWNpcGUucmVjaXBlX2lkfVwiPiDSr9Kv0L3QuNC5INC60LvQsNGB0YEg0YDRg9GDINC90YwgcmVzdWx0X19saW5rLS1hY3RpdmUg0LPRjdC00Y3QsyBiYWNrZ3JvdW5kLdC40LnQsyDQvdGMINCx0q/QtNGN0LMg0YHQsNCw0YDQsNC7INOp0L3Qs9Op0YLRjdC5INCx0L7Qu9Cz0L7QtNC+0LMg0LrQu9Cw0YHRgdGL0LMg0Lsg0L3RjdC80LYg06nQs9C906kuXHJcbiAgICAqL1xyXG5cclxuICAgICBleHBvcnQgY29uc3QgaGlnaExpZ2h0U2VsZWN0ZWRSZWNpcGUgPSAoaWQpID0+IHtcclxuICAgICAgICAvLyBub2RlTGlzdCDQuNGA0L3RjSDRgtKv0q/QvdC40LnQsyDQvNCw0YHRgdC40LIg0LHQvtC70LPQvtC2INCx0q/RhSDRjdC70LXQvNC10L3RgtGN0Y3RgCDQvdCyINC00LDQstGC0LDQu9GCINCz0q/QudC70LPRjdC90Y0uXHJcbiAgICAgICBjb25zdCBhcnIgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5yZXN1bHRzX19saW5rJykpO1xyXG5cclxuICAgICAgIGFyci5mb3JFYWNoKGVsID0+IGVsLmNsYXNzTGlzdC5yZW1vdmUoJ3Jlc3VsdHNfX2xpbmstLWFjdGl2ZScpKTtcclxuICAgICAgICAvLyBcclxuICAgICAgICBjb25zdCBEb21PYmplY3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAucmVzdWx0c19fbGlua1tocmVmKj1cIiR7aWR9XCJdYClcclxuICAgICAgICAvLyBpZihEb21PYmplY3QpINC90YwgIHRydWUg0LHRg9GO0YMgaWQt0LHQsNC50YUg0Y7QvCDQsdC+0Lsg0LPRjdC00Y3QsyDQvdOp0YXRhtOp0Lsg0YLQsNCy0YzQtiDTqdCz0L3TqVxyXG4gICAgICAgIGlmKERvbU9iamVjdCkgRG9tT2JqZWN0LmNsYXNzTGlzdC5hZGQoJ3Jlc3VsdHNfX2xpbmstLWFjdGl2ZScpO1xyXG4gICAgIH1cclxuXHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgY29uc3QgY2xlYXJSZWNpcGUgPSAoKSA9PiB7XHJcbiAgICAvLyDQntC00L7QviDQtNGN0LvQs9GN0YYg0LTRjdGN0YAg0YXQsNGA0LDQs9C00LDQtiDQsdCw0LnQs9Cw0LAg0LbQvtGA0YvQsyDQsNGA0LjQu9Cz0LDQvdCwXHJcbiAgICBlbGVtZW50cy5yZWNpcGVEaXYuaW5uZXJIVE1MID0gJyc7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgcmVuZGVyUmVjaXBlID0gKHJlY2lwZSwgaXNMaWtlZCkgPT4ge1xyXG5jb25zdCBodG1sID0gYFxyXG5cclxuIDxmaWd1cmUgY2xhc3M9XCJyZWNpcGVfX2ZpZ1wiPlxyXG4gICAgICAgICAgICAgICAgPGltZyBzcmM9XCIke3JlY2lwZS5pbWFnZV91cmx9XCIgYWx0PVwiJHtyZWNpcGUudGl0bGV9XCIgY2xhc3M9XCJyZWNpcGVfX2ltZ1wiPlxyXG4gICAgICAgICAgICAgICAgPGgxIGNsYXNzPVwicmVjaXBlX190aXRsZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPiR7cmVjaXBlLnRpdGxlfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvaDE+XHJcbiAgICAgICAgICAgIDwvZmlndXJlPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicmVjaXBlX19kZXRhaWxzXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicmVjaXBlX19pbmZvXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHN2ZyBjbGFzcz1cInJlY2lwZV9faW5mby1pY29uXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx1c2UgaHJlZj1cImltZy9pY29ucy5zdmcjaWNvbi1zdG9wd2F0Y2hcIj48L3VzZT5cclxuICAgICAgICAgICAgICAgICAgICA8L3N2Zz5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInJlY2lwZV9faW5mby1kYXRhIHJlY2lwZV9faW5mby1kYXRhLS1taW51dGVzXCI+JHtyZWNpcGUudGltZX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJyZWNpcGVfX2luZm8tdGV4dFwiPiDQvNC40L3Rg9GCIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJlY2lwZV9faW5mb1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzdmcgY2xhc3M9XCJyZWNpcGVfX2luZm8taWNvblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dXNlIGhyZWY9XCJpbWcvaWNvbnMuc3ZnI2ljb24tbWFuXCI+PC91c2U+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zdmc+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJyZWNpcGVfX2luZm8tZGF0YSByZWNpcGVfX2luZm8tZGF0YS0tcGVvcGxlXCI+JHtyZWNpcGUuaHVuaWlUb299PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicmVjaXBlX19pbmZvLXRleHRcIj4g0YXSr9C90LjQuSDQvtGA0YY8L3NwYW4+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyZWNpcGVfX2luZm8tYnV0dG9uc1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuLXRpbnlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdmc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVzZSBocmVmPVwiaW1nL2ljb25zLnN2ZyNpY29uLWNpcmNsZS13aXRoLW1pbnVzXCI+PC91c2U+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3N2Zz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4tdGlueVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN2Zz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dXNlIGhyZWY9XCJpbWcvaWNvbnMuc3ZnI2ljb24tY2lyY2xlLXdpdGgtcGx1c1wiPjwvdXNlPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zdmc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInJlY2lwZV9fbG92ZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzdmcgY2xhc3M9XCJoZWFkZXJfX2xpa2VzXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx1c2UgaHJlZj1cImltZy9pY29ucy5zdmcjaWNvbi1oZWFydCR7aXNMaWtlZCA/IFwiXCIgOiAnLW91dGxpbmVkJ31cIj48L3VzZT5cclxuICAgICAgICAgICAgICAgICAgICA8L3N2Zz5cclxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuXHJcblxyXG5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJlY2lwZV9faW5ncmVkaWVudHNcIj5cclxuICAgICAgICAgICAgICAgIDx1bCBjbGFzcz1cInJlY2lwZV9faW5ncmVkaWVudC1saXN0XCI+XHJcbiAgICAgICAgICAgICAgICAke3JlY2lwZS5pbmdyZWRpZW50cy5tYXAoZWwgPT4gcmVuZGVyTmFpcmxhZ2EoZWwpKS5qb2luKCcnKX1cclxuXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgPC91bD5cclxuXHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuLXNtYWxsIHJlY2lwZV9fYnRuXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHN2ZyBjbGFzcz1cInNlYXJjaF9faWNvblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dXNlIGhyZWY9XCJpbWcvaWNvbnMuc3ZnI2ljb24tc2hvcHBpbmctY2FydFwiPjwvdXNlPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3ZnPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPtCh0JDQk9Ch0JDQndCUINCl0JjQmdClPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJlY2lwZV9fZGlyZWN0aW9uc1wiPlxyXG4gICAgICAgICAgICAgICAgPGgyIGNsYXNzPVwiaGVhZGluZy0yXCI+0KXRjdGA0YXRjdC9INCx0Y3Qu9GC0LPRjdGFINCy0Y08L2gyPlxyXG4gICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJyZWNpcGVfX2RpcmVjdGlvbnMtdGV4dFwiPlxyXG4gICAgICAgICAgICAgICAgICAgINCW0L7RgNGL0LMg0LHRjdC70YLQs9GN0LYg0L7RgNGD0YPQu9GB0LDQvVxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicmVjaXBlX19ieVwiPiR7cmVjaXBlLnB1Ymxpc2hlcn08L3NwYW4+LiDQnNCw0L3QsNC5INCy0Y3QsSDRgdCw0LnRgtCw0LDRgSDQttC+0YDRi9C9INC30LDQsNCy0YDRi9CzINCw0LLQvdCwINGD0YNcclxuICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwiYnRuLXNtYWxsIHJlY2lwZV9fYnRuXCIgaHJlZj1cIiR7cmVjaXBlLnNvdXJjZV91cmx9XCIgdGFyZ2V0PVwiX2JsYW5rXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+0JfQkNCQ0JLQkNCgINKu0JfQrdClPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzdmcgY2xhc3M9XCJzZWFyY2hfX2ljb25cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHVzZSBocmVmPVwiaW1nL2ljb25zLnN2ZyNpY29uLXRyaWFuZ2xlLXJpZ2h0XCI+PC91c2U+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zdmc+XHJcblxyXG4gICAgICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuYFxyXG5lbGVtZW50cy5yZWNpcGVEaXYuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlckJlZ2luJyxodG1sKTtcclxuXHJcbn0iLCJpbXBvcnQgeyBlbGVtZW50cyB9IGZyb20gXCIuL2Jhc2VcIjtcclxuXHJcblxyXG5leHBvcnQgY29uc3QgcmVuZGVySXRlbSA9IChpdGVtKSA9PiB7XHJcblxyXG4gICAgY29uc3QgaHRtbCA9IGBcclxuICAgICAgICAgIDxsaSBjbGFzcz1cInNob3BwaW5nX19pdGVtXCIgZGF0YS1pdGVtSWQgPSAke2l0ZW0uaWR9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwic2hvcHBpbmdfX2Rlc2NyaXB0aW9uXCI+JHtpdGVtLml0ZW19PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJzaG9wcGluZ19fZGVsZXRlIGJ0bi10aW55XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzdmc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dXNlIGhyZWY9XCJpbWcvaWNvbnMuc3ZnI2ljb24tY2lyY2xlLXdpdGgtY3Jvc3NcIj48L3VzZT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zdmc+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgIDwvbGk+ICBcclxuXHJcblxyXG5cclxuICAgYCA7XHJcblxyXG4gICAgICAgLy8gMS4gU3RyaW5nLdC40LnQsyDQsdC+0LTQuNGCIERPTSDRjdC70LXQvNC10L3RgiDQsdC+0LvQs9C+0YVcclxuICAgICAgIGNvbnN0IHRlbXBEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgIHRlbXBEaXYuaW5uZXJIVE1MID0gaHRtbDtcclxuICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0ZW1wRGl2LmZpcnN0RWxlbWVudENoaWxkOyAvLyBsaSDRjdC70LXQvNC10L3RgtC40LnQsyDQs9Cw0YDQs9Cw0LYg0LDQstCw0YVcclxuICAgXHJcbiAgICAgICAvLyAyLiBpbnNlcnRBZGphY2VudEVsZW1lbnQt0LQgRE9NINGN0LvQtdC80LXQvdGCINC00LDQvNC20YPRg9C70LDRhVxyXG4gICAgICAgZWxlbWVudHMuc2hvcHBpbmdCYXNrZXQuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdiZWZvcmVlbmQnLCBlbGVtZW50KTtcclxuXHJcbi8vICAgIGVsZW1lbnRzLnNob3BwaW5nQmFza2V0Lmluc2VydEFkamFjZW50RWxlbWVudCgnYmVmb3JlZW5kJywgaHRtbCk7XHJcbn1cclxuXHJcblxyXG4vKlxyXG5pbnNwZWN0IC0tLSDRhdC40LnQs9GN0Y3QtCDRhdCw0YDQsNGF0LDQtCBkYXRhLWl0ZW1pZD1cIm02cmdvOWVqXCIg0LPRjdC2INC40YDRgdGN0L0g0LHQsNC50L3QsC5cclxuXHJcbjxsaSBjbGFzcz1cInNob3BwaW5nX19pdGVtXCIgZGF0YS1pdGVtaWQ9XCJtNnJnbzllalwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwic2hvcHBpbmdfX2Rlc2NyaXB0aW9uXCI+NiB2ZXJ5IHRoaW4gc2xpY2VzIHByb3NjaXV0dG8gKGFib3V0IDMgb3VuY2VzKTwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwic2hvcHBpbmdfX2RlbGV0ZSBidG4tdGlueVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3ZnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVzZSBocmVmPVwiaW1nL2ljb25zLnN2ZyNpY29uLWNpcmNsZS13aXRoLWNyb3NzXCI+PC91c2U+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8L2xpPlxyXG4qL1xyXG5cclxuZXhwb3J0IGNvbnN0IGNsZWFySXRlbXMgPSAoKSA9PiB7XHJcbiAgICBlbGVtZW50cy5zaG9wcGluZ0Jhc2tldC5pbm5lckhUTUwgPSAnJztcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBkZWxldGVJdGVtID0gKGlkKSA9PiB7XHJcbiAgICAvLyAxINC00Y3Qu9Cz0Y3RhtGN0Y3RgSDRhdCw0LnQtiDQvtC70L3QvlxyXG4gIGNvbnN0IGl0ZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBbZGF0YS1pdGVtaWQ9JyR7aWR9J11gKTtcclxuLy8gICBjb25zb2xlLmxvZyhpdGVtKTtcclxuXHJcbiAgXHJcbiAgICAvLyAyLiBET00t0L7QvtGBINGD0YHRgtCz0LDQvdCwXHJcbiAgICAgLypcclxuICAgICDQr9C80LDRgCDQvdGN0LPRjdC9INGN0LvQtdC80LXQvdGCIERPTS3QvtC+0YEg0YPRgdGC0LPQsNGF0YvQvSDRgtGD0LvQtCDRgtKv0q/QvdC40LkgcGFyZW50IC3RjdC70LXQvNC10L3RgtC40LnQsyDRjdGF0Y3Qu9C2INC+0LvQvtC+0LQgcGFyZW50IC3QsNCw0YEg0L3RjCByZW1vdmVDaGlsZC3Qs9GN0LYg0YPRgdGC0LPQsNC90LAuINCT0Y3RhdC00Y3RjSDTqdOp0YDTqdOpINOp06nRgNC40LnQs9Op06kg0LTQsNC80LbRg9GD0LvQtiDRg9GB0YLQs9Cw0LDQvS5cclxuICAgICAqL1xyXG5cclxuICAgIGl0ZW0ucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChpdGVtKVxyXG5cclxufVxyXG5cclxuLypcclxuXHJcbtCc0LDQvdCw0Lkg0YHQsNCz0YHQvdGLINGF0Y3RgdGN0LMg0LHSr9GA0Y3QvSDRhdC40LnQs9C00Y3QtiDQtNGD0YPRgdC70LDQsC4g0JTRg9GA0YLQsNC5INC+0YDRhtC+0L4g0YHQvtC90LPQvtC2INC00YPRg9GB0LPQsNCw0LQg0LTQsNGA0LDQsCDQvdGMINGN0L3RjSDRgtOp0YHQu9C40LnQsyDRhtCw0LDRiCDSr9GA0LPRjdC70LbQu9Kv0q/Qu9C90Y0g0LPRjdCy0Y3QuyDRgdCw0LPRgdC90Ysg0YXRjdGB0LPQuNC50L0g0LTQvtC+0YAg0LfQsNGF0LjQsNC70LDRhSDQs9GN0YHRjdC9INGC0L7QstGHINC90Y3QvNC2INOp0LPTqdOp0LQg0Y7RgyDQt9Cw0YXQuNCw0LvRgdC90YvQsyDRj9Cw0LYg0L7Qu9C+0YUg0LLRjT8g0LPRjdCy0Y3QuyDRjdC90Y0g0LfQsNGF0LjQsNC70YHQsNC9INGF0Y3RgdGN0LMg0LzQsNC90LDQuSDQvNC+0LTQtdC7INC00L7RgtC+0YAg0LHQsNC50LPQsNCwLiBcclxuXHJcbtCi0YPRhdCw0LnQvSDQvNC+0LTQtdC70LjQudCzINC00LDQstGC0LDQu9GCINGF0LjQudCz0Y3RjdC0INGB0LDQs9GB0LDQvSDQtNC+0YLQvtGAINGO0YMg0LHQsNC50LPQsNCw0LMg0LzRjdC00L3RjS4g0q7Sr9C90LjQudCzINC30LDRhdC40LDQu9Cw0YUg0LPRjdGB0Y3QvSDRgtC+0LLRh9C90YsgY2xpY2sgZXZlbnQgbGlzdGVuZXIgLSDQtNGN0Y3RgCDRg9C90YjQuNC2INCw0LLQsNCw0LQg0YbQsNCw0Ygg0YLTqdC70LHTqdGAINGC06nQu9Op0YUg0LPRjdGB0Y3QvSDQv9GA0L7Qs9GA0LDQvNGH0LvQsNC70YvQvSDRhdGN0YHRjdCzINGA0q/SryDQsNGI0LjQs9C70LDQsNC0INGP0LLQsNGFINCx0LDQudCz0LDQsC5cclxu06jQpSDRgdCw0LPRgdCw0L0g0LTQvtGC0L7RgCDQsdCw0LnQs9Cw0LDQsyDQt9Kv0LnQu9C40LnQsyDQtNCw0YDQsNCwINC00LDRgNCw0LDQs9C40LnQvSDQv9GA0L7Qs9GA0LDQvNGH0LvQsNC70LQg0LDRiNC40LPQu9Cw0YUg0LPRjdC2INC7INC80L7QtNC10Lsg0LPRjdC00Y3QsyDQt9Kv0LnQu9C40LnQsyDQsNGI0LjQs9C70LDQsNC0INCx0LDQudCz0LDQsCDRiNKv0q8uINOo0KUg0Y/QsyDRjdC90Y0g0YHQsNCz0YHQvdGLINGF0Y3RgdGN0LPRgiDQsdC+0Lsg0LzQvtC00LXQu9C40LnQvSDRhdGN0YDRjdCz0LvRjdGNINGF0LDRgNCw0LPQtNCw0YXQs9Kv0Lkg0LHQsNC50LPQsNCwLlxyXG4qL1xyXG4iXSwibmFtZXMiOlsicGlkIiwicHJvY2VzcyIsInRvU3RyaW5nIiwibm93IiwidGltZSIsIkRhdGUiLCJsYXN0IiwibW9kdWxlIiwiZXhwb3J0cyIsInByZWZpeCIsInN1ZmZpeCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJiaW5kIiwiZm4iLCJ0aGlzQXJnIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJnZXRQcm90b3R5cGVPZiIsImtpbmRPZiIsImNhY2hlIiwiY3JlYXRlIiwidGhpbmciLCJzdHIiLCJzbGljZSIsInRvTG93ZXJDYXNlIiwia2luZE9mVGVzdCIsInR5cGUiLCJ0eXBlT2ZUZXN0IiwiaXNBcnJheSIsIkFycmF5IiwiaXNVbmRlZmluZWQiLCJpc0FycmF5QnVmZmVyIiwiaXNTdHJpbmciLCJpc0Z1bmN0aW9uIiwiaXNOdW1iZXIiLCJpc09iamVjdCIsImlzUGxhaW5PYmplY3QiLCJ2YWwiLCJpdGVyYXRvciIsImlzRGF0ZSIsImlzRmlsZSIsImlzQmxvYiIsImlzRmlsZUxpc3QiLCJpc1VSTFNlYXJjaFBhcmFtcyIsImlzUmVhZGFibGVTdHJlYW0iLCJpc1JlcXVlc3QiLCJpc1Jlc3BvbnNlIiwiaXNIZWFkZXJzIiwibWFwIiwiZm9yRWFjaCIsImFsbE93bktleXMiLCJpIiwibCIsImxlbmd0aCIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwibGVuIiwiZmluZEtleSIsIl9rZXkiLCJfZ2xvYmFsIiwiZ2xvYmFsVGhpcyIsInNlbGYiLCJ3aW5kb3ciLCJnbG9iYWwiLCJpc0NvbnRleHREZWZpbmVkIiwiY29udGV4dCIsImlzVHlwZWRBcnJheSIsIlR5cGVkQXJyYXkiLCJVaW50OEFycmF5IiwiaXNIVE1MRm9ybSIsImlzUmVnRXhwIiwicmVkdWNlRGVzY3JpcHRvcnMiLCJyZWR1Y2VyIiwiZGVzY3JpcHRvcnMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwicmVkdWNlZERlc2NyaXB0b3JzIiwiZGVzY3JpcHRvciIsIm5hbWUiLCJyZXQiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiQUxQSEEiLCJESUdJVCIsIkFMUEhBQkVUIiwiQUxQSEFfRElHSVQiLCJ0b1VwcGVyQ2FzZSIsImlzQXN5bmNGbiIsIl9zZXRJbW1lZGlhdGUiLCJzZXRJbW1lZGlhdGVTdXBwb3J0ZWQiLCJzZXRJbW1lZGlhdGUiLCJwb3N0TWVzc2FnZVN1cHBvcnRlZCIsInBvc3RNZXNzYWdlIiwidG9rZW4iLCJNYXRoIiwicmFuZG9tIiwiY2FsbGJhY2tzIiwiYWRkRXZlbnRMaXN0ZW5lciIsInNvdXJjZSIsImRhdGEiLCJzaGlmdCIsImNiIiwicHVzaCIsInNldFRpbWVvdXQiLCJhc2FwIiwicXVldWVNaWNyb3Rhc2siLCJuZXh0VGljayIsImlzQnVmZmVyIiwiY29uc3RydWN0b3IiLCJpc0Zvcm1EYXRhIiwia2luZCIsIkZvcm1EYXRhIiwiYXBwZW5kIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJyZXN1bHQiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImJ1ZmZlciIsImlzQm9vbGVhbiIsImlzU3RyZWFtIiwicGlwZSIsIm1lcmdlIiwiY2FzZWxlc3MiLCJ0aGlzIiwiYXNzaWduVmFsdWUiLCJ0YXJnZXRLZXkiLCJleHRlbmQiLCJiIiwidHJpbSIsInJlcGxhY2UiLCJzdHJpcEJPTSIsImNvbnRlbnQiLCJjaGFyQ29kZUF0IiwiaW5oZXJpdHMiLCJzdXBlckNvbnN0cnVjdG9yIiwicHJvcHMiLCJhc3NpZ24iLCJ0b0ZsYXRPYmplY3QiLCJzb3VyY2VPYmoiLCJkZXN0T2JqIiwiZmlsdGVyIiwicHJvcEZpbHRlciIsIm1lcmdlZCIsImVuZHNXaXRoIiwic2VhcmNoU3RyaW5nIiwicG9zaXRpb24iLCJTdHJpbmciLCJsYXN0SW5kZXgiLCJpbmRleE9mIiwidG9BcnJheSIsImFyciIsImZvckVhY2hFbnRyeSIsIm5leHQiLCJkb25lIiwicGFpciIsIm1hdGNoQWxsIiwicmVnRXhwIiwibWF0Y2hlcyIsImV4ZWMiLCJoYXNPd25Qcm9wIiwiZnJlZXplTWV0aG9kcyIsIndyaXRhYmxlIiwic2V0IiwiRXJyb3IiLCJ0b09iamVjdFNldCIsImFycmF5T3JTdHJpbmciLCJkZWxpbWl0ZXIiLCJkZWZpbmUiLCJzcGxpdCIsInRvQ2FtZWxDYXNlIiwibSIsInAxIiwicDIiLCJub29wIiwidG9GaW5pdGVOdW1iZXIiLCJkZWZhdWx0VmFsdWUiLCJOdW1iZXIiLCJpc0Zpbml0ZSIsImdlbmVyYXRlU3RyaW5nIiwic2l6ZSIsImFscGhhYmV0IiwiaXNTcGVjQ29tcGxpYW50Rm9ybSIsInRvSlNPTk9iamVjdCIsInN0YWNrIiwidmlzaXQiLCJ0YXJnZXQiLCJyZWR1Y2VkVmFsdWUiLCJpc1RoZW5hYmxlIiwidGhlbiIsImNhdGNoIiwiQXhpb3NFcnJvciIsIm1lc3NhZ2UiLCJjb2RlIiwiY29uZmlnIiwicmVxdWVzdCIsInJlc3BvbnNlIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJzdGF0dXMiLCJ1dGlscyIsInRvSlNPTiIsImRlc2NyaXB0aW9uIiwibnVtYmVyIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwiZnJvbSIsImVycm9yIiwiY3VzdG9tUHJvcHMiLCJheGlvc0Vycm9yIiwiY2F1c2UiLCJpc1Zpc2l0YWJsZSIsInJlbW92ZUJyYWNrZXRzIiwicmVuZGVyS2V5IiwicGF0aCIsImRvdHMiLCJjb25jYXQiLCJqb2luIiwicHJlZGljYXRlcyIsInRlc3QiLCJmb3JtRGF0YSIsIm9wdGlvbnMiLCJUeXBlRXJyb3IiLCJtZXRhVG9rZW5zIiwiaW5kZXhlcyIsIm9wdGlvbiIsInZpc2l0b3IiLCJkZWZhdWx0VmlzaXRvciIsInVzZUJsb2IiLCJCbG9iIiwiY29udmVydFZhbHVlIiwidG9JU09TdHJpbmciLCJCdWZmZXIiLCJKU09OIiwic3RyaW5naWZ5Iiwic29tZSIsImlzRmxhdEFycmF5IiwiZWwiLCJpbmRleCIsImV4cG9zZWRIZWxwZXJzIiwiYnVpbGQiLCJwb3AiLCJlbmNvZGUiLCJjaGFyTWFwIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwibWF0Y2giLCJBeGlvc1VSTFNlYXJjaFBhcmFtcyIsInBhcmFtcyIsIl9wYWlycyIsImVuY29kZXIiLCJfZW5jb2RlIiwiYnVpbGRVUkwiLCJ1cmwiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVGbiIsInNlcmlhbGl6ZWRQYXJhbXMiLCJoYXNobWFya0luZGV4IiwiaGFuZGxlcnMiLCJ1c2UiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInN5bmNocm9ub3VzIiwicnVuV2hlbiIsImVqZWN0IiwiaWQiLCJjbGVhciIsImgiLCJzaWxlbnRKU09OUGFyc2luZyIsImZvcmNlZEpTT05QYXJzaW5nIiwiY2xhcmlmeVRpbWVvdXRFcnJvciIsImlzQnJvd3NlciIsImNsYXNzZXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJwcm90b2NvbHMiLCJoYXNCcm93c2VyRW52IiwiZG9jdW1lbnQiLCJfbmF2aWdhdG9yIiwibmF2aWdhdG9yIiwiaGFzU3RhbmRhcmRCcm93c2VyRW52IiwicHJvZHVjdCIsImhhc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudiIsIldvcmtlckdsb2JhbFNjb3BlIiwiaW1wb3J0U2NyaXB0cyIsIm9yaWdpbiIsImxvY2F0aW9uIiwiaHJlZiIsImJ1aWxkUGF0aCIsImlzTnVtZXJpY0tleSIsImlzTGFzdCIsImFycmF5VG9PYmplY3QiLCJlbnRyaWVzIiwicGFyc2VQcm9wUGF0aCIsImRlZmF1bHRzIiwidHJhbnNpdGlvbmFsIiwiYWRhcHRlciIsInRyYW5zZm9ybVJlcXVlc3QiLCJoZWFkZXJzIiwiY29udGVudFR5cGUiLCJnZXRDb250ZW50VHlwZSIsImhhc0pTT05Db250ZW50VHlwZSIsImlzT2JqZWN0UGF5bG9hZCIsInNldENvbnRlbnRUeXBlIiwicGxhdGZvcm0iLCJoZWxwZXJzIiwiaXNOb2RlIiwidG9VUkxFbmNvZGVkRm9ybSIsImZvcm1TZXJpYWxpemVyIiwiX0Zvcm1EYXRhIiwiZW52IiwicmF3VmFsdWUiLCJwYXJzZSIsImUiLCJzdHJpbmdpZnlTYWZlbHkiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsIkpTT05SZXF1ZXN0ZWQiLCJyZXNwb25zZVR5cGUiLCJzdHJpY3RKU09OUGFyc2luZyIsIkVSUl9CQURfUkVTUE9OU0UiLCJ0aW1lb3V0IiwieHNyZkNvb2tpZU5hbWUiLCJ4c3JmSGVhZGVyTmFtZSIsIm1heENvbnRlbnRMZW5ndGgiLCJtYXhCb2R5TGVuZ3RoIiwidmFsaWRhdGVTdGF0dXMiLCJjb21tb24iLCJtZXRob2QiLCJpZ25vcmVEdXBsaWNhdGVPZiIsIiRpbnRlcm5hbHMiLCJub3JtYWxpemVIZWFkZXIiLCJoZWFkZXIiLCJub3JtYWxpemVWYWx1ZSIsIm1hdGNoSGVhZGVyVmFsdWUiLCJpc0hlYWRlck5hbWVGaWx0ZXIiLCJBeGlvc0hlYWRlcnMiLCJ2YWx1ZU9yUmV3cml0ZSIsInJld3JpdGUiLCJzZXRIZWFkZXIiLCJfdmFsdWUiLCJfaGVhZGVyIiwiX3Jld3JpdGUiLCJsSGVhZGVyIiwic2V0SGVhZGVycyIsInJhd0hlYWRlcnMiLCJwYXJzZWQiLCJsaW5lIiwic3Vic3RyaW5nIiwicGFyc2VIZWFkZXJzIiwicGFyc2VyIiwidG9rZW5zIiwidG9rZW5zUkUiLCJwYXJzZVRva2VucyIsImhhcyIsIm1hdGNoZXIiLCJkZWxldGVkIiwiZGVsZXRlSGVhZGVyIiwibm9ybWFsaXplIiwiZm9ybWF0Iiwibm9ybWFsaXplZCIsInciLCJjaGFyIiwiZm9ybWF0SGVhZGVyIiwidGFyZ2V0cyIsImFzU3RyaW5ncyIsImZpcnN0IiwiY29tcHV0ZWQiLCJhY2Nlc3NvciIsImFjY2Vzc29ycyIsImRlZmluZUFjY2Vzc29yIiwiYWNjZXNzb3JOYW1lIiwibWV0aG9kTmFtZSIsImFyZzEiLCJhcmcyIiwiYXJnMyIsImNvbmZpZ3VyYWJsZSIsImJ1aWxkQWNjZXNzb3JzIiwibWFwcGVkIiwiaGVhZGVyVmFsdWUiLCJ0cmFuc2Zvcm1EYXRhIiwiZm5zIiwiaXNDYW5jZWwiLCJfX0NBTkNFTF9fIiwiQ2FuY2VsZWRFcnJvciIsIkVSUl9DQU5DRUxFRCIsInNldHRsZSIsInJlc29sdmUiLCJyZWplY3QiLCJFUlJfQkFEX1JFUVVFU1QiLCJmbG9vciIsInByb2dyZXNzRXZlbnRSZWR1Y2VyIiwibGlzdGVuZXIiLCJpc0Rvd25sb2FkU3RyZWFtIiwiZnJlcSIsImJ5dGVzTm90aWZpZWQiLCJfc3BlZWRvbWV0ZXIiLCJzYW1wbGVzQ291bnQiLCJtaW4iLCJieXRlcyIsInRpbWVzdGFtcHMiLCJmaXJzdFNhbXBsZVRTIiwiaGVhZCIsInRhaWwiLCJjaHVua0xlbmd0aCIsInN0YXJ0ZWRBdCIsImJ5dGVzQ291bnQiLCJwYXNzZWQiLCJyb3VuZCIsImxhc3RBcmdzIiwidGltZXIiLCJ0aW1lc3RhbXAiLCJ0aHJlc2hvbGQiLCJpbnZva2UiLCJhcmdzIiwiY2xlYXJUaW1lb3V0IiwibG9hZGVkIiwidG90YWwiLCJsZW5ndGhDb21wdXRhYmxlIiwicHJvZ3Jlc3NCeXRlcyIsInJhdGUiLCJwcm9ncmVzcyIsImVzdGltYXRlZCIsImV2ZW50IiwicHJvZ3Jlc3NFdmVudERlY29yYXRvciIsInRocm90dGxlZCIsImFzeW5jRGVjb3JhdG9yIiwiaXNNU0lFIiwiVVJMIiwicHJvdG9jb2wiLCJob3N0IiwicG9ydCIsInVzZXJBZ2VudCIsIndyaXRlIiwiZXhwaXJlcyIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsInRvR01UU3RyaW5nIiwicmVhZCIsIlJlZ0V4cCIsImRlY29kZVVSSUNvbXBvbmVudCIsInJlbW92ZSIsImJ1aWxkRnVsbFBhdGgiLCJiYXNlVVJMIiwicmVxdWVzdGVkVVJMIiwicmVsYXRpdmVVUkwiLCJjb21iaW5lVVJMcyIsImhlYWRlcnNUb09iamVjdCIsIm1lcmdlQ29uZmlnIiwiY29uZmlnMSIsImNvbmZpZzIiLCJnZXRNZXJnZWRWYWx1ZSIsIm1lcmdlRGVlcFByb3BlcnRpZXMiLCJ2YWx1ZUZyb21Db25maWcyIiwiZGVmYXVsdFRvQ29uZmlnMiIsIm1lcmdlRGlyZWN0S2V5cyIsIm1lcmdlTWFwIiwicGFyYW1zU2VyaWFsaXplciIsInRpbWVvdXRNZXNzYWdlIiwid2l0aENyZWRlbnRpYWxzIiwid2l0aFhTUkZUb2tlbiIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJkZWNvbXByZXNzIiwiYmVmb3JlUmVkaXJlY3QiLCJ0cmFuc3BvcnQiLCJodHRwQWdlbnQiLCJodHRwc0FnZW50IiwiY2FuY2VsVG9rZW4iLCJzb2NrZXRQYXRoIiwicmVzcG9uc2VFbmNvZGluZyIsImNvbmZpZ1ZhbHVlIiwibmV3Q29uZmlnIiwiYXV0aCIsImJ0b2EiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidW5lc2NhcGUiLCJCb29sZWFuIiwiaXNVUkxTYW1lT3JpZ2luIiwieHNyZlZhbHVlIiwiY29va2llcyIsIlhNTEh0dHBSZXF1ZXN0IiwiUHJvbWlzZSIsIl9jb25maWciLCJyZXNvbHZlQ29uZmlnIiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsIm9uQ2FuY2VsZWQiLCJ1cGxvYWRUaHJvdHRsZWQiLCJkb3dubG9hZFRocm90dGxlZCIsImZsdXNoVXBsb2FkIiwiZmx1c2hEb3dubG9hZCIsInVuc3Vic2NyaWJlIiwic2lnbmFsIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9ubG9hZGVuZCIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsImVyciIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJvcGVuIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwib25hYm9ydCIsIkVDT05OQUJPUlRFRCIsIm9uZXJyb3IiLCJFUlJfTkVUV09SSyIsIm9udGltZW91dCIsInRpbWVvdXRFcnJvck1lc3NhZ2UiLCJFVElNRURPVVQiLCJzZXRSZXF1ZXN0SGVhZGVyIiwidXBsb2FkIiwiY2FuY2VsIiwiYWJvcnQiLCJzdWJzY3JpYmUiLCJhYm9ydGVkIiwicGFyc2VQcm90b2NvbCIsInNlbmQiLCJzaWduYWxzIiwiY29udHJvbGxlciIsIkFib3J0Q29udHJvbGxlciIsInJlYXNvbiIsInN0cmVhbUNodW5rIiwiY2h1bmsiLCJjaHVua1NpemUiLCJieXRlTGVuZ3RoIiwiZW5kIiwicG9zIiwidHJhY2tTdHJlYW0iLCJzdHJlYW0iLCJvblByb2dyZXNzIiwib25GaW5pc2giLCJhc3luYyIsIml0ZXJhYmxlIiwiYXN5bmNJdGVyYXRvciIsInJlYWRlciIsImdldFJlYWRlciIsInJlYWRTdHJlYW0iLCJyZWFkQnl0ZXMiLCJfb25GaW5pc2giLCJSZWFkYWJsZVN0cmVhbSIsInB1bGwiLCJjbG9zZSIsImxvYWRlZEJ5dGVzIiwiZW5xdWV1ZSIsInJldHVybiIsImhpZ2hXYXRlck1hcmsiLCJpc0ZldGNoU3VwcG9ydGVkIiwiZmV0Y2giLCJSZXF1ZXN0IiwiUmVzcG9uc2UiLCJpc1JlYWRhYmxlU3RyZWFtU3VwcG9ydGVkIiwiZW5jb2RlVGV4dCIsIlRleHRFbmNvZGVyIiwiYXJyYXlCdWZmZXIiLCJzdXBwb3J0c1JlcXVlc3RTdHJlYW0iLCJkdXBsZXhBY2Nlc3NlZCIsImhhc0NvbnRlbnRUeXBlIiwiYm9keSIsImR1cGxleCIsInN1cHBvcnRzUmVzcG9uc2VTdHJlYW0iLCJyZXNvbHZlcnMiLCJyZXMiLCJfIiwiRVJSX05PVF9TVVBQT1JUIiwia25vd25BZGFwdGVycyIsImh0dHAiLCJ4aHIiLCJmZXRjaE9wdGlvbnMiLCJjb21wb3NlZFNpZ25hbCIsInRvQWJvcnRTaWduYWwiLCJyZXF1ZXN0Q29udGVudExlbmd0aCIsImdldENvbnRlbnRMZW5ndGgiLCJfcmVxdWVzdCIsImdldEJvZHlMZW5ndGgiLCJyZXNvbHZlQm9keUxlbmd0aCIsImNvbnRlbnRUeXBlSGVhZGVyIiwiZmx1c2giLCJpc0NyZWRlbnRpYWxzU3VwcG9ydGVkIiwiY3JlZGVudGlhbHMiLCJpc1N0cmVhbVJlc3BvbnNlIiwicmVzcG9uc2VDb250ZW50TGVuZ3RoIiwicmVzcG9uc2VEYXRhIiwicmVuZGVyUmVhc29uIiwiaXNSZXNvbHZlZEhhbmRsZSIsImFkYXB0ZXJzIiwibmFtZU9yQWRhcHRlciIsInJlamVjdGVkUmVhc29ucyIsInJlYXNvbnMiLCJzdGF0ZSIsInMiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwidGhyb3dJZlJlcXVlc3RlZCIsImRpc3BhdGNoUmVxdWVzdCIsInZhbGlkYXRvcnMiLCJkZXByZWNhdGVkV2FybmluZ3MiLCJ2YWxpZGF0b3IiLCJ2ZXJzaW9uIiwiZm9ybWF0TWVzc2FnZSIsIm9wdCIsImRlc2MiLCJvcHRzIiwiRVJSX0RFUFJFQ0FURUQiLCJjb25zb2xlIiwid2FybiIsInNwZWxsaW5nIiwiY29ycmVjdFNwZWxsaW5nIiwiYXNzZXJ0T3B0aW9ucyIsInNjaGVtYSIsImFsbG93VW5rbm93biIsIkVSUl9CQURfT1BUSU9OX1ZBTFVFIiwiRVJSX0JBRF9PUFRJT04iLCJBeGlvcyIsImluc3RhbmNlQ29uZmlnIiwiaW50ZXJjZXB0b3JzIiwiY29uZmlnT3JVcmwiLCJkdW1teSIsImJvb2xlYW4iLCJmdW5jdGlvbiIsImJhc2VVcmwiLCJ3aXRoWHNyZlRva2VuIiwiY29udGV4dEhlYWRlcnMiLCJyZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbiIsInN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyIsImludGVyY2VwdG9yIiwidW5zaGlmdCIsInJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiIsInByb21pc2UiLCJjaGFpbiIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImdldFVyaSIsImdlbmVyYXRlSFRUUE1ldGhvZCIsImlzRm9ybSIsIkNhbmNlbFRva2VuIiwiZXhlY3V0b3IiLCJyZXNvbHZlUHJvbWlzZSIsIl9saXN0ZW5lcnMiLCJvbmZ1bGZpbGxlZCIsIl9yZXNvbHZlIiwic3BsaWNlIiwiYyIsIkh0dHBTdGF0dXNDb2RlIiwiQ29udGludWUiLCJTd2l0Y2hpbmdQcm90b2NvbHMiLCJQcm9jZXNzaW5nIiwiRWFybHlIaW50cyIsIk9rIiwiQ3JlYXRlZCIsIkFjY2VwdGVkIiwiTm9uQXV0aG9yaXRhdGl2ZUluZm9ybWF0aW9uIiwiTm9Db250ZW50IiwiUmVzZXRDb250ZW50IiwiUGFydGlhbENvbnRlbnQiLCJNdWx0aVN0YXR1cyIsIkFscmVhZHlSZXBvcnRlZCIsIkltVXNlZCIsIk11bHRpcGxlQ2hvaWNlcyIsIk1vdmVkUGVybWFuZW50bHkiLCJGb3VuZCIsIlNlZU90aGVyIiwiTm90TW9kaWZpZWQiLCJVc2VQcm94eSIsIlVudXNlZCIsIlRlbXBvcmFyeVJlZGlyZWN0IiwiUGVybWFuZW50UmVkaXJlY3QiLCJCYWRSZXF1ZXN0IiwiVW5hdXRob3JpemVkIiwiUGF5bWVudFJlcXVpcmVkIiwiRm9yYmlkZGVuIiwiTm90Rm91bmQiLCJNZXRob2ROb3RBbGxvd2VkIiwiTm90QWNjZXB0YWJsZSIsIlByb3h5QXV0aGVudGljYXRpb25SZXF1aXJlZCIsIlJlcXVlc3RUaW1lb3V0IiwiQ29uZmxpY3QiLCJHb25lIiwiTGVuZ3RoUmVxdWlyZWQiLCJQcmVjb25kaXRpb25GYWlsZWQiLCJQYXlsb2FkVG9vTGFyZ2UiLCJVcmlUb29Mb25nIiwiVW5zdXBwb3J0ZWRNZWRpYVR5cGUiLCJSYW5nZU5vdFNhdGlzZmlhYmxlIiwiRXhwZWN0YXRpb25GYWlsZWQiLCJJbUFUZWFwb3QiLCJNaXNkaXJlY3RlZFJlcXVlc3QiLCJVbnByb2Nlc3NhYmxlRW50aXR5IiwiTG9ja2VkIiwiRmFpbGVkRGVwZW5kZW5jeSIsIlRvb0Vhcmx5IiwiVXBncmFkZVJlcXVpcmVkIiwiUHJlY29uZGl0aW9uUmVxdWlyZWQiLCJUb29NYW55UmVxdWVzdHMiLCJSZXF1ZXN0SGVhZGVyRmllbGRzVG9vTGFyZ2UiLCJVbmF2YWlsYWJsZUZvckxlZ2FsUmVhc29ucyIsIkludGVybmFsU2VydmVyRXJyb3IiLCJOb3RJbXBsZW1lbnRlZCIsIkJhZEdhdGV3YXkiLCJTZXJ2aWNlVW5hdmFpbGFibGUiLCJHYXRld2F5VGltZW91dCIsIkh0dHBWZXJzaW9uTm90U3VwcG9ydGVkIiwiVmFyaWFudEFsc29OZWdvdGlhdGVzIiwiSW5zdWZmaWNpZW50U3RvcmFnZSIsIkxvb3BEZXRlY3RlZCIsIk5vdEV4dGVuZGVkIiwiTmV0d29ya0F1dGhlbnRpY2F0aW9uUmVxdWlyZWQiLCJheGlvcyIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsImluc3RhbmNlIiwiVkVSU0lPTiIsInRvRm9ybURhdGEiLCJDYW5jZWwiLCJhbGwiLCJwcm9taXNlcyIsInNwcmVhZCIsImNhbGxiYWNrIiwiaXNBeGlvc0Vycm9yIiwicGF5bG9hZCIsImZvcm1Ub0pTT04iLCJnZXRBZGFwdGVyIiwiZGVmYXVsdCIsIlNlYXJjaCIsInF1ZXJ5IiwiZG9TZWFyY2giLCJzZWFyY2giLCJyZWNpcGVzIiwibG9nIiwic2VhcmNoRm9ybSIsInF1ZXJ5U2VsZWN0b3IiLCJzZWFyY2hJbnB1dCIsInNlYXJjaFJlc3VsdExpc3QiLCJzZWFyY2hSZXN1bHREaXYiLCJwYWdlQnV0dG9ucyIsInJlY2lwZURpdiIsInNob3BwaW5nQmFza2V0IiwibGlrZXNNdW5lIiwibGlrZXNMaXN0TXVuZSIsImVsZW1lbnRTdHJpbmdzIiwicmVuZGVyTG9hZGVyIiwicGFyZW50IiwibG9hZGVyIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwiY2xlYXJMb2FkZXIiLCJwYXJlbnRFbGVtZW50IiwicmVtb3ZlQ2hpbGQiLCJjbGVhclNlYXJjaFJlc3VsdCIsImlubmVySFRNTCIsInJlbmRlclJlY2lwZXMiLCJjdXJyZW50UGFnZSIsInJlc3VsdFBlclBhZ2UiLCJzdGFydCIsInJlY2lwZSIsIm1hcmt1cCIsInJlY2lwZV9pZCIsImltYWdlX3VybCIsInRpdGxlIiwicHVibGlzaGVyIiwicmVuZGVyUmVjaXBlIiwidG90YWxQYWdlcyIsImNlaWwiLCJyZW5kZXJCdXR0b25zIiwiY3JlYXRlQnV0dG9uIiwicGFnZSIsImRpcmVjdGlvbiIsImJ1dHRvbkh0bWwiLCJSZWNpcGUiLCJnZXRSZWNpcGUiLCJpbmdyZWRpZW50cyIsInB1Ymxpc2hlcl91cmwiLCJzb2NpYWxfcmFuayIsInNvdXJjZV91cmwiLCJjYWxjVGltZSIsImNhbGNIdW5paVRvbyIsImh1bmlpVG9vIiwiQmFza2V0IiwiaXRlbXMiLCJkZWxldGVJdGVtIiwiZmluZEluZGV4IiwiYWRkSXRlbSIsIml0ZW0iLCJuZXdJdGVtIiwiTGlrZXMiLCJyZWFkRGF0YUZyb21Mb2NhbFN0b3JhZ2UiLCJsaWtlcyIsImFkZExpa2UiLCJpbWciLCJsaWtlIiwic2F2ZWRhdGFUb0xvY2FsU3RvcmFnZSIsImRlbGV0ZUxpa2UiLCJpc0xpa2VkIiwiZ2V0TnVtYmVyT2ZMaWtlcyIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJnZXRJdGVtIiwidG9nZ2xlTGlrZUJ0biIsImljb25TdHJpbmciLCJzZXRBdHRyaWJ1dGUiLCJ0b2dnbGVMaWtlTWVudSIsIm51bWJlck9mTGlrZSIsInN0eWxlIiwidmlzaWJpbGl0eSIsInJlbmRlckxpa2UiLCJuZXdMaWtlT3JqSXJuZSIsImh0bWwiLCJ0ZW1wRGl2IiwiY3JlYXRlRWxlbWVudCIsImVsZW1lbnQiLCJmaXJzdEVsZW1lbnRDaGlsZCIsImluc2VydEFkamFjZW50RWxlbWVudCIsInByZXZlbnREZWZhdWx0IiwiYWxlcnQiLCJjb250cm9sU2VhcmNoIiwiYnRuIiwiY2xvc2VzdCIsImdvVG9QYWdlTnVtYmVyIiwicGFyc2VJbnQiLCJkYXRhc2V0IiwiZ290byIsImNvbnRyb2xSZWNpcGUiLCJoYXNoIiwicXVlcnlTZWxlY3RvckFsbCIsImNsYXNzTGlzdCIsIkRvbU9iamVjdCIsImFkZCIsImhpZ2hMaWdodFNlbGVjdGVkUmVjaXBlIiwiYmFza2V0IiwidHQiLCJjdXJyZW50UmVjaXBlSWQiLCJsaSIsIm5ld0xpa2UiLCJ0aWl0bGUiLCJjb250cm9sTGlrZSIsIml0ZW1pZCJdLCJzb3VyY2VSb290IjoiIn0=